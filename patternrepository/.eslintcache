[{"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx":"1","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx":"2","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx":"3","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx":"4","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx":"5","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx":"6","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx":"7","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx":"8","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx":"9","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx":"10","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx":"11","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx":"12","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx":"13","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx":"14","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx":"15","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx":"16","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx":"17","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx":"18","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx":"19","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx":"20","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx":"21","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx":"22","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx":"23","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx":"24","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx":"25","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx":"26","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx":"27","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx":"28","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx":"29","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx":"30","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx":"31","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx":"32","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx":"33","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx":"34","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx":"35","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\usersProvider.tsx":"36","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\userServices.tsx":"37","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\likedPatternsServices.tsx":"38","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\bookContainer.tsx":"39","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\viewBook.tsx":"40","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\editBook.tsx":"41","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\followedUsersService.tsx":"42","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\search.tsx":"43","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\commentsService.tsx":"44","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\homePage.tsx":"45","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\adminContact.tsx":"46","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\noteServices.tsx":"47","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\notes.tsx":"48"},{"size":901,"mtime":1620600362885,"results":"49","hashOfConfig":"50"},{"size":275,"mtime":1618591518992,"results":"51","hashOfConfig":"50"},{"size":2059,"mtime":1620600362879,"results":"52","hashOfConfig":"50"},{"size":1585,"mtime":1620600362887,"results":"53","hashOfConfig":"50"},{"size":3253,"mtime":1620600362880,"results":"54","hashOfConfig":"50"},{"size":1545,"mtime":1618610348765,"results":"55","hashOfConfig":"50"},{"size":1535,"mtime":1618524201222,"results":"56","hashOfConfig":"50"},{"size":135,"mtime":1618332767713,"results":"57","hashOfConfig":"50"},{"size":745,"mtime":1620431535263,"results":"58","hashOfConfig":"50"},{"size":3271,"mtime":1618610348755,"results":"59","hashOfConfig":"50"},{"size":415,"mtime":1617579618712,"results":"60","hashOfConfig":"50"},{"size":1768,"mtime":1618524201223,"results":"61","hashOfConfig":"50"},{"size":4931,"mtime":1620659637834,"results":"62","hashOfConfig":"50"},{"size":12382,"mtime":1620600362884,"results":"63","hashOfConfig":"50"},{"size":1362,"mtime":1617579618712,"results":"64","hashOfConfig":"50"},{"size":9339,"mtime":1620600362881,"results":"65","hashOfConfig":"50"},{"size":15913,"mtime":1620515432748,"results":"66","hashOfConfig":"50"},{"size":196,"mtime":1617283949558,"results":"67","hashOfConfig":"50"},{"size":14361,"mtime":1620600362881,"results":"68","hashOfConfig":"50"},{"size":1305,"mtime":1620515432757,"results":"69","hashOfConfig":"50"},{"size":1037,"mtime":1618336456802,"results":"70","hashOfConfig":"50"},{"size":12699,"mtime":1620600362883,"results":"71","hashOfConfig":"50"},{"size":17452,"mtime":1620515432749,"results":"72","hashOfConfig":"50"},{"size":650,"mtime":1618763627960,"results":"73","hashOfConfig":"50"},{"size":12426,"mtime":1620600362885,"results":"74","hashOfConfig":"50"},{"size":1146,"mtime":1618761398340,"results":"75","hashOfConfig":"50"},{"size":2668,"mtime":1618610348757,"results":"76","hashOfConfig":"50"},{"size":1005,"mtime":1618610348767,"results":"77","hashOfConfig":"50"},{"size":1319,"mtime":1618610348766,"results":"78","hashOfConfig":"50"},{"size":1510,"mtime":1620515432754,"results":"79","hashOfConfig":"50"},{"size":279,"mtime":1618610348766,"results":"80","hashOfConfig":"50"},{"size":1175,"mtime":1618688616561,"results":"81","hashOfConfig":"50"},{"size":2586,"mtime":1618688616563,"results":"82","hashOfConfig":"50"},{"size":2458,"mtime":1618685794822,"results":"83","hashOfConfig":"50"},{"size":2058,"mtime":1620600362882,"results":"84","hashOfConfig":"50"},{"size":1439,"mtime":1620600362887,"results":"85","hashOfConfig":"50"},{"size":229,"mtime":1620338532216,"results":"86","hashOfConfig":"50"},{"size":389,"mtime":1620338532214,"results":"87","hashOfConfig":"50"},{"size":1072,"mtime":1620431535260,"results":"88","hashOfConfig":"50"},{"size":3825,"mtime":1620431535261,"results":"89","hashOfConfig":"50"},{"size":2672,"mtime":1620431535261,"results":"90","hashOfConfig":"50"},{"size":392,"mtime":1620431535266,"results":"91","hashOfConfig":"50"},{"size":8498,"mtime":1620515432751,"results":"92","hashOfConfig":"50"},{"size":716,"mtime":1620515432756,"results":"93","hashOfConfig":"50"},{"size":1859,"mtime":1620600362878,"results":"94","hashOfConfig":"50"},{"size":2551,"mtime":1620600362877,"results":"95","hashOfConfig":"50"},{"size":691,"mtime":1620600362888,"results":"96","hashOfConfig":"50"},{"size":5068,"mtime":1620600362879,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"g8f8c4",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"100"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"183"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"183"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"100"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"100"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"100"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"100"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"100"},"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx",[],["227","228","229","230","231"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx",["232"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { auth, generateUserDocument } from '../firebase';\r\nimport { user } from '../types';\r\n\r\nexport const UserContext = createContext<{ user: user }>({\r\n    user: null,\r\n});\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UserProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState<{ user: user }>({\r\n        user: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (userAuth) => {\r\n            if (userAuth) {\r\n                const signedUser: any = await generateUserDocument(userAuth, null);\r\n                setCurrentUser({\r\n                    user: {\r\n                        uid: signedUser?.uid,\r\n                        email: signedUser?.email,\r\n                        username: signedUser?.username,\r\n                        avatar: signedUser?.avatar,\r\n                        description: signedUser?.description,\r\n                        darkTheme: signedUser?.darkTheme,\r\n                        hasUnreadNotes: signedUser?.hasUnreadNotes\r\n                            ? signedUser?.hasUnreadNotes\r\n                            : false,\r\n                    },\r\n                });\r\n            } else {\r\n                setCurrentUser({ user: null });\r\n            }\r\n        });\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    return <UserContext.Provider value={currentUser}>{children}</UserContext.Provider>;\r\n};\r\n\r\nexport default UserProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx",["233"],"import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { auth } from '../logic/firebase';\r\n\r\nimport { UserContext } from '../logic/providers/userProvider';\r\nimport { UsersContext } from '../logic/providers/usersProvider';\r\n\r\nimport { PageHeader as PH, HeaderName, Navigation, NavItem } from '../design/styledComponents';\r\n\r\nconst PageHeader: React.FC = () => {\r\n    const { user } = useContext(UserContext);\r\n    const { allUsers } = useContext(UsersContext);\r\n\r\n    const logOutHandler = (event: any) => {\r\n        event.preventDefault();\r\n        auth.signOut();\r\n    };\r\n\r\n    const updatedUser = allUsers.find((u) => u.uid === user?.uid);\r\n\r\n    return (\r\n        <PH>\r\n            <HeaderName>\r\n                <Link to=\"/home\">patternRepository</Link>\r\n            </HeaderName>\r\n            <Navigation>\r\n                <NavItem>\r\n                    <Link to=\"/home\">Home</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/patterns\">Browse patterns</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/about\">About us</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/note-to-admins\">Something wrong? Let us know!</Link>\r\n                </NavItem>\r\n                <NavItem style={{ float: 'right' }}>\r\n                    <UncontrolledDropdown nav inNavbar>\r\n                        <DropdownToggle nav caret>\r\n                            {`Welcome ${user?.username}`}\r\n                            {updatedUser?.hasUnreadNotes && (\r\n                                <FontAwesomeIcon\r\n                                    style={{ color: '#DB7093', paddingLeft: '0.2em' }}\r\n                                    icon={['fas', 'circle']}\r\n                                />\r\n                            )}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                            <DropdownItem>\r\n                                <Link to={`/profile/${user?.uid}`}>Profile</Link>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <Link to=\"/notes\">\r\n                                    Notes{' '}\r\n                                    {updatedUser?.hasUnreadNotes && (\r\n                                        <FontAwesomeIcon\r\n                                            style={{ color: '#DB7093', paddingLeft: '0.2em' }}\r\n                                            icon={['fas', 'circle']}\r\n                                        />\r\n                                    )}\r\n                                </Link>\r\n                            </DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem onClick={logOutHandler}>Log out</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                </NavItem>\r\n            </Navigation>\r\n        </PH>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx",["234","235","236","237","238","239","240","241"],"import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nimport firebaseConfig from './firebaseConfig';\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n} else {\r\n    firebase.app(); // if already initialized, use that one\r\n}\r\n\r\n// firebase.initializeApp();\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const storage = firebase.storage();\r\n\r\nconst getUserDocument = async (uid: any) => {\r\n    if (!uid) return null;\r\n    try {\r\n        const userDocument = await firestore.doc(`users/${uid}`).get();\r\n        // const userAvatar = await storage.ref(`/avatars/${uid}`)?.getDownloadURL();\r\n        return {\r\n            uid,\r\n            ...userDocument.data(),\r\n            avatar: null, // userAvatar,\r\n        };\r\n    } catch (error) {\r\n        console.error(error.code);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const generateUserDocument = async (user: any, additionalData: any) => {\r\n    if (!user) return {};\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if (!snapshot.exists) {\r\n        const { email } = user;\r\n        try {\r\n            await userRef.set({\r\n                username: user.username,\r\n                email,\r\n                ...additionalData,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error creating user document', error);\r\n        }\r\n    }\r\n    return getUserDocument(user.uid);\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx",["242"],"import React, { useState } from 'react';\r\nimport { auth, generateUserDocument } from '../../logic/firebase';\r\n\r\nimport { isEmail } from '../../logic/helperFunctions';\r\n\r\nimport {\r\n    SuccessButton,\r\n    Input,\r\n    Label,\r\n    FormGroup,\r\n    DangerAlert,\r\n    HelperText,\r\n} from '../../design/styledComponents';\r\n\r\nconst SignUp: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordRepeat, setPasswordRepeat] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const createUserWithEmailAndPasswordHandler = async (event: any) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\r\n            generateUserDocument(user, { username });\r\n        } catch (errorData) {\r\n            setError('Error Signing up with email and password');\r\n        }\r\n\r\n        setUsername('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>Username</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter username\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <HelperText>You can change your username later ^^</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter mail\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => {\r\n                        if (!isEmail(e.target.value)) {\r\n                            setError('This is not a valid email!');\r\n                        } else {\r\n                            setError(null);\r\n                        }\r\n                        setEmail(e.target.value);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <HelperText>Password has to have at least six characters</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Repeat password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Repeat password\"\r\n                    value={passwordRepeat}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPasswordRepeat(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={createUserWithEmailAndPasswordHandler}>\r\n                Sign up\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx",["243","244"],"import React, { useState, useCallback } from 'react';\r\nimport { auth } from '../../logic/firebase';\r\n\r\nimport { SuccessButton, Input, Label, FormGroup, DangerAlert } from '../../design/styledComponents';\r\n\r\nconst SignIn: React.FC = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const signInWithEmailAndPasswordHandler = useCallback(\r\n        (event: any) => {\r\n            event.preventDefault();\r\n            auth.signInWithEmailAndPassword(email, password).catch((errorData) => {\r\n                setError('Error signing in with password and email!');\r\n                console.error('Error signing in with password and email', errorData);\r\n            });\r\n        },\r\n        [email, password],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={signInWithEmailAndPasswordHandler}>\r\n                Sign in\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\nexport default SignIn;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx",["245","246"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx",["247","248","249","250"],"import React, { useContext, useEffect, useState, useCallback } from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { UncontrolledCarousel, Modal } from 'reactstrap';\r\nimport NoteService from '../../logic/services/noteServices';\r\nimport { firestore } from '../../logic/firebase';\r\n\r\nimport { UsersContext } from '../../logic/providers/usersProvider';\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\n\r\nimport BookContainer from '../patternList/books/bookContainer';\r\n\r\nimport { userInfo, book as bookType, pattern as patternType, noteToAdd } from '../../logic/types';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport FollowedUsersService from '../../logic/services/followedUsersService';\r\n\r\nimport noAvatar from '../../design/images/no-image-icon.png';\r\n\r\nimport {\r\n    Main,\r\n    HelperText,\r\n    LinkButton,\r\n    MarginItemDetail,\r\n    BookButton,\r\n    ProfileHeader,\r\n    SuccessButton,\r\n    DangerButton,\r\n    ItemLabel,\r\n    ItemHeader,\r\n    Description,\r\n    UserInfoRow,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n}\r\n\r\nconst noImagesToShow = {\r\n    src:\r\n        'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa1d%20text%20%7B%20fill%3A%23555%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa1d%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.921875%22%20y%3D%22218.3%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\r\n    altText: 'Image could not be showcased',\r\n    header: 'You have no images to show here yet :c',\r\n    key: '1',\r\n};\r\nconst ProfileView: React.FC<PropsType> = ({ openEdit }) => {\r\n    const { user: currentUser } = useContext(UserContext);\r\n    const { allUsers } = useContext(UsersContext);\r\n    const { allBooks } = useContext(BookContext);\r\n    const { allTags } = useContext(TagContext);\r\n\r\n    const [user, setUser] = useState<userInfo>();\r\n    const [books, setBooks] = useState<bookType[]>([]);\r\n    const [chosenBook, setChosenBook] = useState<bookType | null>(null);\r\n\r\n    const [patterns, setPatterns] = useState<patternType[]>([]);\r\n    const [followedUsers, setFollowedUsers] = useState<userInfo[]>([]);\r\n    const [myFollowedUsers, setMyFollowedUsers] = useState<string[]>([]);\r\n    const [imagesToShow, setImagesToShow] = useState<\r\n        { src: string; altText: string; header: string; key: string }[]\r\n    >([noImagesToShow]);\r\n\r\n    const uid = useLocation().pathname.substring(9);\r\n\r\n    useEffect(() => {\r\n        const chosenUser = allUsers.find((u) => u.uid === uid);\r\n        setUser(chosenUser);\r\n        const ownedBooks = allBooks.filter((book) => book.owner === uid);\r\n        setBooks(ownedBooks);\r\n    }, [uid, allBooks, allUsers]);\r\n\r\n    const onDataChange = useCallback(\r\n        (items: any) => {\r\n            let loadedPatterns: patternType[] = [];\r\n            loadedPatterns = [];\r\n\r\n            let newImagesToShow: {\r\n                src: string;\r\n                altText: string;\r\n                header: string;\r\n                key: string;\r\n            }[] = [];\r\n            newImagesToShow = [];\r\n\r\n            items.docs.forEach((item: any) => {\r\n                const { id } = item;\r\n                const data = item.data();\r\n\r\n                loadedPatterns.push({\r\n                    id,\r\n                    title: data.title,\r\n                    description: data.description,\r\n                    difficulty: data.difficulty,\r\n                    owner: user,\r\n                    patternImages: data.patternImages,\r\n                    finishedWorkImages: data.finishedWorkImages,\r\n                    tags: allTags.length\r\n                        ? data.tags.map((tagId: string) => allTags.find((tag) => tag.id === tagId))\r\n                        : [],\r\n                    books: allBooks.length\r\n                        ? data.books.map((bookId: string) =>\r\n                              allBooks.find((book) => book.id === bookId),\r\n                          )\r\n                        : [],\r\n                    likes: data.likes ? data.likes : 0,\r\n                    dateCreated: data.dateCreated ? data.dateCreated : -1,\r\n                    comments: data.comments ? data.comments : 0,\r\n                });\r\n\r\n                newImagesToShow = newImagesToShow.concat(\r\n                    data.finishedWorkImages.map(\r\n                        (img: { name: string; url: string }, index: number) => ({\r\n                            src: img.url,\r\n                            altText: img.name,\r\n                            header: `${data.title} - ${index}`,\r\n                            key: `${data.title} - ${index}`,\r\n                        }),\r\n                    ),\r\n                );\r\n            });\r\n\r\n            setPatterns(\r\n                loadedPatterns.sort((p1: patternType, p2: patternType) =>\r\n                    (p1?.dateCreated ? p1.dateCreated : -1) >\r\n                    (p2?.dateCreated ? p2.dateCreated : -1)\r\n                        ? 1\r\n                        : -1,\r\n                ),\r\n            );\r\n\r\n            if (newImagesToShow.length === 0) {\r\n                setImagesToShow([noImagesToShow]);\r\n            } else {\r\n                setImagesToShow(newImagesToShow);\r\n            }\r\n        },\r\n        [allTags, allBooks, user],\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = PatternService.getAll()\r\n            .where('owner', '==', uid)\r\n            .onSnapshot(onDataChange);\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [onDataChange, uid]);\r\n\r\n    const onDataFollowedChange = useCallback(\r\n        (items: any) => {\r\n            if (allUsers.length > 0) {\r\n                let newFollowedUsers = items.data()?.users ? items.data()?.users : [];\r\n                newFollowedUsers = newFollowedUsers.map((followedUserId: string) =>\r\n                    allUsers.find((u: userInfo) => u.uid === followedUserId),\r\n                );\r\n                setFollowedUsers(newFollowedUsers);\r\n            }\r\n        },\r\n        [allUsers],\r\n    );\r\n\r\n    const onDataMyFollowedChange = useCallback((items: any) => {\r\n        setMyFollowedUsers(items.data()?.users ? items.data()?.users : []);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe2 = FollowedUsersService.getAll()\r\n            .doc(currentUser?.uid ? currentUser.uid : '')\r\n            .onSnapshot(onDataMyFollowedChange);\r\n\r\n        const unsubscribe3 = FollowedUsersService.getAll()\r\n            .doc(uid)\r\n            .onSnapshot(onDataFollowedChange);\r\n\r\n        return () => {\r\n            unsubscribe2();\r\n            unsubscribe3();\r\n        };\r\n    }, [onDataFollowedChange, onDataMyFollowedChange, currentUser?.uid, uid]);\r\n\r\n    const getPatternsInBook = (bookId: string) => {\r\n        return patterns.filter((p: patternType) => p.books.some((b: bookType) => b.id === bookId));\r\n    };\r\n\r\n    const changeFollow = () => {\r\n        let newMyFollowedUsers: string[] = [];\r\n        if (myFollowedUsers.includes(uid)) {\r\n            newMyFollowedUsers = [...myFollowedUsers.filter((id) => id !== uid)];\r\n        } else {\r\n            newMyFollowedUsers = [...myFollowedUsers, uid];\r\n        }\r\n\r\n        FollowedUsersService.setFollowed(\r\n            currentUser?.uid ? currentUser.uid : '',\r\n            newMyFollowedUsers,\r\n        );\r\n\r\n        const newNote: noteToAdd = {\r\n            by: currentUser?.uid ? currentUser.uid : 'none',\r\n            message: `${currentUser?.username} is now following you!`,\r\n            dateCreated: moment().unix(),\r\n            to: uid,\r\n            seen: false,\r\n        };\r\n        NoteService.create(newNote);\r\n\r\n        firestore.collection(`users`).doc(uid).update({\r\n            hasUnreadNotes: true,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Main>\r\n            {currentUser?.uid === user?.uid && (\r\n                <HelperText>\r\n                    {`This is how other users see you profile. Click `}\r\n                    <LinkButton block={false} onClick={() => openEdit(true)}>\r\n                        here\r\n                    </LinkButton>{' '}\r\n                    to edit.\r\n                </HelperText>\r\n            )}\r\n\r\n            <MarginItemDetail>\r\n                <UncontrolledCarousel items={imagesToShow} />\r\n                <ProfileHeader>\r\n                    <img src={user?.avatar ? user.avatar : noAvatar} alt=\"avatar\" />\r\n                    <ItemHeader>{`${user?.username}`}</ItemHeader>\r\n                    {uid !== currentUser?.uid && !myFollowedUsers.includes(uid) && (\r\n                        <SuccessButton block={false} onClick={() => changeFollow()}>\r\n                            Follow\r\n                        </SuccessButton>\r\n                    )}\r\n                    {uid !== currentUser?.uid && myFollowedUsers.includes(uid) && (\r\n                        <DangerButton block={false} onClick={() => changeFollow()}>\r\n                            Unfollow\r\n                        </DangerButton>\r\n                    )}\r\n                    {uid === currentUser?.uid && (\r\n                        <img src={user?.avatar ? user.avatar : noAvatar} alt=\"avatar\" />\r\n                    )}\r\n                </ProfileHeader>\r\n                <Description\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: user?.description ? user?.description : 'No description here ^^;',\r\n                    }}\r\n                />\r\n            </MarginItemDetail>\r\n\r\n            <MarginItemDetail>\r\n                <ItemLabel style={{ marginTop: '0em' }}>Books</ItemLabel>\r\n                {books.length === 0 && <div>You have no books :c</div>}\r\n                {books.length > 0 &&\r\n                    books.map((book) => (\r\n                        <BookButton\r\n                            key={book.label}\r\n                            colour={book.colour}\r\n                            onClick={() => setChosenBook(book)}\r\n                        >\r\n                            {`${book.label} (${getPatternsInBook(book.id).length} patterns)`}\r\n                        </BookButton>\r\n                    ))}\r\n            </MarginItemDetail>\r\n            <MarginItemDetail>\r\n                <ItemLabel style={{ marginTop: '0em' }}>Followed users</ItemLabel>\r\n                {followedUsers.length === 0 && uid === currentUser?.uid && (\r\n                    <div>You follow no users</div>\r\n                )}\r\n                {followedUsers.length === 0 && uid !== currentUser?.uid && (\r\n                    <div>This user follows noone.</div>\r\n                )}\r\n                {followedUsers.length > 0 &&\r\n                    followedUsers.map((followedUser: userInfo) => (\r\n                        <UserInfoRow key={followedUser.uid}>\r\n                            <Link to={`/profile/${followedUser.uid}`}>\r\n                                <img\r\n                                    key={followedUser.uid}\r\n                                    src={followedUser.avatar ? followedUser.avatar : undefined}\r\n                                    alt={followedUser.avatar ? followedUser.avatar : undefined}\r\n                                />\r\n                                <span>{followedUser.username}</span>\r\n                            </Link>\r\n                        </UserInfoRow>\r\n                    ))}\r\n            </MarginItemDetail>\r\n\r\n            {chosenBook && (\r\n                <Modal isOpen={chosenBook !== null} toggle={() => setChosenBook(null)}>\r\n                    <BookContainer\r\n                        closeModal={() => setChosenBook(null)}\r\n                        currentBook={chosenBook}\r\n                        patterns={getPatternsInBook(chosenBook.id)}\r\n                    />\r\n                </Modal>\r\n            )}\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default ProfileView;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx",["251"],"import { useState } from 'react';\r\n\r\nimport { storage } from '../firebase';\r\n\r\nconst useStorage = (file: File | null) => {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [url, setUrl] = useState<string | null>(null);\r\n\r\n    // runs every time the file value changes\r\n    const uploadImage = (storageName: string, pictureName: string) => {\r\n        if (file) {\r\n            // storage ref\r\n            const storageRef = storage.ref(`${storageName}/${pictureName}`);\r\n\r\n            storageRef.put(file).on(\r\n                'state_changed',\r\n                (snap) => {\r\n                    // track the upload progress\r\n                    const percentage = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                    setProgress(percentage);\r\n                },\r\n                (err) => {\r\n                    setError(err.message);\r\n                },\r\n                async () => {\r\n                    // get the public download img url\r\n                    const downloadUrl = await storageRef.getDownloadURL();\r\n\r\n                    // save the url to local state\r\n                    setUrl(downloadUrl);\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    return { progress, url, error, uploadImage };\r\n};\r\nexport default useStorage;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx",["252"],"import React, { useState, useCallback } from 'react';\r\nimport Select from 'react-select';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal } from 'reactstrap';\r\nimport AddPattern from './addPattern';\r\nimport AddBook from './books/addBook';\r\nimport PatternContainer from './patternContainer';\r\nimport List from './list';\r\nimport Search from './search';\r\n\r\nimport { searchStyle } from '../../design/selectStyles';\r\n\r\nimport TagProvider from '../../logic/providers/tagProvider';\r\nimport BookProvider from '../../logic/providers/bookProvider';\r\nimport { pattern as patternType, tag, book } from '../../logic/types';\r\n\r\nimport {\r\n    Main,\r\n    SearchCard,\r\n    SuccessButton,\r\n    Input,\r\n    CancelButton,\r\n    InvisibleIconButton,\r\n} from '../../design/styledComponents';\r\n\r\nconst emptyPattern: patternType = {\r\n    id: '',\r\n    title: null,\r\n    description: null,\r\n    difficulty: 3,\r\n    owner: { uid: '0', username: '', avatar: '' },\r\n    patternImages: [],\r\n    finishedWorkImages: [],\r\n    tags: [],\r\n    books: [],\r\n    likes: 0,\r\n    comments: 0,\r\n};\r\n\r\nconst PatternList: React.FC = React.memo(() => {\r\n    const [modalAddOpen, setModalAddOpen] = useState<boolean>(false);\r\n    const [modalAddBookOpen, setModalAddBookOpen] = useState<boolean>(false);\r\n    const [currentPattern, setCurrentPattern] = useState<patternType>(emptyPattern);\r\n    const [copyPattern, setCopyPattern] = useState<patternType | null>(null);\r\n    const [showAdvancedSearch, setShowAdvancedSearch] = useState<boolean>(false);\r\n\r\n    const [searchTitle, setSearchTitle] = useState<string>('');\r\n    const [searchWithDifficulty, setSearchWithDifficulty] = useState<boolean>(false);\r\n    const [searchDifficulty, setSearchDifficulty] = useState<number>(3);\r\n    const [searchWithTags, setSearchWithTags] = useState<boolean>(false);\r\n    const [searchTags, setSearchTags] = useState<tag[]>([]);\r\n    const [searchWithBooks, setSearchWithBooks] = useState<boolean>(false);\r\n    const [searchBooks, setSearchBooks] = useState<book[]>([]);\r\n    const [searchWithOwner, setSearchWithOwner] = useState<boolean>(false);\r\n    const [searchOwner, setSearchOwner] = useState<string>('');\r\n    const [searchWithLikedStatus, setSearchWithLikedStatus] = useState<boolean>(false);\r\n    const [searchLikedStatus, setSearchLikedStatus] = useState<number>(0);\r\n\r\n    const [sortBy, setSortBy] = useState<any>({\r\n        label: 'Sort by DATE ADDED',\r\n        value: 'dateCreated',\r\n    });\r\n    const [ascending, setAscending] = useState<boolean>(true);\r\n\r\n    const history = useHistory();\r\n\r\n    const modalAddToggle = useCallback(() => {\r\n        setModalAddOpen(!modalAddOpen);\r\n        setCopyPattern(null);\r\n    }, [modalAddOpen]);\r\n\r\n    const modalAddBookToggle = useCallback(() => {\r\n        setModalAddBookOpen(!modalAddBookOpen);\r\n    }, [modalAddBookOpen]);\r\n\r\n    const closeContainerModal = useCallback(() => {\r\n        setCurrentPattern(emptyPattern);\r\n        history.push('/patterns');\r\n    }, [history]);\r\n\r\n    return (\r\n        <TagProvider>\r\n            <BookProvider>\r\n                <Main>\r\n                    <SearchCard>\r\n                        <>\r\n                            <Input\r\n                                block={false}\r\n                                style={{ marginRight: '1em' }}\r\n                                name=\"patternSearch\"\r\n                                placeholder=\"Search in titles\"\r\n                                value={searchTitle}\r\n                                onChange={(e) =>\r\n                                    setSearchTitle(e.target.value ? e.target.value.toString() : '')\r\n                                }\r\n                            />\r\n                            <div style={{ width: '20%', display: 'inline-block' }}>\r\n                                <Select\r\n                                    styles={searchStyle}\r\n                                    options={[\r\n                                        { label: 'Sort by TITLE', value: 'title' },\r\n                                        { label: 'Sort by LIKED', value: 'liked' },\r\n                                        { label: 'Sort by DATE ADDED', value: 'dateCreated' },\r\n                                    ]}\r\n                                    value={sortBy}\r\n                                    onChange={(e) => {\r\n                                        setSortBy(e);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <InvisibleIconButton\r\n                                style={{ height: '30px', marginRight: '1em' }}\r\n                                red={false}\r\n                                onClick={() => setAscending(!ascending)}\r\n                            >\r\n                                {ascending && (\r\n                                    <FontAwesomeIcon\r\n                                        style={{ verticalAlign: 'middle' }}\r\n                                        icon={['fas', 'arrow-up']}\r\n                                    />\r\n                                )}\r\n                                {!ascending && (\r\n                                    <FontAwesomeIcon\r\n                                        style={{ verticalAlign: 'middle' }}\r\n                                        icon={['fas', 'arrow-down']}\r\n                                    />\r\n                                )}\r\n                            </InvisibleIconButton>\r\n\r\n                            <CancelButton\r\n                                style={{ marginRight: '1em' }}\r\n                                block={false}\r\n                                onClick={() => setShowAdvancedSearch(!showAdvancedSearch)}\r\n                            >\r\n                                Advanced\r\n                            </CancelButton>\r\n\r\n                            <SuccessButton\r\n                                style={{ marginRight: '1em' }}\r\n                                block={false}\r\n                                onClick={modalAddToggle}\r\n                            >\r\n                                + Pattern\r\n                            </SuccessButton>\r\n                            <SuccessButton block={false} onClick={modalAddBookToggle}>\r\n                                + Book\r\n                            </SuccessButton>\r\n                        </>\r\n                        <Search\r\n                            show={showAdvancedSearch}\r\n                            setSearchDifficulty={(value) => setSearchDifficulty(value)}\r\n                            setSearchWithDifficulty={(value) => setSearchWithDifficulty(value)}\r\n                            setSearchTags={(value) => setSearchTags(value)}\r\n                            setSearchWithTags={(value) => setSearchWithTags(value)}\r\n                            setSearchBooks={(value) => setSearchBooks(value)}\r\n                            setSearchWithBooks={(value) => setSearchWithBooks(value)}\r\n                            setSearchOwner={(value) => setSearchOwner(value)}\r\n                            setSearchWithOwner={(value) => setSearchWithOwner(value)}\r\n                            setSearchLikedStatus={(value) => setSearchLikedStatus(value)}\r\n                            setSearchWithLikedStatus={(value) => setSearchWithLikedStatus(value)}\r\n                        />\r\n                    </SearchCard>\r\n\r\n                    <List\r\n                        setCurrentPattern={setCurrentPattern}\r\n                        setCopyPattern={(pattern: patternType) => {\r\n                            setCopyPattern(pattern);\r\n                            setModalAddOpen(true);\r\n                        }}\r\n                        sortBy={sortBy.value}\r\n                        ascending={ascending}\r\n                        searchTitle={searchTitle}\r\n                        difficulty={searchDifficulty}\r\n                        withDifficulty={searchWithDifficulty}\r\n                        tags={searchTags}\r\n                        withTags={searchWithTags}\r\n                        books={searchBooks}\r\n                        withBooks={searchWithBooks}\r\n                        owner={searchOwner}\r\n                        withOwner={searchWithOwner}\r\n                        likedStatus={searchLikedStatus}\r\n                        withLikedStatus={searchWithLikedStatus}\r\n                    />\r\n\r\n                    <Modal isOpen={modalAddBookOpen} toggle={modalAddBookToggle}>\r\n                        <AddBook closeModal={modalAddBookToggle} />\r\n                    </Modal>\r\n\r\n                    <Modal isOpen={modalAddOpen} toggle={modalAddToggle}>\r\n                        <AddPattern closeModal={modalAddToggle} copyPattern={copyPattern} />\r\n                    </Modal>\r\n\r\n                    <Modal isOpen={currentPattern.id !== ''} toggle={closeContainerModal}>\r\n                        <PatternContainer\r\n                            closeModal={closeContainerModal}\r\n                            currentPattern={currentPattern}\r\n                        />\r\n                    </Modal>\r\n                </Main>\r\n            </BookProvider>\r\n        </TagProvider>\r\n    );\r\n});\r\n\r\nPatternList.displayName = 'PatternList';\r\n\r\nexport default PatternList;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx",["253","254","255"],"import React, { useState, useMemo, useContext, useCallback, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport moment from 'moment';\r\n\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport TagService from '../../logic/services/tagServices';\r\n\r\nimport {\r\n    patternToAdd,\r\n    fileWithUrl,\r\n    basicImage,\r\n    tag,\r\n    book,\r\n    tagToAdd,\r\n    pattern,\r\n} from '../../logic/types';\r\n\r\nimport multiSelectWithColour from '../../design/selectStyles';\r\n\r\nimport {\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DifficultyInput,\r\n    FormImageContainer,\r\n    IconButton,\r\n    DangerAlert,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    closeModal: () => void;\r\n    copyPattern: pattern | null;\r\n}\r\n\r\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\nconst AddPattern: React.FC<PropsType> = React.memo(({ closeModal, copyPattern }) => {\r\n    const { user } = useContext(UserContext);\r\n    const { allTags } = useContext(TagContext);\r\n    const { allBooks } = useContext(BookContext);\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [tags, setTags] = useState<tag[]>([]);\r\n    const [books, setBooks] = useState<book[]>([]);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>('');\r\n    const [difficulty, setDifficulty] = useState<number>(3);\r\n\r\n    const [newOpen, setNewOpen] = useState<boolean>(false);\r\n\r\n    const [copiedPatternPictures, setCopiedPatternPictures] = useState<basicImage[]>([]);\r\n    const [patternPictures, setPatternPictures] = useState<fileWithUrl[]>([]);\r\n    const [finishedWorkPictures, setFinishedWorkPictures] = useState<fileWithUrl[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const id = useMemo(\r\n        () =>\r\n            `${newOpen ? 'y' : ''}${(new Date().getTime() / 1000).toFixed(0)}${new Array(5)\r\n                .join()\r\n                .replace(/(.|$)/g, function () {\r\n                    return (Math.random() * 36)\r\n                        .toString(36)\r\n                        [Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\r\n                })}`,\r\n        [newOpen],\r\n    );\r\n\r\n    const allPossibleBooks = useMemo(\r\n        () => allBooks.filter((possibleBook) => possibleBook.owner === user?.uid),\r\n        [allBooks, user?.uid],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (copyPattern) {\r\n            setTitle(copyPattern?.title ? copyPattern.title : 'Untitled pattern');\r\n            setTags(copyPattern.tags);\r\n            setDescription(copyPattern?.description ? copyPattern.description : '');\r\n            setCopiedPatternPictures(copyPattern.patternImages);\r\n        }\r\n    }, [copyPattern]);\r\n\r\n    const HandlePatternImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setPatternPictures([\r\n                                    ...patternPictures,\r\n                                    { file: selectedFile, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, patternPictures],\r\n    );\r\n\r\n    const HandleWorkImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(\r\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\r\n                        );\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setFinishedWorkPictures([\r\n                                    ...finishedWorkPictures,\r\n                                    { file: selectedFile, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, finishedWorkPictures],\r\n    );\r\n\r\n    const removeCopiedPaternPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: basicImage[] = [\r\n                ...copiedPatternPictures.filter((_, i) => i !== index),\r\n            ];\r\n            setCopiedPatternPictures(newPictures);\r\n        },\r\n        [copiedPatternPictures],\r\n    );\r\n\r\n    const removePaternPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: fileWithUrl[] = [\r\n                ...patternPictures.filter((picture, i) => i !== index),\r\n            ];\r\n            const fileToRemove: fileWithUrl = patternPictures[index];\r\n            const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.file.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setPatternPictures(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        },\r\n        [id, patternPictures],\r\n    );\r\n\r\n    const removeWorkPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: fileWithUrl[] = [\r\n                ...finishedWorkPictures.filter((_, i) => i !== index),\r\n            ];\r\n            const fileToRemove: fileWithUrl = finishedWorkPictures[index];\r\n            const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.file.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setFinishedWorkPictures(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        },\r\n        [id, finishedWorkPictures],\r\n    );\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: patternPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            finishedWorkImages: finishedWorkPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            owner: user?.uid ? user.uid : null,\r\n            tags: tags.map((t) => t.id),\r\n            books: books.map((b) => b.id),\r\n            likes: 0,\r\n            dateCreated: moment().unix(),\r\n            comments: 0,\r\n        };\r\n\r\n        PatternService.set(id, data)\r\n            .then(() => {\r\n                setNewOpen(true);\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    }, [\r\n        closeModal,\r\n        description,\r\n        difficulty,\r\n        finishedWorkPictures,\r\n        id,\r\n        patternPictures,\r\n        tags,\r\n        title,\r\n        books,\r\n        user?.uid,\r\n    ]);\r\n\r\n    const handleTagAddition = useCallback(() => {\r\n        if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        }\r\n    }, [newTag, tags]);\r\n\r\n    const handleCancel = useCallback(() => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        patternPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        finishedWorkPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            setNewOpen(true);\r\n            closeModal();\r\n        }\r\n    }, [closeModal, finishedWorkPictures, id, patternPictures]);\r\n\r\n    return (\r\n        <ItemDetail>\r\n            <ItemHeader>Add a new pattern</ItemHeader>\r\n\r\n            <FormGroup>\r\n                <Label>Title</Label>\r\n                <Input\r\n                    block\r\n                    name=\"patternTitle\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                            handleTagAddition();\r\n                            e.preventDefault();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Difficulty</Label>\r\n                <DifficultyInput\r\n                    block\r\n                    type=\"range\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Books</Label>\r\n                <Select\r\n                    styles={multiSelectWithColour}\r\n                    options={allPossibleBooks}\r\n                    value={books}\r\n                    isMulti\r\n                    onChange={(e) => {\r\n                        setBooks([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Pattern pictures</Label>\r\n                <>\r\n                    {copiedPatternPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeCopiedPaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {patternPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.file.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Finished works</Label>\r\n                <>\r\n                    {finishedWorkPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.file.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <ButtonRow>\r\n                <CancelButton block={false} onClick={handleCancel}>\r\n                    Cancel\r\n                </CancelButton>\r\n\r\n                <SuccessButton block={false} onClick={handleSubmit}>\r\n                    Save\r\n                </SuccessButton>\r\n            </ButtonRow>\r\n        </ItemDetail>\r\n    );\r\n});\r\n\r\nAddPattern.displayName = 'AddPattern';\r\n\r\nexport default AddPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx",["256","257","258"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx",["259","260","261","262","263"],"import React, { useState, useEffect, useCallback, useContext, useMemo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport moment from 'moment';\r\nimport { Link, useLocation, useHistory } from 'react-router-dom';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport LikedPatternsService from '../../logic/services/likedPatternsServices';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport { UsersContext } from '../../logic/providers/usersProvider';\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport NoteService from '../../logic/services/noteServices';\r\nimport { firestore } from '../../logic/firebase';\r\n\r\nimport {\r\n    pattern as patternType,\r\n    basicImage,\r\n    tag as tagType,\r\n    book as bookType,\r\n    noteToAdd,\r\n} from '../../logic/types';\r\n\r\nimport {\r\n    ItemList,\r\n    Item,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ButtonRow,\r\n    InvisibleIconButton,\r\n    Difficulty,\r\n    TagRow,\r\n    Tag,\r\n    BottomInfoRow,\r\n    UserInfoRow,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    setCurrentPattern: (pattern: patternType) => void;\r\n    setCopyPattern: (pattern: patternType) => void;\r\n    sortBy: string;\r\n    ascending: boolean;\r\n    searchTitle: string;\r\n    withDifficulty: boolean;\r\n    difficulty: number;\r\n    withTags: boolean;\r\n    tags: tagType[];\r\n    withBooks: boolean;\r\n    books: bookType[];\r\n    owner: string;\r\n    withOwner: boolean;\r\n    likedStatus: number;\r\n    withLikedStatus: boolean;\r\n}\r\n\r\nconst List: React.FC<PropsType> = React.memo(\r\n    ({\r\n        setCurrentPattern,\r\n        setCopyPattern,\r\n        searchTitle,\r\n        difficulty,\r\n        withDifficulty,\r\n        tags: searchTags,\r\n        withTags: searchWithTags,\r\n        books: searchBooks,\r\n        withBooks: searchWithBooks,\r\n        owner: searchOwner,\r\n        withOwner: searchWithOwner,\r\n        likedStatus,\r\n        withLikedStatus,\r\n        sortBy,\r\n        ascending,\r\n    }) => {\r\n        const { user } = useContext(UserContext);\r\n        const { allTags } = useContext(TagContext);\r\n        const { allBooks } = useContext(BookContext);\r\n        const { allUsers } = useContext(UsersContext);\r\n\r\n        const [patterns, setPatterns] = useState<patternType[]>([]);\r\n\r\n        const [likedPatterns, setLikedPatterns] = useState<string[]>([]);\r\n\r\n        const location = useLocation();\r\n\r\n        const currentPatternId = useMemo(() => {\r\n            let id = location.pathname.substring(10);\r\n            if (id.includes('?')) {\r\n                const endIndex = id.indexOf('?');\r\n                id = id.substring(0, endIndex);\r\n            }\r\n            return id;\r\n        }, [location.pathname]);\r\n\r\n        const history = useHistory();\r\n\r\n        const onDataChange = useCallback(\r\n            (items: any) => {\r\n                let loadedPatterns: patternType[] = [];\r\n                loadedPatterns = [];\r\n\r\n                items.docs.forEach((item: any) => {\r\n                    const { id } = item;\r\n                    const data = item.data();\r\n\r\n                    loadedPatterns.push({\r\n                        id,\r\n                        title: data.title,\r\n                        description: data.description,\r\n                        difficulty: data.difficulty,\r\n                        owner: allUsers.find((u) => u.uid === data.owner),\r\n                        patternImages: data.patternImages,\r\n                        finishedWorkImages: data.finishedWorkImages,\r\n                        tags: allTags.length\r\n                            ? data.tags.map((tagId: string) =>\r\n                                  allTags.find((tag) => tag.id === tagId),\r\n                              )\r\n                            : [],\r\n                        books: allBooks.length\r\n                            ? data.books.map((bookId: string) =>\r\n                                  allBooks.find((book) => book.id === bookId),\r\n                              )\r\n                            : [],\r\n                        likes: data.likes ? data.likes : 0,\r\n                        dateCreated: data.dateCreated ? data.dateCreated : -1,\r\n                        comments: data.comments ? data.comments : 0,\r\n                    });\r\n                });\r\n\r\n                setPatterns(loadedPatterns);\r\n            },\r\n            [allTags, allBooks, allUsers],\r\n        );\r\n\r\n        const onLikedDataChange = useCallback((items: any) => {\r\n            setLikedPatterns(items.data()?.patterns ? items.data()?.patterns : []);\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n            const unsubscribePattern = PatternService.getAll().limit(20).onSnapshot(onDataChange);\r\n            const unsubscribeLiked = LikedPatternsService.getAll()\r\n                .doc(user?.uid ? user.uid : '')\r\n                .onSnapshot(onLikedDataChange);\r\n\r\n            return () => {\r\n                unsubscribePattern();\r\n                unsubscribeLiked();\r\n            };\r\n        }, [onDataChange, onLikedDataChange, user]);\r\n\r\n        useEffect(() => {\r\n            if (currentPatternId.length > 0) {\r\n                const foundPattern = patterns.find(\r\n                    (pattern: patternType) => pattern.id === currentPatternId,\r\n                );\r\n                if (foundPattern) {\r\n                    setCurrentPattern(foundPattern);\r\n                }\r\n            }\r\n        }, [setCurrentPattern, currentPatternId, patterns]);\r\n\r\n        const changeLike = (patternData: patternType, by: number) => {\r\n            if (user?.uid) {\r\n                const likes = patternData.likes + by;\r\n                PatternService.updateLikes(patternData.id, likes);\r\n\r\n                let newLiked = likedPatterns;\r\n                if (by > 0) {\r\n                    newLiked = [...likedPatterns, patternData.id];\r\n                } else {\r\n                    newLiked = likedPatterns.filter((p) => p !== patternData.id);\r\n                }\r\n                LikedPatternsService.setLiked(user.uid, newLiked);\r\n                if (by > 0) {\r\n                    const newNote: noteToAdd = {\r\n                        by: user?.uid ? user.uid : 'none',\r\n                        message: `${user?.username} just liked your pattern!${patternData.title}-${patternData.id}`,\r\n                        dateCreated: moment().unix(),\r\n                        to: patternData.owner?.uid ? patternData.owner.uid : '',\r\n                        seen: false,\r\n                    };\r\n                    NoteService.create(newNote);\r\n\r\n                    firestore\r\n                        .collection(`users`)\r\n                        .doc(patternData.owner?.uid ? patternData.owner.uid : '')\r\n                        .update({\r\n                            hasUnreadNotes: true,\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        const FILTERED_PATTERNS = useMemo(() => {\r\n            return patterns\r\n                .filter(\r\n                    (pattern: patternType) =>\r\n                        pattern.title?.toLowerCase().includes(searchTitle.toLowerCase()) &&\r\n                        (withDifficulty ? pattern.difficulty === difficulty : true) &&\r\n                        (searchWithTags\r\n                            ? searchTags.every((t1: tagType) =>\r\n                                  pattern.tags.find((t2: tagType) => t1.id === t2.id),\r\n                              )\r\n                            : true) &&\r\n                        (searchWithBooks\r\n                            ? searchBooks.every((b1: bookType) =>\r\n                                  pattern.books.find((b2: bookType) => b1.id === b2.id),\r\n                              )\r\n                            : true) &&\r\n                        (searchWithOwner && searchOwner.length > 0\r\n                            ? pattern.owner?.uid === searchOwner\r\n                            : true) &&\r\n                        (withLikedStatus && likedStatus === 1\r\n                            ? likedPatterns.includes(pattern.id)\r\n                            : true) &&\r\n                        (withLikedStatus && likedStatus === 2\r\n                            ? !likedPatterns.includes(pattern.id)\r\n                            : true),\r\n                )\r\n                .sort((p1: patternType, p2: patternType) => {\r\n                    let value1: any = p1?.dateCreated ? p1.dateCreated : -1;\r\n                    let value2: any = p2?.dateCreated ? p2.dateCreated : -1;\r\n                    if (sortBy === 'title') {\r\n                        value1 = p1.title;\r\n                        value2 = p2.title;\r\n                    }\r\n                    if (sortBy === 'liked') {\r\n                        value1 = p1.likes;\r\n                        value2 = p2.likes;\r\n                    }\r\n                    if (ascending) {\r\n                        return value1 > value2 ? 1 : -1;\r\n                    }\r\n                    return value1 > value2 ? -1 : 1;\r\n                });\r\n        }, [\r\n            searchTitle,\r\n            patterns,\r\n            difficulty,\r\n            withDifficulty,\r\n            searchWithTags,\r\n            searchTags,\r\n            searchWithBooks,\r\n            searchBooks,\r\n            searchWithOwner,\r\n            searchOwner,\r\n            likedStatus,\r\n            withLikedStatus,\r\n            likedPatterns,\r\n            ascending,\r\n            sortBy,\r\n        ]);\r\n\r\n        return (\r\n            <ItemList>\r\n                {FILTERED_PATTERNS.map((pattern: patternType) => (\r\n                    <Item key={pattern.id}>\r\n                        <ItemDetail>\r\n                            <ButtonRow>\r\n                                <InvisibleIconButton\r\n                                    red={false}\r\n                                    onClick={() => {\r\n                                        setCurrentPattern(pattern);\r\n                                        history.push(`/patterns/${pattern.id}`);\r\n                                    }}\r\n                                >\r\n                                    <FontAwesomeIcon icon={['fas', 'info-circle']} />\r\n                                </InvisibleIconButton>\r\n                                <InvisibleIconButton\r\n                                    red={false}\r\n                                    onClick={() => setCopyPattern(pattern)}\r\n                                >\r\n                                    <FontAwesomeIcon icon={['fas', 'copy']} />\r\n                                </InvisibleIconButton>\r\n                            </ButtonRow>\r\n                            <ItemHeader>{pattern.title}</ItemHeader>\r\n                            <TagRow>\r\n                                {pattern.tags?.map((tag) => (\r\n                                    <Tag key={tag.id} colour=\"tag\">\r\n                                        {' '}\r\n                                        {tag.label}{' '}\r\n                                    </Tag>\r\n                                ))}\r\n                            </TagRow>\r\n                            <Difficulty difficulty={pattern.difficulty} />\r\n                            <TagRow>\r\n                                {pattern.books?.map((book) => (\r\n                                    <Tag key={book.id} colour={book.colour}>\r\n                                        {' '}\r\n                                        {book.label}{' '}\r\n                                    </Tag>\r\n                                ))}\r\n                            </TagRow>\r\n                            {pattern.finishedWorkImages.slice(0, 4).map((image: basicImage) => (\r\n                                <img\r\n                                    key={image.name}\r\n                                    src={image.url}\r\n                                    alt={image.name}\r\n                                    width=\"100px\"\r\n                                    height=\"100px\"\r\n                                />\r\n                            ))}\r\n                            <UserInfoRow>\r\n                                <Link to={`/profile/${pattern.owner?.uid}`}>\r\n                                    <img\r\n                                        key={pattern.owner?.uid}\r\n                                        src={\r\n                                            pattern.owner?.avatar ? pattern.owner.avatar : undefined\r\n                                        }\r\n                                        alt={\r\n                                            pattern.owner?.avatar ? pattern.owner.avatar : undefined\r\n                                        }\r\n                                    />\r\n                                    <span>{pattern.owner?.username}</span>\r\n                                </Link>\r\n                            </UserInfoRow>\r\n                            <BottomInfoRow>\r\n                                <InvisibleIconButton\r\n                                    red={likedPatterns.includes(pattern.id)}\r\n                                    onClick={() =>\r\n                                        changeLike(\r\n                                            pattern,\r\n                                            likedPatterns.includes(pattern.id) ? -1 : 1,\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <FontAwesomeIcon icon={['fas', 'heart']} />\r\n                                    <span>{pattern.likes}</span>\r\n                                </InvisibleIconButton>\r\n\r\n                                <InvisibleIconButton\r\n                                    style={{ marginLeft: '1em' }}\r\n                                    red={false}\r\n                                    onClick={() => {}}\r\n                                >\r\n                                    <FontAwesomeIcon icon={['fas', 'comment-alt']} />\r\n                                    <span>{pattern.comments}</span>\r\n                                </InvisibleIconButton>\r\n                            </BottomInfoRow>\r\n                        </ItemDetail>\r\n                    </Item>\r\n                ))}\r\n            </ItemList>\r\n        );\r\n    },\r\n);\r\n\r\nList.displayName = 'List';\r\n\r\nexport default List;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx",["264","265","266","267","268","269","270","271","272"],"import { firestore, auth } from '../firebase';\r\nimport { patternToAdd } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/patterns');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return [];\r\n};\r\n\r\nconst getAllOfUser = (uid: string) => {\r\n    return collectionRef.where('owner', '==', uid);\r\n};\r\n\r\nconst create = (data: patternToAdd) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst updateLikes = (id: string, value: number) => {\r\n    return collectionRef.doc(id).update({ likes: value });\r\n};\r\n\r\nconst updateComments = (id: string, value: number) => {\r\n    return collectionRef.doc(id).update({ comments: value });\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst PatternService = {\r\n    getAll,\r\n    getAllMine,\r\n    getAllOfUser,\r\n    set,\r\n    updateLikes,\r\n    updateComments,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default PatternService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx",["273","274"],"import React, { useContext, useEffect, useCallback, useState } from 'react';\r\nimport {\r\n    FacebookShareButton,\r\n    FacebookIcon,\r\n    TumblrShareButton,\r\n    TumblrIcon,\r\n    TwitterShareButton,\r\n    TwitterIcon,\r\n    EmailShareButton,\r\n    EmailIcon,\r\n} from 'react-share';\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport { UsersContext } from '../../logic/providers/usersProvider';\r\nimport {\r\n    pattern as patternType,\r\n    comment as commentType,\r\n    commentToAdd,\r\n    noteToAdd,\r\n} from '../../logic/types';\r\nimport CommentsService from '../../logic/services/commentsService';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport NoteService from '../../logic/services/noteServices';\r\nimport { firestore } from '../../logic/firebase';\r\n\r\nimport PatternPrint from './patternPrint';\r\nimport ToExport from './toExport2';\r\n\r\nimport {\r\n    Input,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ItemLabel,\r\n    InvisibleIconButton,\r\n    Difficulty,\r\n    Tag,\r\n    Description,\r\n    ButtonRow,\r\n    TagRow,\r\n    CancelButton,\r\n    LinkButton,\r\n    SuccessButton,\r\n    HelperText,\r\n    UserInfoRow,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n    closeModal: () => void;\r\n    currentPattern: patternType | null;\r\n}\r\n\r\nconst ViewPattern: React.FC<PropsType> = React.memo(({ openEdit, closeModal, currentPattern }) => {\r\n    const { user } = useContext(UserContext);\r\n    const { allUsers } = useContext(UsersContext);\r\n\r\n    const [comments, setComments] = useState<commentType[]>([]);\r\n    const [commentMessage, setComment] = useState<string>('');\r\n    const [showAddComment, setShowAddComment] = useState<boolean>(false);\r\n\r\n    const handleClose = () => {\r\n        closeModal();\r\n    };\r\n\r\n    const onDataChange = useCallback(\r\n        (items: any) => {\r\n            let loadedComments: commentType[] = [];\r\n            loadedComments = [];\r\n\r\n            items.docs.forEach((item: any) => {\r\n                const { id } = item;\r\n                const data = item.data();\r\n\r\n                loadedComments.push({\r\n                    id,\r\n                    patternId: data.patternId,\r\n                    message: data.message,\r\n                    by: allUsers.find((u) => u.uid === data.by),\r\n                    dateCreated: data.dateCreated,\r\n                });\r\n            });\r\n\r\n            setComments(\r\n                loadedComments.sort((c1: commentType, c2: commentType) =>\r\n                    c1.dateCreated > c2.dateCreated ? -1 : 1,\r\n                ),\r\n            );\r\n        },\r\n        [allUsers],\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = CommentsService.getAll()\r\n            .where('patternId', '==', currentPattern?.id)\r\n            .onSnapshot(onDataChange);\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [onDataChange, currentPattern]);\r\n\r\n    const showAddCommentToggle = () => {\r\n        setShowAddComment(!showAddComment);\r\n    };\r\n\r\n    const addComment = () => {\r\n        if (currentPattern) {\r\n            const newComment: commentToAdd = {\r\n                patternId: currentPattern.id,\r\n                message: commentMessage,\r\n                by: user?.uid ? user.uid : '',\r\n                dateCreated: moment().unix(),\r\n            };\r\n            CommentsService.create(newComment);\r\n\r\n            const commentAmount = currentPattern.comments + 1;\r\n            PatternService.updateComments(currentPattern.id, commentAmount);\r\n\r\n            const newNote: noteToAdd = {\r\n                by: user?.uid ? user.uid : 'none',\r\n                message: `${user?.username} just left a comment on one of your patterns!${currentPattern.title}-${currentPattern.id}`,\r\n                dateCreated: moment().unix(),\r\n                to: currentPattern.owner?.uid ? currentPattern.owner.uid : '',\r\n                seen: false,\r\n            };\r\n            NoteService.create(newNote);\r\n\r\n            firestore\r\n                .collection(`users`)\r\n                .doc(currentPattern.owner?.uid ? currentPattern.owner.uid : '')\r\n                .update({\r\n                    hasUnreadNotes: true,\r\n                });\r\n\r\n            setShowAddComment(false);\r\n        }\r\n    };\r\n\r\n    const removeComment = (id: string) => {\r\n        if (currentPattern) {\r\n            CommentsService.remove(id);\r\n\r\n            const commentAmount = currentPattern.comments - 1;\r\n            PatternService.updateComments(currentPattern.id, commentAmount);\r\n\r\n            setShowAddComment(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ItemDetail>\r\n            {currentPattern?.owner?.uid === user?.uid && (\r\n                <HelperText>\r\n                    {`This pattern is yours and this is how other users see it's detail. Click `}\r\n                    <LinkButton block={false} onClick={() => openEdit(true)}>\r\n                        here\r\n                    </LinkButton>{' '}\r\n                    to edit.\r\n                </HelperText>\r\n            )}\r\n\r\n            <ButtonRow>\r\n                <PatternPrint pattern={currentPattern} />\r\n                <PDFDownloadLink\r\n                    document={<ToExport pattern={currentPattern} />}\r\n                    fileName={currentPattern?.title ? currentPattern.title : 'Untitled'}\r\n                >\r\n                    {({ loading }) =>\r\n                        loading ? (\r\n                            <InvisibleIconButton red={false}>\r\n                                <FontAwesomeIcon icon={['fas', 'spinner']} />\r\n                            </InvisibleIconButton>\r\n                        ) : (\r\n                            <InvisibleIconButton red={false}>\r\n                                <FontAwesomeIcon icon={['fas', 'file-download']} />\r\n                            </InvisibleIconButton>\r\n                        )\r\n                    }\r\n                </PDFDownloadLink>\r\n\r\n                <EmailShareButton\r\n                    subject={`${currentPattern ? currentPattern.title : ''}`}\r\n                    body=\"Look at my cool pattern over at patternRepository!\"\r\n                    url={`https://patternrepository-e8c44.web.app/patterns/${currentPattern?.id}`}\r\n                >\r\n                    <EmailIcon size={32} round />\r\n                </EmailShareButton>\r\n                <FacebookShareButton\r\n                    quote=\"Look at my cool pattern over at patternRepository!\"\r\n                    url={`https://patternrepository-e8c44.web.app/patterns/${currentPattern?.id}`}\r\n                >\r\n                    <FacebookIcon size={32} round />\r\n                </FacebookShareButton>\r\n                <TumblrShareButton\r\n                    title=\"Look at my cool pattern over at patternRepository!\"\r\n                    tags={['sewing', 'pattern']}\r\n                    url={`https://patternrepository-e8c44.web.app/patterns/${currentPattern?.id}`}\r\n                >\r\n                    <TumblrIcon size={32} round />\r\n                </TumblrShareButton>\r\n                <TwitterShareButton\r\n                    title=\"Look at my cool pattern over at patternRepository!\"\r\n                    hashtags={['sewing', 'pattern']}\r\n                    url={`https://patternrepository-e8c44.web.app/patterns/${currentPattern?.id}`}\r\n                >\r\n                    <TwitterIcon size={32} round />\r\n                </TwitterShareButton>\r\n            </ButtonRow>\r\n\r\n            <ItemHeader>{currentPattern ? currentPattern.title : 'Untitled'}</ItemHeader>\r\n\r\n            <TagRow>\r\n                {currentPattern?.tags.map((tag) => (\r\n                    <Tag key={tag.id} colour=\"tag\">\r\n                        {' '}\r\n                        {tag.label}{' '}\r\n                    </Tag>\r\n                ))}\r\n            </TagRow>\r\n\r\n            <Difficulty difficulty={currentPattern?.difficulty ? currentPattern?.difficulty : 3} />\r\n\r\n            <ItemLabel>Books</ItemLabel>\r\n            <TagRow>\r\n                {currentPattern?.books?.map((book) => (\r\n                    <Tag key={book.id} colour={book.colour}>\r\n                        {' '}\r\n                        {book.label}{' '}\r\n                    </Tag>\r\n                ))}\r\n            </TagRow>\r\n\r\n            <ItemLabel>Description</ItemLabel>\r\n            <Description\r\n                dangerouslySetInnerHTML={{\r\n                    __html: currentPattern?.description\r\n                        ? currentPattern.description\r\n                        : 'No description here :c',\r\n                }}\r\n            />\r\n\r\n            <ItemLabel>Pattern pictures</ItemLabel>\r\n            <>\r\n                {currentPattern?.patternImages.map((picture) => (\r\n                    <img\r\n                        key={picture.name}\r\n                        src={picture.url}\r\n                        alt={picture.name}\r\n                        width=\"100px\"\r\n                        height=\"100px\"\r\n                    />\r\n                ))}\r\n            </>\r\n\r\n            <ItemLabel>Finished works</ItemLabel>\r\n            <>\r\n                {currentPattern?.finishedWorkImages.map((picture) => (\r\n                    <img\r\n                        key={picture.name}\r\n                        src={picture.url}\r\n                        alt={picture.name}\r\n                        width=\"100px\"\r\n                        height=\"100px\"\r\n                    />\r\n                ))}\r\n            </>\r\n            <Difficulty difficulty={currentPattern?.difficulty ? currentPattern?.difficulty : 3} />\r\n\r\n            <ItemLabel>\r\n                Comments{' '}\r\n                <LinkButton block={false} onClick={showAddCommentToggle}>\r\n                    <FontAwesomeIcon icon={['fas', 'plus']} />\r\n                </LinkButton>\r\n            </ItemLabel>\r\n            {showAddComment && (\r\n                <>\r\n                    <Input\r\n                        block\r\n                        name=\"comment\"\r\n                        placeholder=\"Enter your comment <3\"\r\n                        value={commentMessage}\r\n                        style={{ marginBottom: '1em' }}\r\n                        onChange={(e) =>\r\n                            setComment(e.target.value ? e.target.value.toString() : '')\r\n                        }\r\n                    />\r\n                    <ButtonRow style={{ marginBottom: '1em' }}>\r\n                        <CancelButton block={false} onClick={showAddCommentToggle}>\r\n                            Cancel\r\n                        </CancelButton>\r\n                        <SuccessButton block={false} onClick={addComment}>\r\n                            Comment\r\n                        </SuccessButton>\r\n                    </ButtonRow>\r\n                </>\r\n            )}\r\n            <>\r\n                {comments.map((comment: commentType) => (\r\n                    <Description key={comment.id} style={{ marginBottom: '1em' }}>\r\n                        <UserInfoRow>\r\n                            <Link to={`/profile/${comment.by?.uid}`}>\r\n                                <img\r\n                                    key={comment.by?.uid}\r\n                                    src={comment.by?.avatar ? comment.by.avatar : undefined}\r\n                                    alt={comment.by?.avatar ? comment.by.avatar : undefined}\r\n                                />\r\n                                <span>{comment.by?.username}</span>\r\n                            </Link>\r\n                            <HelperText style={{ marginLeft: '1em' }}>\r\n                                {moment.unix(comment.dateCreated).format('DD.MM.YYYY HH:mm')}\r\n                            </HelperText>\r\n                            <InvisibleIconButton\r\n                                style={{ fontSize: '1em', float: 'right' }}\r\n                                red\r\n                                onClick={() => removeComment(comment.id)}\r\n                            >\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </InvisibleIconButton>\r\n                        </UserInfoRow>\r\n                        {comment.message}\r\n                    </Description>\r\n                ))}\r\n            </>\r\n\r\n            <ButtonRow>\r\n                <CancelButton block onClick={handleClose}>\r\n                    Close\r\n                </CancelButton>\r\n            </ButtonRow>\r\n        </ItemDetail>\r\n    );\r\n});\r\n\r\nViewPattern.displayName = 'ViewPattern';\r\n\r\nexport default ViewPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx",["275","276","277"],"import React, { useState, useCallback, useContext, useMemo } from 'react';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport TagService from '../../logic/services/tagServices';\r\n\r\nimport {\r\n    pattern,\r\n    patternToAdd,\r\n    basicImage,\r\n    tag as tagType,\r\n    tagToAdd,\r\n    book,\r\n} from '../../logic/types';\r\n\r\nimport multiSelectWithColour from '../../design/selectStyles';\r\n\r\nimport {\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DifficultyInput,\r\n    FormImageContainer,\r\n    IconButton,\r\n    DangerAlert,\r\n    InvisibleIconButton,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n    closeModal: () => void;\r\n    currentPattern: pattern;\r\n}\r\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\nconst EditPattern: React.FC<PropsType> = React.memo(({ openEdit, closeModal, currentPattern }) => {\r\n    const { allTags } = useContext(TagContext);\r\n    const { allBooks } = useContext(BookContext);\r\n\r\n    const [title, setTitle] = useState<string>(currentPattern.title ? currentPattern.title : '');\r\n    const [tags, setTags] = useState<tagType[]>(currentPattern.tags ? currentPattern.tags : []);\r\n    const [books, setBooks] = useState<book[]>(currentPattern.books ? currentPattern.books : []);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>(\r\n        currentPattern.description ? currentPattern.description : '',\r\n    );\r\n    const [difficulty, setDifficulty] = useState<number>(\r\n        currentPattern.difficulty ? currentPattern.difficulty : 3,\r\n    );\r\n\r\n    const [patternImages, setPatternImages] = useState<basicImage[]>(\r\n        currentPattern.patternImages ? currentPattern.patternImages : [],\r\n    );\r\n    const [finishedWorkImages, setFinishedWorkImages] = useState<basicImage[]>(\r\n        currentPattern.finishedWorkImages ? currentPattern.finishedWorkImages : [],\r\n    );\r\n\r\n    const [newPatternImages, setNewPatternImages] = useState<basicImage[]>([]);\r\n    const [newFinishedWorkImages, setNewFinishedWorkImages] = useState<basicImage[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const { id } = currentPattern;\r\n\r\n    const allPossibleBooks = useMemo(\r\n        () =>\r\n            allBooks.filter(\r\n                (possibleBook) => possibleBook.owner === currentPattern.owner?.username,\r\n            ),\r\n        [allBooks, currentPattern.owner],\r\n    );\r\n\r\n    const HandlePatternImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setNewPatternImages([\r\n                                    ...newPatternImages,\r\n                                    { name: selectedFile.name, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, newPatternImages],\r\n    );\r\n\r\n    const HandleWorkImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(\r\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\r\n                        );\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setNewFinishedWorkImages([\r\n                                    ...newFinishedWorkImages,\r\n                                    { name: selectedFile.name, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, newFinishedWorkImages],\r\n    );\r\n\r\n    const removePaternPicture = useCallback(\r\n        (index: number) => {\r\n            if (index < patternImages.length) {\r\n                const newPictures: basicImage[] = [...patternImages.filter((_, i) => i !== index)];\r\n                setPatternImages(newPictures);\r\n\r\n                // TODO: check if not other patterns are using this picture;\r\n                /*    const fileToRemove: basicImage = patternImages[index];\r\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                         })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    }); */\r\n            } else {\r\n                const newPictures: basicImage[] = [\r\n                    ...newPatternImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = newPatternImages[index];\r\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setNewPatternImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            }\r\n        },\r\n        [id, newPatternImages, patternImages],\r\n    );\r\n\r\n    const removeWorkPicture = useCallback(\r\n        (index: number) => {\r\n            if (index < finishedWorkImages.length) {\r\n                const newPictures: basicImage[] = [\r\n                    ...finishedWorkImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = finishedWorkImages[index];\r\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setFinishedWorkImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            } else {\r\n                const newPictures: basicImage[] = [\r\n                    ...newFinishedWorkImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = newFinishedWorkImages[index];\r\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setNewFinishedWorkImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            }\r\n        },\r\n        [finishedWorkImages, id, newFinishedWorkImages],\r\n    );\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: [...patternImages, ...newPatternImages],\r\n            finishedWorkImages: [...finishedWorkImages, ...newFinishedWorkImages],\r\n            tags: tags.map((t) => t.id),\r\n            books: books.map((b) => b.id),\r\n        };\r\n\r\n        PatternService.update(id, data)\r\n            .then(() => {\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    }, [\r\n        closeModal,\r\n        description,\r\n        difficulty,\r\n        finishedWorkImages,\r\n        id,\r\n        newFinishedWorkImages,\r\n        newPatternImages,\r\n        patternImages,\r\n        tags,\r\n        books,\r\n        title,\r\n    ]);\r\n\r\n    const handleTagAddition = useCallback(() => {\r\n        if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        }\r\n    }, [newTag, tags]);\r\n\r\n    const handleCancel = useCallback(() => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        newPatternImages.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        newFinishedWorkImages.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            openEdit(false);\r\n        }\r\n    }, [id, newFinishedWorkImages, newPatternImages, openEdit]);\r\n\r\n    const remove = useCallback(() => {\r\n        if (window.confirm('Are you sure you want to delete this pattern?')) {\r\n            PatternService.remove(id);\r\n            closeModal();\r\n        }\r\n    }, [id, closeModal]);\r\n\r\n    return (\r\n        <ItemDetail>\r\n            <ItemHeader>\r\n                Edit this pattern{' '}\r\n                <InvisibleIconButton style={{ fontSize: '1em' }} red onClick={remove}>\r\n                    <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                </InvisibleIconButton>\r\n            </ItemHeader>\r\n\r\n            <FormGroup>\r\n                <Label>Title</Label>\r\n                <Input\r\n                    block\r\n                    name=\"patternTitle\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                            handleTagAddition();\r\n                            e.preventDefault();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Difficulty</Label>\r\n                <DifficultyInput\r\n                    block\r\n                    type=\"range\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Books</Label>\r\n                <Select\r\n                    styles={multiSelectWithColour}\r\n                    options={allPossibleBooks}\r\n                    value={books}\r\n                    isMulti\r\n                    onChange={(e) => {\r\n                        setBooks([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Pattern pictures</Label>\r\n                <>\r\n                    {patternImages.map((picture: basicImage, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {newPatternImages.map((picture: basicImage, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Finished works</Label>\r\n                <>\r\n                    {finishedWorkImages.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {newFinishedWorkImages.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <ButtonRow>\r\n                <CancelButton block={false} onClick={handleCancel}>\r\n                    Cancel\r\n                </CancelButton>\r\n\r\n                <SuccessButton block={false} onClick={handleSubmit}>\r\n                    Save\r\n                </SuccessButton>\r\n            </ButtonRow>\r\n        </ItemDetail>\r\n    );\r\n});\r\n\r\nEditPattern.displayName = 'EditPattern';\r\n\r\nexport default EditPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx",["278","279","280","281","282"],"import { firestore } from '../firebase';\nimport { tagToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/tags');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst create = (data: tagToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst TagService = {\n    getAll,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default TagService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx",["283","284"],"import React, { createContext, useState, useEffect } from 'react';\nimport TagService from '../services/tagServices';\nimport { tag } from '../types';\n\nexport const TagContext = createContext<{ allTags: tag[] }>({ allTags: [] });\n\ninterface PropsType {\n    children: JSX.Element;\n}\n\nconst TagProvider: React.FC<PropsType> = ({ children }) => {\n    const [allTags, setAllTags] = useState<{ allTags: tag[] }>({ allTags: [] });\n\n    const onTagDataChange = (items: any) => {\n        let loadedTags: tag[] = [];\n        loadedTags = [];\n\n        items.docs.forEach((item: any) => {\n            const { id: tagId } = item;\n            const data = item.data();\n\n            loadedTags.push({\n                id: tagId,\n                label: data.label,\n                value: tagId,\n            });\n        });\n\n        setAllTags({ allTags: loadedTags });\n    };\n\n    useEffect(() => {\n        const unsubscribe = TagService.getAll().orderBy('label', 'asc').onSnapshot(onTagDataChange);\n\n        return () => unsubscribe();\n    }, []);\n\n    return <TagContext.Provider value={allTags}>{children}</TagContext.Provider>;\n};\n\nexport default TagProvider;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx",["285","286","287","288","289","290","291"],"import { firestore, auth } from '../firebase';\r\nimport { bookInfo } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/book');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllOfUser = (uid: string) => {\r\n    return collectionRef.where('owner', '==', uid);\r\n};\r\n\r\nconst create = (data: bookInfo) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst BookService = {\r\n    getAll,\r\n    getAllMine,\r\n    getAllOfUser,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default BookService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx",["292","293"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport BookService from '../services/bookServices';\r\nimport { book } from '../types';\r\n\r\nexport const BookContext = createContext<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst BookProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [allBooks, setAllBooks] = useState<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\n    const onBookDataChange = (items: any) => {\r\n        let loadedBooks: book[] = [];\r\n        loadedBooks = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: bookId } = item;\r\n            const data = item.data();\r\n\r\n            loadedBooks.push({\r\n                id: bookId,\r\n                label: data.label,\r\n                value: bookId,\r\n                colour: data.colour,\r\n                owner: data.owner,\r\n            });\r\n        });\r\n\r\n        setAllBooks({ allBooks: loadedBooks });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = BookService.getAll()\r\n            .orderBy('label', 'asc')\r\n            .onSnapshot(onBookDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return <BookContext.Provider value={allBooks}>{children}</BookContext.Provider>;\r\n};\r\n\r\nexport default BookProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx",["294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331"],"export default {\r\n    multiValue: (provided: any, state: any) => {\r\n        const backgroundColor = `${state.data.colour}88`;\r\n\r\n        return {\r\n            ...provided,\r\n            backgroundColor,\r\n        };\r\n    },\r\n};\r\n\r\nexport const searchStyle = {\r\n    control: (base: any) => ({\r\n        ...base,\r\n        minHeight: 30,\r\n        borderWidth: 0,\r\n        borderRadius: '5px',\r\n        backgroundColor: 'transparent !important',\r\n        borderColor: 'transparent !important',\r\n        boxShadow: 'none !important',\r\n    }),\r\n    dropdownIndicator: (base: any) => ({\r\n        ...base,\r\n        color: 'transparent',\r\n        padding: 4,\r\n    }),\r\n    clearIndicator: (base: any) => ({\r\n        ...base,\r\n        padding: 4,\r\n    }),\r\n    multiValueLabel: (base: any) => ({\r\n        ...base,\r\n    }),\r\n    multiValueRemove: (styles: any) => ({\r\n        ...styles,\r\n    }),\r\n    menuList: (styles: any) => ({\r\n        ...styles,\r\n        backgroundColor: 'inherit !important',\r\n    }),\r\n    valueContainer: (base: any) => ({\r\n        ...base,\r\n        padding: '0px 6px',\r\n        borderRadius: 0,\r\n    }),\r\n    input: (base: any) => ({\r\n        ...base,\r\n        margin: 0,\r\n        padding: 0,\r\n        backgroundColor: 'inherit',\r\n        borderRadius: 0,\r\n    }),\r\n    indicatorSeparator: (base: any) => ({\r\n        ...base,\r\n        width: 0,\r\n    }),\r\n    placeholder: (base: any) => ({\r\n        ...base,\r\n    }),\r\n    menu: (base: any) => ({\r\n        ...base,\r\n        zIndex: 50,\r\n    }),\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx",["332","333"],"export const isEmail = (email: string) =>\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n        email,\r\n    );\r\n\r\nexport const hi = () => {\r\n    return 'Hi';\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx",["334","335"],"import React from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n  FontAwesomeIcon\r\n} from '@fortawesome/react-fontawesome';\r\nimport ComponentToPrint from './toPrint';\r\n\r\nimport {\r\n  InvisibleIconButton,\r\n} from '../../design/styledComponents';\r\n\r\nclass Example extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactToPrint\r\n          trigger={() => {\r\n            // NOTE: could just as easily return <SomeComponent />. Do NOT pass an `onClick` prop\r\n            // to the root node of the returned component as it will be overwritten.\r\n            return <InvisibleIconButton type=\"button\">\r\n                <FontAwesomeIcon icon={['fa', 'print']} /></InvisibleIconButton>;\r\n          }}\r\n          content={() => this.componentRef}\r\n        />\r\n        <div style={{display: \"none\"}}>\r\n          <ComponentToPrint ref={el => (this.componentRef = el)} {...this.props}/> { /* eslint-disable-line no-return-assign */ } { /* eslint-disable-line react/jsx-props-no-spreading */ }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;",["336","337","338","339","340"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx",["341","342"],"import React from 'react';\r\n\r\nimport {\r\n  ItemHeader,\r\n  ItemLabel,\r\n  Difficulty,\r\n  Tag,\r\n  Description,\r\n  TagRow,\r\n} from '../../design/styledComponents';\r\n\r\nexport default class ComponentToPrint extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      pattern\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      tags,\r\n      difficulty,\r\n      books,\r\n      description,\r\n      patternImages,\r\n      finishedWorkImages\r\n    } = pattern;\r\n    return (\r\n      <div style={{padding: \"100px\"}}>\r\n        <ItemHeader>{title?.length > 0 ? title : 'Untitled'}</ItemHeader>\r\n\r\n          <TagRow>\r\n              {tags.map((tag) => (\r\n                  <Tag key={tag.id} colour=\"tag\">\r\n                      {' '}\r\n                      {tag.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <Difficulty difficulty={difficulty} />\r\n\r\n          <ItemLabel>Books</ItemLabel>\r\n          <TagRow>\r\n              {books?.map((book) => (\r\n                  <Tag key={book.id} colour={book.colour}>\r\n                      {' '}\r\n                      {book.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <ItemLabel>Description</ItemLabel>\r\n          <Description\r\n              dangerouslySetInnerHTML={{\r\n                  __html: description,\r\n              }}\r\n          />\r\n\r\n        <div style={{display: \"block\", pageBreakBefore: \"always\", paddingTop: \"100px\"}}>\r\n        <ItemLabel>Finished Works</ItemLabel>\r\n        <div>\r\n              {finishedWorkImages.map((picture) => (\r\n                <div key={picture.name} style={{display: \"inline\"}}>\r\n                  <img\r\n                      key={picture.name}\r\n                      src={picture.url}\r\n                      alt={picture.name}\r\n                      width=\"50%\"\r\n                      style={{display: \"inline\"}}\r\n                  />\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n              <div>\r\n                {patternImages.map((picture) => (\r\n                  <div key={picture.name} style={{height: \"100%\", paddingTop: \"100px\"}}>\r\n                  <img\r\n                    key={picture.name}\r\n                    src={picture.url}\r\n                    alt={picture.name}\r\n                    width=\"100%\"\r\n                    style={{display: \"block\", pageBreakBefore: \"auto\"}}\r\n                    />\r\n                </div>\r\n                ))}\r\n              </div>\r\n      </div>\r\n    );\r\n  }\r\n}","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx",["343","344"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx",["345","346"],"import React from 'react';\r\nimport {\r\n  Text,\r\n  Page,\r\n  Document,\r\n  View,\r\n  StyleSheet\r\n} from '@react-pdf/renderer';\r\n\r\nconst styles = StyleSheet.create( {\r\n  page: {\r\n    backgroundColor: '#FFF',\r\n    padding: 50,\r\n  },\r\n  section: {\r\n    marginBottom: 10,\r\n    display: 'block',\r\n  },\r\n  h1: {\r\n    fontSize: \"18px\",\r\n    display: 'block',\r\n    marginBottom: 5,\r\n  },\r\n  h2: {\r\n    fontSize: \"14px\",\r\n    display: 'block',\r\n    marginBottom: 5,\r\n  },\r\n  text: {\r\n    padding: 10,\r\n    fontSize: \"12px\",\r\n    width: \"auto\",\r\n    display: 'inline',\r\n    paddingLeft: \"10px\",\r\n    backgroundColor: \"#EEE\",\r\n    borderRadius: 5,\r\n  },\r\n} );\r\n\r\nexport default class ComponentToExport extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      pattern\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      owner,\r\n      tags,\r\n      difficulty,\r\n      books,\r\n      description\r\n    } = pattern;\r\n\r\n    return (\r\n      <Document>\r\n        <Page size=\"A4\" style={styles.page}>\r\n          <View  style={styles.section}>\r\n            <Text style={styles.h1}>{`${title} by ${owner}`}</Text>\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.h2}>Tags</Text>\r\n            <Text style={styles.text}>\r\n              { tags.map((tag) => (tag.label)).join(\", \") }\r\n            </Text>\r\n        </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.h2}>{`Difficulty: ${difficulty}`}</Text>\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.h2}>Books</Text>\r\n            <Text style={styles.text}>\r\n                { books.map((book) => (book.label)).join(\", \") }\r\n          </Text>\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.h2}>Description</Text>\r\n          <Text style={styles.text}>{description?.replace(/<\\/?[^>]+(>|$)/g, \"\\n\")}</Text>\r\n          </View>\r\n\r\n\r\n        </Page>\r\n      </Document>\r\n    );\r\n  }\r\n}","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\usersProvider.tsx",["347","348"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport UserService from '../services/userServices';\r\nimport { userInfo } from '../types';\r\n\r\nexport const UsersContext = createContext<{ allUsers: userInfo[] }>({ allUsers: [] });\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UsersProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [allUsers, setAllUsers] = useState<{ allUsers: userInfo[] }>({ allUsers: [] });\r\n\r\n    const onUserDataChange = (items: any) => {\r\n        let loadedUsers: userInfo[] = [];\r\n        loadedUsers = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: userId } = item;\r\n            const data = item.data();\r\n\r\n            loadedUsers.push({\r\n                uid: userId,\r\n                username: data.username,\r\n                avatar: data.avatar,\r\n                email: data.email,\r\n                description: data.description,\r\n                darkTheme: data.darkTheme,\r\n                hasUnreadNotes: data.hasUnreadNotes ? data.hasUnreadNotes : false,\r\n            });\r\n        });\r\n\r\n        setAllUsers({ allUsers: loadedUsers });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = UserService.getAll().onSnapshot(onUserDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return <UsersContext.Provider value={allUsers}>{children}</UsersContext.Provider>;\r\n};\r\n\r\nexport default UsersProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\userServices.tsx",["349"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/users');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst UserService = {\r\n    getAll,\r\n};\r\n\r\nexport default UserService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\likedPatternsServices.tsx",["350","351"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/likedPatterns');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst setLiked = (id: string, value: string[]) => {\r\n    return collectionRef.doc(id).set({ patterns: value });\r\n};\r\n\r\nconst LikedPatternsService = {\r\n    getAll,\r\n    setLiked,\r\n};\r\n\r\nexport default LikedPatternsService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\bookContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\viewBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\editBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\followedUsersService.tsx",["352","353"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/followedUsers');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst setFollowed = (id: string, value: string[]) => {\r\n    return collectionRef.doc(id).set({ users: value });\r\n};\r\n\r\nconst FollowedUsersService = {\r\n    getAll,\r\n    setFollowed,\r\n};\r\n\r\nexport default FollowedUsersService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\search.tsx",["354","355","356"],"import React, { useState, useContext, useMemo } from 'react';\r\nimport Select from 'react-select';\r\nimport { SearchGroup, AdvancedSearch, DifficultyInput, Label } from '../../design/styledComponents';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport { UsersContext } from '../../logic/providers/usersProvider';\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport multiSelectWithColour from '../../design/selectStyles';\r\n\r\nimport { tag, book, user as userType } from '../../logic/types';\r\n\r\ninterface PropsType {\r\n    show: boolean;\r\n    setSearchDifficulty: (searchDiff: number) => void;\r\n    setSearchWithDifficulty: (use: boolean) => void;\r\n    setSearchTags: (tagsUsef: tag[]) => void;\r\n    setSearchWithTags: (use: boolean) => void;\r\n    setSearchBooks: (booksUsef: book[]) => void;\r\n    setSearchWithBooks: (use: boolean) => void;\r\n    setSearchOwner: (userUsed: string) => void;\r\n    setSearchWithOwner: (use: boolean) => void;\r\n    setSearchLikedStatus: (statusUsed: number) => void;\r\n    setSearchWithLikedStatus: (use: boolean) => void;\r\n}\r\n\r\nconst Search: React.FC<PropsType> = React.memo(\r\n    ({\r\n        show: showAdvancedSearch,\r\n        setSearchDifficulty: setSearchDifficultyProps,\r\n        setSearchWithDifficulty: setSearchWithDifficultyProps,\r\n        setSearchTags: setSearchTagsProps,\r\n        setSearchWithTags: setSearchWithTagsProps,\r\n        setSearchBooks: setSearchBooksProps,\r\n        setSearchWithBooks: setSearchWithBooksProps,\r\n        setSearchOwner: setSearchOwnerProps,\r\n        setSearchWithOwner: setSearchWithOwnerProps,\r\n        setSearchLikedStatus: setSearchLikedStatusProps,\r\n        setSearchWithLikedStatus: setSearchWithLikedStatusProps,\r\n    }) => {\r\n        const { user } = useContext(UserContext);\r\n        const { allUsers } = useContext(UsersContext);\r\n        const { allTags } = useContext(TagContext);\r\n        const { allBooks } = useContext(BookContext);\r\n\r\n        const [difficulty, setDifficulty] = useState<number>(3);\r\n        const [withDifficulty, setWithDifficulty] = useState<boolean>(false);\r\n\r\n        const [tags, setTags] = useState<tag[]>([]);\r\n        const [withTags, setWithTags] = useState<boolean>(false);\r\n\r\n        const [books, setBooks] = useState<book[]>([]);\r\n        const [withBooks, setWithBooks] = useState<boolean>(false);\r\n\r\n        const [owner, setOwner] = useState<any>('');\r\n        const [withOwner, setWithOwner] = useState<boolean>(false);\r\n\r\n        const [likedStatus, setLikedStatus] = useState<any>({ label: 'All', value: 0 });\r\n        const [withLikedStatus, setWithLikedStatus] = useState<boolean>(false);\r\n\r\n        const MAPPED_USERS = useMemo(() => {\r\n            let mapped: any = [{ label: 'My patterns', value: user?.uid }];\r\n            mapped = mapped.concat(\r\n                allUsers\r\n                    .filter((u: userType) => u?.uid !== user?.uid)\r\n                    .map((u: userType) => ({ ...u, label: u?.username, value: u?.uid })),\r\n            );\r\n            return mapped;\r\n        }, [allUsers, user]);\r\n\r\n        if (!showAdvancedSearch) {\r\n            return <></>;\r\n        }\r\n\r\n        return (\r\n            <AdvancedSearch>\r\n                <SearchGroup>\r\n                    <input\r\n                        name=\"patternTitle\"\r\n                        placeholder=\"Enter title\"\r\n                        type=\"checkbox\"\r\n                        checked={withDifficulty}\r\n                        onChange={() => {\r\n                            setWithDifficulty(!withDifficulty);\r\n                            setSearchWithDifficultyProps(!withDifficulty);\r\n                        }}\r\n                    />\r\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Difficulty</Label>\r\n                    <DifficultyInput\r\n                        block\r\n                        type=\"range\"\r\n                        name=\"patternDifficulty\"\r\n                        min={1}\r\n                        max={5}\r\n                        step={1}\r\n                        value={difficulty}\r\n                        onChange={(e) => {\r\n                            setDifficulty(parseInt(e.target.value, 10));\r\n                            setSearchDifficultyProps(parseInt(e.target.value, 10));\r\n                        }}\r\n                    />\r\n                </SearchGroup>\r\n\r\n                <SearchGroup>\r\n                    <input\r\n                        name=\"patternTitle\"\r\n                        placeholder=\"Enter title\"\r\n                        type=\"checkbox\"\r\n                        checked={withTags}\r\n                        onChange={() => {\r\n                            setWithTags(!withTags);\r\n                            setSearchWithTagsProps(!withTags);\r\n                        }}\r\n                    />\r\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Has tags</Label>\r\n                    <Select\r\n                        options={allTags}\r\n                        value={tags}\r\n                        isMulti\r\n                        onChange={(e) => {\r\n                            setTags([...e]);\r\n                            setSearchTagsProps([...e]);\r\n                        }}\r\n                    />\r\n                </SearchGroup>\r\n\r\n                <SearchGroup>\r\n                    <input\r\n                        name=\"patternTitle\"\r\n                        placeholder=\"Enter title\"\r\n                        type=\"checkbox\"\r\n                        checked={withBooks}\r\n                        onChange={() => {\r\n                            setWithBooks(!withBooks);\r\n                            setSearchWithBooksProps(!withBooks);\r\n                        }}\r\n                    />\r\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Is in books</Label>\r\n                    <Select\r\n                        styles={multiSelectWithColour}\r\n                        options={allBooks}\r\n                        value={books}\r\n                        isMulti\r\n                        onChange={(e) => {\r\n                            setBooks([...e]);\r\n                            setSearchBooksProps([...e]);\r\n                        }}\r\n                    />\r\n                </SearchGroup>\r\n\r\n                <SearchGroup>\r\n                    <input\r\n                        name=\"patternTitle\"\r\n                        placeholder=\"Enter title\"\r\n                        type=\"checkbox\"\r\n                        checked={withOwner}\r\n                        onChange={() => {\r\n                            setWithOwner(!withOwner);\r\n                            setSearchWithOwnerProps(!withOwner);\r\n                        }}\r\n                    />\r\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Owner</Label>\r\n                    <Select\r\n                        options={MAPPED_USERS}\r\n                        value={owner}\r\n                        onChange={(e) => {\r\n                            setOwner(e);\r\n                            setSearchOwnerProps(e.value);\r\n                        }}\r\n                    />\r\n                </SearchGroup>\r\n\r\n                <SearchGroup>\r\n                    <input\r\n                        name=\"patternTitle\"\r\n                        placeholder=\"Enter title\"\r\n                        type=\"checkbox\"\r\n                        checked={withLikedStatus}\r\n                        onChange={() => {\r\n                            setWithLikedStatus(!withLikedStatus);\r\n                            setSearchWithLikedStatusProps(!withLikedStatus);\r\n                        }}\r\n                    />\r\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Liked status</Label>\r\n                    <Select\r\n                        options={[\r\n                            { label: 'All', value: 0 },\r\n                            { label: 'Liked', value: 1 },\r\n                            { label: 'Not liked', value: 2 },\r\n                        ]}\r\n                        value={likedStatus}\r\n                        onChange={(e) => {\r\n                            setLikedStatus(e);\r\n                            setSearchLikedStatusProps(e.value);\r\n                        }}\r\n                    />\r\n                </SearchGroup>\r\n            </AdvancedSearch>\r\n        );\r\n    },\r\n);\r\n\r\nSearch.displayName = 'PatternLSearchist';\r\n\r\nexport default Search;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\commentsService.tsx",["357","358","359","360","361"],"import { firestore } from '../firebase';\r\n\r\nimport { commentToAdd } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/comments');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst create = (data: commentToAdd) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: commentToAdd) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: commentToAdd) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst CommentsService = {\r\n    getAll,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default CommentsService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\homePage.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\adminContact.tsx",["362"],"import React, { useContext, useState } from 'react';\r\nimport moment from 'moment';\r\nimport NoteService from '../logic/services/noteServices';\r\nimport { UserContext } from '../logic/providers/userProvider';\r\nimport { firestore } from '../logic/firebase';\r\n\r\nimport { noteToAdd } from '../logic/types';\r\n\r\nimport {\r\n    ItemDetail,\r\n    ItemHeader,\r\n    Label,\r\n    Textarea,\r\n    FormGroup,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    Main,\r\n    SuccessAlert,\r\n} from '../design/styledComponents';\r\n\r\nconst AdminContact: React.FC = () => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const [message, setMessage] = useState<string>('');\r\n    const [messageSent, setMessageSent] = useState<boolean>(false);\r\n\r\n    const handleSend = () => {\r\n        const newNote: noteToAdd = {\r\n            by: user?.uid ? user.uid : 'none',\r\n            message,\r\n            dateCreated: moment().unix(),\r\n            to: 'TpuR73pwRvdMXsmDfI77L193XBH2',\r\n            seen: false,\r\n        };\r\n        NoteService.create(newNote);\r\n\r\n        firestore\r\n            .collection(`users`)\r\n            .doc('TpuR73pwRvdMXsmDfI77L193XBH2')\r\n            .update({\r\n                hasUnreadNotes: true,\r\n            })\r\n            .then(() => {})\r\n            .catch((e) => console.log(e));\r\n        setMessage('');\r\n        setMessageSent(true);\r\n    };\r\n\r\n    return (\r\n        <Main style={{ marginTop: '2em' }}>\r\n            <ItemDetail>\r\n                <ItemHeader>Write to us!</ItemHeader>\r\n\r\n                <FormGroup>\r\n                    <Label>\r\n                        Is sometnig not working as it should? Do you have a suggestion to make this\r\n                        page better? Let us know below:\r\n                    </Label>\r\n                    <Textarea\r\n                        name=\"message\"\r\n                        placeholder=\"Enter your message here\"\r\n                        value={message}\r\n                        onChange={(e) => {\r\n                            setMessageSent(false);\r\n                            setMessage(e.target.value ? e.target.value.toString() : '');\r\n                        }}\r\n                    />\r\n                </FormGroup>\r\n\r\n                {messageSent && <SuccessAlert>Your message was sent!</SuccessAlert>}\r\n                <ButtonRow>\r\n                    <SuccessButton block={false} onClick={handleSend}>\r\n                        Send!\r\n                    </SuccessButton>\r\n                </ButtonRow>\r\n            </ItemDetail>\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default AdminContact;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\noteServices.tsx",["363","364","365","366","367"],"import { firestore } from '../firebase';\r\nimport { noteToAdd } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/notes');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst create = (data: noteToAdd) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: noteToAdd) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: noteToAdd) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst NoteService = {\r\n    getAll,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default NoteService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\notes.tsx",["368","369"],"import React, { useContext, useCallback, useEffect, useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { firestore } from '../logic/firebase';\r\nimport { UserContext } from '../logic/providers/userProvider';\r\nimport { UsersContext } from '../logic/providers/usersProvider';\r\nimport NoteService from '../logic/services/noteServices';\r\n\r\nimport { note as noteType, user as userType } from '../logic/types';\r\n\r\nimport {\r\n    Main,\r\n    MarginItemDetail,\r\n    Description,\r\n    UserInfoRow,\r\n    HelperText,\r\n    InvisibleIconButton,\r\n} from '../design/styledComponents';\r\n\r\nconst Notes: React.FC = () => {\r\n    const { user } = useContext(UserContext);\r\n    const { allUsers } = useContext(UsersContext);\r\n\r\n    const [notes, setNotes] = useState<noteType[]>([]);\r\n\r\n    const location = useLocation();\r\n\r\n    const onDataChange = useCallback(\r\n        (items: any) => {\r\n            let loadedNotes: noteType[] = [];\r\n            loadedNotes = [];\r\n\r\n            items.docs.forEach((item: any) => {\r\n                const { id } = item;\r\n                const data = item.data();\r\n\r\n                loadedNotes.push({\r\n                    id,\r\n                    by: allUsers.find((u: userType) => u?.uid === data.by),\r\n                    message: data.message,\r\n                    dateCreated: data.dateCreated,\r\n                    to: allUsers.find((u: userType) => u?.uid === data.to),\r\n                    seen: data.seen,\r\n                });\r\n            });\r\n\r\n            setNotes(\r\n                loadedNotes.sort((n1: noteType, n2: noteType) =>\r\n                    n1.dateCreated > n2.dateCreated ? -1 : 1,\r\n                ),\r\n            );\r\n        },\r\n        [allUsers],\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = NoteService.getAll()\r\n            .where('to', '==', user?.uid)\r\n            .onSnapshot(onDataChange);\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [onDataChange, user?.uid]);\r\n\r\n    const removeNote = (id: string) => {\r\n        NoteService.remove(id);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (location.pathname === '/notes') {\r\n            firestore\r\n                .collection(`users`)\r\n                .doc(user?.uid ? user.uid : '')\r\n                .update({\r\n                    hasUnreadNotes: false,\r\n                });\r\n        }\r\n    }, [user?.uid, location.pathname]);\r\n\r\n    return (\r\n        <Main>\r\n            <MarginItemDetail>\r\n                {notes.length === 0 && <Description>You have no notes!</Description>}\r\n                {notes.map((note: noteType) => (\r\n                    <Description key={note.id} style={{ marginBottom: '1em' }}>\r\n                        <UserInfoRow>\r\n                            <Link to={`/profile/${note.by?.uid}`}>\r\n                                <img\r\n                                    key={note.by?.uid}\r\n                                    src={note.by?.avatar ? note.by.avatar : undefined}\r\n                                    alt={note.by?.avatar ? note.by.avatar : undefined}\r\n                                />\r\n                                <span>{note.by?.username}</span>\r\n                            </Link>\r\n                            <HelperText style={{ marginLeft: '1em' }}>\r\n                                {moment.unix(note.dateCreated).format('DD.MM.YYYY HH:mm')}\r\n                            </HelperText>\r\n                            <InvisibleIconButton\r\n                                style={{ fontSize: '1em', float: 'right' }}\r\n                                red\r\n                                onClick={() => removeNote(note.id)}\r\n                            >\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </InvisibleIconButton>\r\n                        </UserInfoRow>\r\n                        {!note.message.includes('pattern') && <span>{note.message}</span>}\r\n                        {note.message.includes('pattern') && (\r\n                            <>\r\n                                <span>\r\n                                    {note.message.substring(0, note.message.lastIndexOf('!'))}\r\n                                </span>\r\n                                <Link\r\n                                    to={`/patterns/${note.message.substring(\r\n                                        note.message.lastIndexOf('-') + 1,\r\n                                    )}`}\r\n                                >\r\n                                    {note.message.substring(\r\n                                        note.message.lastIndexOf('!'),\r\n                                        note.message.lastIndexOf('-'),\r\n                                    )}\r\n                                </Link>\r\n                            </>\r\n                        )}\r\n                    </Description>\r\n                ))}\r\n            </MarginItemDetail>\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default Notes;\r\n",{"ruleId":"370","replacedBy":"371"},{"ruleId":"372","replacedBy":"373"},{"ruleId":"374","replacedBy":"375"},{"ruleId":"376","replacedBy":"377"},{"ruleId":"378","replacedBy":"379"},{"ruleId":"380","severity":1,"message":"381","line":21,"column":35,"nodeType":"382","messageId":"383","endLine":21,"endColumn":38,"suggestions":"384"},{"ruleId":"380","severity":1,"message":"381","line":16,"column":35,"nodeType":"382","messageId":"383","endLine":16,"endColumn":38,"suggestions":"385"},{"ruleId":"380","severity":1,"message":"381","line":19,"column":37,"nodeType":"382","messageId":"383","endLine":19,"endColumn":40,"suggestions":"386"},{"ruleId":"387","severity":1,"message":"388","line":30,"column":9,"nodeType":"389","messageId":"390","endLine":30,"endColumn":22},{"ruleId":"391","severity":1,"message":"392","line":35,"column":37,"nodeType":"393","messageId":"394","endLine":35,"endColumn":78},{"ruleId":"391","severity":1,"message":"395","line":35,"column":44,"nodeType":"396","messageId":"397","endLine":35,"endColumn":53},{"ruleId":"380","severity":1,"message":"381","line":35,"column":50,"nodeType":"382","messageId":"383","endLine":35,"endColumn":53,"suggestions":"398"},{"ruleId":"391","severity":1,"message":"399","line":35,"column":55,"nodeType":"396","messageId":"397","endLine":35,"endColumn":74},{"ruleId":"380","severity":1,"message":"381","line":35,"column":71,"nodeType":"382","messageId":"383","endLine":35,"endColumn":74,"suggestions":"400"},{"ruleId":"387","severity":1,"message":"388","line":48,"column":13,"nodeType":"389","messageId":"390","endLine":48,"endColumn":26},{"ruleId":"380","severity":1,"message":"381","line":23,"column":65,"nodeType":"382","messageId":"383","endLine":23,"endColumn":68,"suggestions":"401"},{"ruleId":"380","severity":1,"message":"381","line":13,"column":17,"nodeType":"382","messageId":"383","endLine":13,"endColumn":20,"suggestions":"402"},{"ruleId":"387","severity":1,"message":"388","line":17,"column":17,"nodeType":"389","messageId":"390","endLine":17,"endColumn":30},{"ruleId":"380","severity":1,"message":"381","line":141,"column":43,"nodeType":"382","messageId":"383","endLine":141,"endColumn":46,"suggestions":"403"},{"ruleId":"380","severity":1,"message":"381","line":141,"column":56,"nodeType":"382","messageId":"383","endLine":141,"endColumn":59,"suggestions":"404"},{"ruleId":"380","severity":1,"message":"381","line":74,"column":17,"nodeType":"382","messageId":"383","endLine":74,"endColumn":20,"suggestions":"405"},{"ruleId":"380","severity":1,"message":"381","line":86,"column":39,"nodeType":"382","messageId":"383","endLine":86,"endColumn":42,"suggestions":"406"},{"ruleId":"380","severity":1,"message":"381","line":152,"column":17,"nodeType":"382","messageId":"383","endLine":152,"endColumn":20,"suggestions":"407"},{"ruleId":"380","severity":1,"message":"381","line":164,"column":56,"nodeType":"382","messageId":"383","endLine":164,"endColumn":59,"suggestions":"408"},{"ruleId":"391","severity":1,"message":"392","line":5,"column":20,"nodeType":"393","messageId":"394","endLine":5,"endColumn":42},{"ruleId":"380","severity":1,"message":"381","line":60,"column":42,"nodeType":"382","messageId":"383","endLine":60,"endColumn":45,"suggestions":"409"},{"ruleId":"410","severity":1,"message":"411","line":73,"column":36,"nodeType":"412","messageId":"413","endLine":73,"endColumn":45},{"ruleId":"380","severity":1,"message":"381","line":369,"column":39,"nodeType":"382","messageId":"383","endLine":369,"endColumn":42,"suggestions":"414"},{"ruleId":"380","severity":1,"message":"381","line":369,"column":52,"nodeType":"382","messageId":"383","endLine":369,"endColumn":55,"suggestions":"415"},{"ruleId":"416","severity":2,"message":"417","line":1,"column":13,"nodeType":"396","messageId":"418","endLine":1,"endColumn":17},{"ruleId":"416","severity":2,"message":"419","line":3,"column":6,"nodeType":"396","messageId":"418","endLine":3,"endColumn":14},{"ruleId":"416","severity":2,"message":"420","line":11,"column":13,"nodeType":"396","messageId":"418","endLine":11,"endColumn":20},{"ruleId":"380","severity":1,"message":"381","line":95,"column":21,"nodeType":"382","messageId":"383","endLine":95,"endColumn":24,"suggestions":"421"},{"ruleId":"380","severity":1,"message":"381","line":99,"column":43,"nodeType":"382","messageId":"383","endLine":99,"endColumn":46,"suggestions":"422"},{"ruleId":"380","severity":1,"message":"381","line":132,"column":55,"nodeType":"382","messageId":"383","endLine":132,"endColumn":58,"suggestions":"423"},{"ruleId":"380","severity":1,"message":"381","line":218,"column":33,"nodeType":"382","messageId":"383","endLine":218,"endColumn":36,"suggestions":"424"},{"ruleId":"380","severity":1,"message":"381","line":219,"column":33,"nodeType":"382","messageId":"383","endLine":219,"endColumn":36,"suggestions":"425"},{"ruleId":"391","severity":1,"message":"392","line":6,"column":16,"nodeType":"393","messageId":"394","endLine":6,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":10,"column":20,"nodeType":"393","messageId":"394","endLine":10,"endColumn":25},{"ruleId":"391","severity":1,"message":"392","line":17,"column":22,"nodeType":"393","messageId":"394","endLine":17,"endColumn":38},{"ruleId":"391","severity":1,"message":"392","line":21,"column":16,"nodeType":"393","messageId":"394","endLine":21,"endColumn":39},{"ruleId":"391","severity":1,"message":"392","line":25,"column":16,"nodeType":"393","messageId":"394","endLine":25,"endColumn":52},{"ruleId":"391","severity":1,"message":"392","line":29,"column":13,"nodeType":"393","messageId":"394","endLine":29,"endColumn":49},{"ruleId":"391","severity":1,"message":"392","line":33,"column":21,"nodeType":"393","messageId":"394","endLine":33,"endColumn":51},{"ruleId":"391","severity":1,"message":"392","line":37,"column":24,"nodeType":"393","messageId":"394","endLine":37,"endColumn":54},{"ruleId":"391","severity":1,"message":"392","line":41,"column":16,"nodeType":"393","messageId":"394","endLine":41,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":69,"column":17,"nodeType":"382","messageId":"383","endLine":69,"endColumn":20,"suggestions":"426"},{"ruleId":"380","severity":1,"message":"381","line":73,"column":39,"nodeType":"382","messageId":"383","endLine":73,"endColumn":42,"suggestions":"427"},{"ruleId":"428","severity":1,"message":"429","line":300,"column":13,"nodeType":"430","messageId":"390","endLine":300,"endColumn":76},{"ruleId":"380","severity":1,"message":"381","line":381,"column":39,"nodeType":"382","messageId":"383","endLine":381,"endColumn":42,"suggestions":"431"},{"ruleId":"380","severity":1,"message":"381","line":381,"column":52,"nodeType":"382","messageId":"383","endLine":381,"endColumn":55,"suggestions":"432"},{"ruleId":"391","severity":1,"message":"392","line":6,"column":16,"nodeType":"393","messageId":"394","endLine":6,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":10,"column":16,"nodeType":"393","messageId":"394","endLine":10,"endColumn":35},{"ruleId":"391","severity":1,"message":"392","line":14,"column":16,"nodeType":"393","messageId":"394","endLine":14,"endColumn":48},{"ruleId":"391","severity":1,"message":"392","line":18,"column":13,"nodeType":"393","messageId":"394","endLine":18,"endColumn":45},{"ruleId":"391","severity":1,"message":"392","line":22,"column":16,"nodeType":"393","messageId":"394","endLine":22,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":14,"column":37,"nodeType":"382","messageId":"383","endLine":14,"endColumn":40,"suggestions":"433"},{"ruleId":"380","severity":1,"message":"381","line":18,"column":35,"nodeType":"382","messageId":"383","endLine":18,"endColumn":38,"suggestions":"434"},{"ruleId":"391","severity":1,"message":"392","line":6,"column":16,"nodeType":"393","messageId":"394","endLine":6,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":10,"column":20,"nodeType":"393","messageId":"394","endLine":10,"endColumn":25},{"ruleId":"391","severity":1,"message":"392","line":17,"column":22,"nodeType":"393","messageId":"394","endLine":17,"endColumn":38},{"ruleId":"391","severity":1,"message":"392","line":21,"column":16,"nodeType":"393","messageId":"394","endLine":21,"endColumn":35},{"ruleId":"391","severity":1,"message":"392","line":25,"column":16,"nodeType":"393","messageId":"394","endLine":25,"endColumn":48},{"ruleId":"391","severity":1,"message":"392","line":29,"column":13,"nodeType":"393","messageId":"394","endLine":29,"endColumn":45},{"ruleId":"391","severity":1,"message":"392","line":33,"column":16,"nodeType":"393","messageId":"394","endLine":33,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":14,"column":38,"nodeType":"382","messageId":"383","endLine":14,"endColumn":41,"suggestions":"435"},{"ruleId":"380","severity":1,"message":"381","line":18,"column":35,"nodeType":"382","messageId":"383","endLine":18,"endColumn":38,"suggestions":"436"},{"ruleId":"391","severity":1,"message":"392","line":2,"column":17,"nodeType":"393","messageId":"394","endLine":2,"endColumn":47},{"ruleId":"391","severity":1,"message":"437","line":2,"column":18,"nodeType":"396","messageId":"397","endLine":2,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":2,"column":28,"nodeType":"382","messageId":"383","endLine":2,"endColumn":31,"suggestions":"438"},{"ruleId":"391","severity":1,"message":"439","line":2,"column":33,"nodeType":"396","messageId":"397","endLine":2,"endColumn":43},{"ruleId":"380","severity":1,"message":"381","line":2,"column":40,"nodeType":"382","messageId":"383","endLine":2,"endColumn":43,"suggestions":"440"},{"ruleId":"391","severity":1,"message":"392","line":13,"column":14,"nodeType":"393","messageId":"394","endLine":13,"endColumn":28},{"ruleId":"391","severity":1,"message":"441","line":13,"column":15,"nodeType":"396","messageId":"397","endLine":13,"endColumn":24},{"ruleId":"380","severity":1,"message":"381","line":13,"column":21,"nodeType":"382","messageId":"383","endLine":13,"endColumn":24,"suggestions":"442"},{"ruleId":"391","severity":1,"message":"392","line":22,"column":24,"nodeType":"393","messageId":"394","endLine":22,"endColumn":38},{"ruleId":"391","severity":1,"message":"441","line":22,"column":25,"nodeType":"396","messageId":"397","endLine":22,"endColumn":34},{"ruleId":"380","severity":1,"message":"381","line":22,"column":31,"nodeType":"382","messageId":"383","endLine":22,"endColumn":34,"suggestions":"443"},{"ruleId":"391","severity":1,"message":"392","line":27,"column":21,"nodeType":"393","messageId":"394","endLine":27,"endColumn":35},{"ruleId":"391","severity":1,"message":"441","line":27,"column":22,"nodeType":"396","messageId":"397","endLine":27,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":27,"column":28,"nodeType":"382","messageId":"383","endLine":27,"endColumn":31,"suggestions":"444"},{"ruleId":"391","severity":1,"message":"392","line":31,"column":22,"nodeType":"393","messageId":"394","endLine":31,"endColumn":36},{"ruleId":"391","severity":1,"message":"441","line":31,"column":23,"nodeType":"396","messageId":"397","endLine":31,"endColumn":32},{"ruleId":"380","severity":1,"message":"381","line":31,"column":29,"nodeType":"382","messageId":"383","endLine":31,"endColumn":32,"suggestions":"445"},{"ruleId":"391","severity":1,"message":"392","line":34,"column":23,"nodeType":"393","messageId":"394","endLine":34,"endColumn":39},{"ruleId":"391","severity":1,"message":"446","line":34,"column":24,"nodeType":"396","messageId":"397","endLine":34,"endColumn":35},{"ruleId":"380","severity":1,"message":"381","line":34,"column":32,"nodeType":"382","messageId":"383","endLine":34,"endColumn":35,"suggestions":"447"},{"ruleId":"391","severity":1,"message":"392","line":37,"column":15,"nodeType":"393","messageId":"394","endLine":37,"endColumn":31},{"ruleId":"391","severity":1,"message":"446","line":37,"column":16,"nodeType":"396","messageId":"397","endLine":37,"endColumn":27},{"ruleId":"380","severity":1,"message":"381","line":37,"column":24,"nodeType":"382","messageId":"383","endLine":37,"endColumn":27,"suggestions":"448"},{"ruleId":"391","severity":1,"message":"392","line":41,"column":21,"nodeType":"393","messageId":"394","endLine":41,"endColumn":35},{"ruleId":"391","severity":1,"message":"441","line":41,"column":22,"nodeType":"396","messageId":"397","endLine":41,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":41,"column":28,"nodeType":"382","messageId":"383","endLine":41,"endColumn":31,"suggestions":"449"},{"ruleId":"391","severity":1,"message":"392","line":46,"column":12,"nodeType":"393","messageId":"394","endLine":46,"endColumn":26},{"ruleId":"391","severity":1,"message":"441","line":46,"column":13,"nodeType":"396","messageId":"397","endLine":46,"endColumn":22},{"ruleId":"380","severity":1,"message":"381","line":46,"column":19,"nodeType":"382","messageId":"383","endLine":46,"endColumn":22,"suggestions":"450"},{"ruleId":"391","severity":1,"message":"392","line":53,"column":25,"nodeType":"393","messageId":"394","endLine":53,"endColumn":39},{"ruleId":"391","severity":1,"message":"441","line":53,"column":26,"nodeType":"396","messageId":"397","endLine":53,"endColumn":35},{"ruleId":"380","severity":1,"message":"381","line":53,"column":32,"nodeType":"382","messageId":"383","endLine":53,"endColumn":35,"suggestions":"451"},{"ruleId":"391","severity":1,"message":"392","line":57,"column":18,"nodeType":"393","messageId":"394","endLine":57,"endColumn":32},{"ruleId":"391","severity":1,"message":"441","line":57,"column":19,"nodeType":"396","messageId":"397","endLine":57,"endColumn":28},{"ruleId":"380","severity":1,"message":"381","line":57,"column":25,"nodeType":"382","messageId":"383","endLine":57,"endColumn":28,"suggestions":"452"},{"ruleId":"391","severity":1,"message":"392","line":60,"column":11,"nodeType":"393","messageId":"394","endLine":60,"endColumn":25},{"ruleId":"391","severity":1,"message":"441","line":60,"column":12,"nodeType":"396","messageId":"397","endLine":60,"endColumn":21},{"ruleId":"380","severity":1,"message":"381","line":60,"column":18,"nodeType":"382","messageId":"383","endLine":60,"endColumn":21,"suggestions":"453"},{"ruleId":"391","severity":1,"message":"392","line":1,"column":24,"nodeType":"393","messageId":"394","endLine":1,"endColumn":42},{"ruleId":"391","severity":1,"message":"392","line":6,"column":19,"nodeType":"393","messageId":"394","endLine":6,"endColumn":24},{"ruleId":"391","severity":1,"message":"454","line":13,"column":16,"nodeType":"396","messageId":"455","endLine":13,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":18,"column":3,"nodeType":"412","messageId":"394","endLine":18,"endColumn":11},{"ruleId":"370","replacedBy":"371"},{"ruleId":"372","replacedBy":"373"},{"ruleId":"374","replacedBy":"375"},{"ruleId":"376","replacedBy":"377"},{"ruleId":"378","replacedBy":"379"},{"ruleId":"391","severity":1,"message":"454","line":13,"column":16,"nodeType":"396","messageId":"455","endLine":13,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":19,"column":3,"nodeType":"412","messageId":"394","endLine":19,"endColumn":11},{"ruleId":"391","severity":1,"message":"454","line":24,"column":16,"nodeType":"396","messageId":"455","endLine":24,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":29,"column":3,"nodeType":"412","messageId":"394","endLine":29,"endColumn":11},{"ruleId":"391","severity":1,"message":"454","line":41,"column":16,"nodeType":"396","messageId":"455","endLine":41,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":46,"column":3,"nodeType":"412","messageId":"394","endLine":46,"endColumn":11},{"ruleId":"380","severity":1,"message":"381","line":14,"column":38,"nodeType":"382","messageId":"383","endLine":14,"endColumn":41,"suggestions":"456"},{"ruleId":"380","severity":1,"message":"381","line":18,"column":35,"nodeType":"382","messageId":"383","endLine":18,"endColumn":38,"suggestions":"457"},{"ruleId":"391","severity":1,"message":"392","line":5,"column":16,"nodeType":"393","messageId":"394","endLine":5,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":5,"column":16,"nodeType":"393","messageId":"394","endLine":5,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":9,"column":18,"nodeType":"393","messageId":"394","endLine":9,"endColumn":50},{"ruleId":"391","severity":1,"message":"392","line":5,"column":16,"nodeType":"393","messageId":"394","endLine":5,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":9,"column":21,"nodeType":"393","messageId":"394","endLine":9,"endColumn":53},{"ruleId":"380","severity":1,"message":"381","line":54,"column":44,"nodeType":"382","messageId":"383","endLine":54,"endColumn":47,"suggestions":"458"},{"ruleId":"380","severity":1,"message":"381","line":57,"column":56,"nodeType":"382","messageId":"383","endLine":57,"endColumn":59,"suggestions":"459"},{"ruleId":"380","severity":1,"message":"381","line":61,"column":25,"nodeType":"382","messageId":"383","endLine":61,"endColumn":28,"suggestions":"460"},{"ruleId":"391","severity":1,"message":"392","line":7,"column":16,"nodeType":"393","messageId":"394","endLine":7,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":11,"column":16,"nodeType":"393","messageId":"394","endLine":11,"endColumn":39},{"ruleId":"391","severity":1,"message":"392","line":15,"column":16,"nodeType":"393","messageId":"394","endLine":15,"endColumn":52},{"ruleId":"391","severity":1,"message":"392","line":19,"column":13,"nodeType":"393","messageId":"394","endLine":19,"endColumn":49},{"ruleId":"391","severity":1,"message":"392","line":23,"column":16,"nodeType":"393","messageId":"394","endLine":23,"endColumn":31},{"ruleId":"387","severity":1,"message":"388","line":44,"column":27,"nodeType":"389","messageId":"390","endLine":44,"endColumn":38},{"ruleId":"391","severity":1,"message":"392","line":6,"column":16,"nodeType":"393","messageId":"394","endLine":6,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":10,"column":16,"nodeType":"393","messageId":"394","endLine":10,"endColumn":36},{"ruleId":"391","severity":1,"message":"392","line":14,"column":16,"nodeType":"393","messageId":"394","endLine":14,"endColumn":49},{"ruleId":"391","severity":1,"message":"392","line":18,"column":13,"nodeType":"393","messageId":"394","endLine":18,"endColumn":46},{"ruleId":"391","severity":1,"message":"392","line":22,"column":16,"nodeType":"393","messageId":"394","endLine":22,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":30,"column":17,"nodeType":"382","messageId":"383","endLine":30,"endColumn":20,"suggestions":"461"},{"ruleId":"380","severity":1,"message":"381","line":34,"column":39,"nodeType":"382","messageId":"383","endLine":34,"endColumn":42,"suggestions":"462"},"lines-around-directive",["463"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["464","465"],["466","467"],["468","469"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'user' should be typed with a non-any type.","Identifier","anyTypedArg",["470","471"],"Argument 'additionalData' should be typed with a non-any type.",["472","473"],["474","475"],["476","477"],["478","479"],["480","481"],["482","483"],["484","485"],["486","487"],["488","489"],["490","491"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed",["492","493"],["494","495"],"@typescript-eslint/naming-convention","Type Alias name `user` must match one of the following formats: PascalCase","doesNotMatchFormat","Type Alias name `userInfo` must match one of the following formats: PascalCase","Type Alias name `picture` must match one of the following formats: PascalCase",["496","497"],["498","499"],["500","501"],["502","503"],["504","505"],["506","507"],["508","509"],"no-alert","Unexpected confirm.","CallExpression",["510","511"],["512","513"],["514","515"],["516","517"],["518","519"],["520","521"],"Argument 'provided' should be typed with a non-any type.",["522","523"],"Argument 'state' should be typed with a non-any type.",["524","525"],"Argument 'base' should be typed with a non-any type.",["526","527"],["528","529"],["530","531"],["532","533"],"Argument 'styles' should be typed with a non-any type.",["534","535"],["536","537"],["538","539"],["540","541"],["542","543"],["544","545"],["546","547"],"Argument 'props' should be typed.","missingArgType",["548","549"],["550","551"],["552","553"],["554","555"],["556","557"],["558","559"],["560","561"],"padding-line-between-statements",{"messageId":"562","fix":"563","desc":"564"},{"messageId":"565","fix":"566","desc":"567"},{"messageId":"562","fix":"568","desc":"564"},{"messageId":"565","fix":"569","desc":"567"},{"messageId":"562","fix":"570","desc":"564"},{"messageId":"565","fix":"571","desc":"567"},{"messageId":"562","fix":"572","desc":"564"},{"messageId":"565","fix":"573","desc":"567"},{"messageId":"562","fix":"574","desc":"564"},{"messageId":"565","fix":"575","desc":"567"},{"messageId":"562","fix":"576","desc":"564"},{"messageId":"565","fix":"577","desc":"567"},{"messageId":"562","fix":"578","desc":"564"},{"messageId":"565","fix":"579","desc":"567"},{"messageId":"562","fix":"580","desc":"564"},{"messageId":"565","fix":"581","desc":"567"},{"messageId":"562","fix":"582","desc":"564"},{"messageId":"565","fix":"583","desc":"567"},{"messageId":"562","fix":"584","desc":"564"},{"messageId":"565","fix":"585","desc":"567"},{"messageId":"562","fix":"586","desc":"564"},{"messageId":"565","fix":"587","desc":"567"},{"messageId":"562","fix":"588","desc":"564"},{"messageId":"565","fix":"589","desc":"567"},{"messageId":"562","fix":"590","desc":"564"},{"messageId":"565","fix":"591","desc":"567"},{"messageId":"562","fix":"592","desc":"564"},{"messageId":"565","fix":"593","desc":"567"},{"messageId":"562","fix":"594","desc":"564"},{"messageId":"565","fix":"595","desc":"567"},{"messageId":"562","fix":"596","desc":"564"},{"messageId":"565","fix":"597","desc":"567"},{"messageId":"562","fix":"598","desc":"564"},{"messageId":"565","fix":"599","desc":"567"},{"messageId":"562","fix":"600","desc":"564"},{"messageId":"565","fix":"601","desc":"567"},{"messageId":"562","fix":"602","desc":"564"},{"messageId":"565","fix":"603","desc":"567"},{"messageId":"562","fix":"604","desc":"564"},{"messageId":"565","fix":"605","desc":"567"},{"messageId":"562","fix":"606","desc":"564"},{"messageId":"565","fix":"607","desc":"567"},{"messageId":"562","fix":"608","desc":"564"},{"messageId":"565","fix":"609","desc":"567"},{"messageId":"562","fix":"610","desc":"564"},{"messageId":"565","fix":"611","desc":"567"},{"messageId":"562","fix":"612","desc":"564"},{"messageId":"565","fix":"613","desc":"567"},{"messageId":"562","fix":"614","desc":"564"},{"messageId":"565","fix":"615","desc":"567"},{"messageId":"562","fix":"616","desc":"564"},{"messageId":"565","fix":"617","desc":"567"},{"messageId":"562","fix":"618","desc":"564"},{"messageId":"565","fix":"619","desc":"567"},{"messageId":"562","fix":"620","desc":"564"},{"messageId":"565","fix":"621","desc":"567"},{"messageId":"562","fix":"622","desc":"564"},{"messageId":"565","fix":"623","desc":"567"},{"messageId":"562","fix":"624","desc":"564"},{"messageId":"565","fix":"625","desc":"567"},{"messageId":"562","fix":"626","desc":"564"},{"messageId":"565","fix":"627","desc":"567"},{"messageId":"562","fix":"628","desc":"564"},{"messageId":"565","fix":"629","desc":"567"},{"messageId":"562","fix":"630","desc":"564"},{"messageId":"565","fix":"631","desc":"567"},{"messageId":"562","fix":"632","desc":"564"},{"messageId":"565","fix":"633","desc":"567"},{"messageId":"562","fix":"634","desc":"564"},{"messageId":"565","fix":"635","desc":"567"},{"messageId":"562","fix":"636","desc":"564"},{"messageId":"565","fix":"637","desc":"567"},{"messageId":"562","fix":"638","desc":"564"},{"messageId":"565","fix":"639","desc":"567"},{"messageId":"562","fix":"640","desc":"564"},{"messageId":"565","fix":"641","desc":"567"},{"messageId":"562","fix":"642","desc":"564"},{"messageId":"565","fix":"643","desc":"567"},{"messageId":"562","fix":"644","desc":"564"},{"messageId":"565","fix":"645","desc":"567"},{"messageId":"562","fix":"646","desc":"564"},{"messageId":"565","fix":"647","desc":"567"},{"messageId":"562","fix":"648","desc":"564"},{"messageId":"565","fix":"649","desc":"567"},{"messageId":"562","fix":"650","desc":"564"},{"messageId":"565","fix":"651","desc":"567"},{"messageId":"562","fix":"652","desc":"564"},{"messageId":"565","fix":"653","desc":"567"},{"messageId":"562","fix":"654","desc":"564"},{"messageId":"565","fix":"655","desc":"567"},{"messageId":"562","fix":"656","desc":"564"},{"messageId":"565","fix":"657","desc":"567"},{"messageId":"562","fix":"658","desc":"564"},{"messageId":"565","fix":"659","desc":"567"},{"messageId":"562","fix":"660","desc":"564"},{"messageId":"565","fix":"661","desc":"567"},{"messageId":"562","fix":"662","desc":"564"},{"messageId":"565","fix":"663","desc":"567"},"suggestUnknown",{"range":"664","text":"665"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"664","text":"666"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"667","text":"665"},{"range":"667","text":"666"},{"range":"668","text":"665"},{"range":"668","text":"666"},{"range":"669","text":"665"},{"range":"669","text":"666"},{"range":"670","text":"665"},{"range":"670","text":"666"},{"range":"671","text":"665"},{"range":"671","text":"666"},{"range":"672","text":"665"},{"range":"672","text":"666"},{"range":"673","text":"665"},{"range":"673","text":"666"},{"range":"674","text":"665"},{"range":"674","text":"666"},{"range":"675","text":"665"},{"range":"675","text":"666"},{"range":"676","text":"665"},{"range":"676","text":"666"},{"range":"677","text":"665"},{"range":"677","text":"666"},{"range":"678","text":"665"},{"range":"678","text":"666"},{"range":"679","text":"665"},{"range":"679","text":"666"},{"range":"680","text":"665"},{"range":"680","text":"666"},{"range":"681","text":"665"},{"range":"681","text":"666"},{"range":"682","text":"665"},{"range":"682","text":"666"},{"range":"683","text":"665"},{"range":"683","text":"666"},{"range":"684","text":"665"},{"range":"684","text":"666"},{"range":"685","text":"665"},{"range":"685","text":"666"},{"range":"686","text":"665"},{"range":"686","text":"666"},{"range":"687","text":"665"},{"range":"687","text":"666"},{"range":"688","text":"665"},{"range":"688","text":"666"},{"range":"689","text":"665"},{"range":"689","text":"666"},{"range":"690","text":"665"},{"range":"690","text":"666"},{"range":"691","text":"665"},{"range":"691","text":"666"},{"range":"692","text":"665"},{"range":"692","text":"666"},{"range":"693","text":"665"},{"range":"693","text":"666"},{"range":"694","text":"665"},{"range":"694","text":"666"},{"range":"695","text":"665"},{"range":"695","text":"666"},{"range":"696","text":"665"},{"range":"696","text":"666"},{"range":"697","text":"665"},{"range":"697","text":"666"},{"range":"698","text":"665"},{"range":"698","text":"666"},{"range":"699","text":"665"},{"range":"699","text":"666"},{"range":"700","text":"665"},{"range":"700","text":"666"},{"range":"701","text":"665"},{"range":"701","text":"666"},{"range":"702","text":"665"},{"range":"702","text":"666"},{"range":"703","text":"665"},{"range":"703","text":"666"},{"range":"704","text":"665"},{"range":"704","text":"666"},{"range":"705","text":"665"},{"range":"705","text":"666"},{"range":"706","text":"665"},{"range":"706","text":"666"},{"range":"707","text":"665"},{"range":"707","text":"666"},{"range":"708","text":"665"},{"range":"708","text":"666"},{"range":"709","text":"665"},{"range":"709","text":"666"},{"range":"710","text":"665"},{"range":"710","text":"666"},{"range":"711","text":"665"},{"range":"711","text":"666"},{"range":"712","text":"665"},{"range":"712","text":"666"},{"range":"713","text":"665"},{"range":"713","text":"666"},{"range":"714","text":"665"},{"range":"714","text":"666"},[629,632],"unknown","never",[698,701],[522,525],[1002,1005],[1023,1026],[692,695],[479,482],[4680,4683],[4693,4696],[3358,3361],[3719,3722],[6202,6205],[6691,6694],[2447,2450],[12962,12965],[12975,12978],[2921,2924],[3071,3074],[4554,4557],[8457,8460],[8535,8538],[2051,2054],[2189,2192],[14015,14018],[14028,14031],[460,463],[566,569],[487,490],[600,603],[45,48],[57,60],[279,282],[566,569],[684,687],[772,775],[842,845],[906,909],[1022,1025],[1134,1137],[1308,1311],[1390,1393],[1446,1449],[501,504],[618,621],[2468,2471],[2605,2608],[2793,2796],[991,994],[1120,1123]]