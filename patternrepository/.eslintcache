[{"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx":"1","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx":"2","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx":"3","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx":"4","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx":"5","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx":"6","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx":"7","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx":"8","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx":"9","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx":"10","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx":"11","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx":"12","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx":"13","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx":"14","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx":"15","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx":"16","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx":"17","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx":"18","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx":"19","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx":"20","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx":"21","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx":"22","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx":"23","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx":"24","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx":"25","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx":"26","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx":"27","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx":"28","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx":"29","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx":"30","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx":"31"},{"size":504,"mtime":1618584968579,"results":"32","hashOfConfig":"33"},{"size":275,"mtime":1618591518992,"results":"34","hashOfConfig":"33"},{"size":1150,"mtime":1618591326158,"results":"35","hashOfConfig":"33"},{"size":1421,"mtime":1618524201234,"results":"36","hashOfConfig":"33"},{"size":1684,"mtime":1618524201225,"results":"37","hashOfConfig":"33"},{"size":1493,"mtime":1618608543365,"results":"38","hashOfConfig":"33"},{"size":1535,"mtime":1618524201222,"results":"39","hashOfConfig":"33"},{"size":135,"mtime":1618332767713,"results":"40","hashOfConfig":"33"},{"size":423,"mtime":1618332668472,"results":"41","hashOfConfig":"33"},{"size":3173,"mtime":1618607989504,"results":"42","hashOfConfig":"33"},{"size":415,"mtime":1617579618712,"results":"43","hashOfConfig":"33"},{"size":1768,"mtime":1618524201223,"results":"44","hashOfConfig":"33"},{"size":4833,"mtime":1618610061795,"results":"45","hashOfConfig":"33"},{"size":3197,"mtime":1618609847655,"results":"46","hashOfConfig":"33"},{"size":1362,"mtime":1617579618712,"results":"47","hashOfConfig":"33"},{"size":2690,"mtime":1618605045070,"results":"48","hashOfConfig":"33"},{"size":13864,"mtime":1618609160434,"results":"49","hashOfConfig":"33"},{"size":196,"mtime":1617283949558,"results":"50","hashOfConfig":"33"},{"size":4217,"mtime":1618609377262,"results":"51","hashOfConfig":"33"},{"size":973,"mtime":1618595027456,"results":"52","hashOfConfig":"33"},{"size":1037,"mtime":1618336456802,"results":"53","hashOfConfig":"33"},{"size":3415,"mtime":1618606247440,"results":"54","hashOfConfig":"33"},{"size":16371,"mtime":1618610276655,"results":"55","hashOfConfig":"33"},{"size":650,"mtime":1618601931286,"results":"56","hashOfConfig":"33"},{"size":9092,"mtime":1618609673401,"results":"57","hashOfConfig":"33"},{"size":1146,"mtime":1618603078307,"results":"58","hashOfConfig":"33"},{"size":2573,"mtime":1618605749496,"results":"59","hashOfConfig":"33"},{"size":958,"mtime":1618608783258,"results":"60","hashOfConfig":"33"},{"size":1274,"mtime":1618608941864,"results":"61","hashOfConfig":"33"},{"size":217,"mtime":1618607599647,"results":"62","hashOfConfig":"33"},{"size":271,"mtime":1618607906756,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"g8f8c4",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"66"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"66"},"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx",[],["142","143","144","145","146"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx",["147"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { auth, generateUserDocument } from '../firebase';\r\nimport { user } from '../types';\r\n\r\nexport const UserContext = createContext<{ user: user }>({\r\n    user: null,\r\n});\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UserProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState<{ user: user }>({\r\n        user: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (userAuth) => {\r\n            if (userAuth) {\r\n                const signedUser: any = await generateUserDocument(userAuth, null);\r\n                setCurrentUser({\r\n                    user: {\r\n                        uid: signedUser?.uid,\r\n                        email: signedUser?.email,\r\n                        username: signedUser?.username,\r\n                        avatar: signedUser?.avatar,\r\n                        description: signedUser?.description,\r\n                        darkTheme: signedUser?.darkTheme,\r\n                    },\r\n                });\r\n            } else {\r\n                setCurrentUser({ user: null });\r\n            }\r\n        });\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    return <UserContext.Provider value={currentUser}>{children}</UserContext.Provider>;\r\n};\r\n\r\nexport default UserProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx",["148"],"import React, { useContext } from 'react';\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { auth } from '../logic/firebase';\r\n\r\nimport { UserContext } from '../logic/providers/userProvider';\r\n\r\nimport {\r\n    PageHeader as PH,\r\n    HeaderName,\r\n    Navigation,\r\n    NavItem,\r\n    NavLink,\r\n} from '../design/styledComponents';\r\n\r\nconst PageHeader: React.FC = () => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const logOutHandler = (event: any) => {\r\n        event.preventDefault();\r\n        auth.signOut();\r\n    };\r\n\r\n    return (\r\n        <PH>\r\n            <HeaderName href=\"/\">patternRepository</HeaderName>\r\n            <Navigation>\r\n                <NavItem>\r\n                    <NavLink href=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink href=\"/\">Browse patterns</NavLink>\r\n                </NavItem>\r\n                <NavItem style={{ float: 'right' }}>\r\n                    <UncontrolledDropdown nav inNavbar>\r\n                        <DropdownToggle nav caret>\r\n                            {`Welcome ${user?.username}`}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                            <DropdownItem href={`/profile/${user?.uid}`}>Profile</DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem onClick={logOutHandler}>Log out</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                </NavItem>\r\n            </Navigation>\r\n        </PH>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx",["149","150","151","152","153","154","155","156"],"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nimport firebaseConfig from './firebaseConfig';\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n} else {\n    firebase.app(); // if already initialized, use that one\n}\n\n// firebase.initializeApp();\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storage = firebase.storage();\n\nconst getUserDocument = async (uid: any) => {\n    if (!uid) return null;\n    try {\n        const userDocument = await firestore.doc(`users/${uid}`).get();\n        // const userAvatar = await storage.ref(`/avatars/${uid}`)?.getDownloadURL();\n        return {\n            uid,\n            ...userDocument.data(),\n            avatar: null, // userAvatar,\n        };\n    } catch (error) {\n        console.error(error.code);\n        return null;\n    }\n};\n\nexport const generateUserDocument = async (user: any, additionalData: any) => {\n    if (!user) return {};\n    const userRef = firestore.doc(`users/${user.uid}`);\n    const snapshot = await userRef.get();\n    if (!snapshot.exists) {\n        const { email } = user;\n        try {\n            await userRef.set({\n                username: user.username,\n                email,\n                ...additionalData,\n            });\n        } catch (error) {\n            console.error('Error creating user document', error);\n        }\n    }\n    return getUserDocument(user.uid);\n};\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx",["157"],"import React, { useState } from 'react';\nimport { auth, generateUserDocument } from '../../logic/firebase';\n\nimport { isEmail } from '../../logic/helperFunctions';\n\nimport {\n    SuccessButton,\n    Input,\n    Label,\n    FormGroup,\n    DangerAlert,\n    HelperText,\n} from '../../design/styledComponents';\n\nconst SignUp: React.FC = () => {\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordRepeat, setPasswordRepeat] = useState('');\n\n    const [error, setError] = useState<string | null>(null);\n\n    const createUserWithEmailAndPasswordHandler = async (event: any) => {\n        event.preventDefault();\n        try {\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\n            generateUserDocument(user, { username });\n        } catch (errorData) {\n            setError('Error Signing up with email and password');\n        }\n\n        setUsername('');\n        setEmail('');\n        setPassword('');\n        setPasswordRepeat('');\n        event.preventDefault();\n    };\n\n    return (\n        <>\n            <FormGroup>\n                <Label>Username</Label>\n                <Input\n                    block\n                    placeholder=\"Enter username\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                />\n                <HelperText>You can change your username later ^^</HelperText>\n            </FormGroup>\n            <FormGroup>\n                <Label>E-mail</Label>\n                <Input\n                    block\n                    placeholder=\"Enter mail\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => {\n                        if (!isEmail(e.target.value)) {\n                            setError('This is not a valid email!');\n                        } else {\n                            setError(null);\n                        }\n                        setEmail(e.target.value);\n                    }}\n                />\n            </FormGroup>\n            <FormGroup>\n                <Label>Password</Label>\n                <Input\n                    block\n                    placeholder=\"Enter password\"\n                    value={password}\n                    type=\"password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                />\n                <HelperText>Password has to have at least six characters</HelperText>\n            </FormGroup>\n            <FormGroup>\n                <Label>Repeat password</Label>\n                <Input\n                    block\n                    placeholder=\"Repeat password\"\n                    value={passwordRepeat}\n                    type=\"password\"\n                    onChange={(e) => setPasswordRepeat(e.target.value)}\n                />\n            </FormGroup>\n\n            {error && <DangerAlert>{error}</DangerAlert>}\n            <SuccessButton block onClick={createUserWithEmailAndPasswordHandler}>\n                Sign up\n            </SuccessButton>\n        </>\n    );\n};\n\nexport default SignUp;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx",["158","159"],"import React, { useState, useCallback } from 'react';\r\nimport { auth } from '../../logic/firebase';\r\n\r\nimport { SuccessButton, Input, Label, FormGroup, DangerAlert } from '../../design/styledComponents';\r\n\r\nconst SignIn: React.FC = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const signInWithEmailAndPasswordHandler = useCallback(\r\n        (event: any) => {\r\n            event.preventDefault();\r\n            auth.signInWithEmailAndPassword(email, password).catch((errorData) => {\r\n                setError('Error signing in with password and email!');\r\n                console.error('Error signing in with password and email', errorData);\r\n            });\r\n        },\r\n        [email, password],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={signInWithEmailAndPasswordHandler}>\r\n                Sign in\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\nexport default SignIn;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx",["160","161"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx",["162"],"import { useState } from 'react';\r\n\r\nimport { storage } from '../firebase';\r\n\r\nconst useStorage = (file: File | null) => {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [url, setUrl] = useState<string | null>(null);\r\n\r\n    // runs every time the file value changes\r\n    const uploadImage = (storageName: string, pictureName: string) => {\r\n        if (file) {\r\n            // storage ref\r\n            const storageRef = storage.ref(`${storageName}/${pictureName}`);\r\n\r\n            storageRef.put(file).on(\r\n                'state_changed',\r\n                (snap) => {\r\n                    // track the upload progress\r\n                    const percentage = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                    setProgress(percentage);\r\n                },\r\n                (err) => {\r\n                    setError(err.message);\r\n                },\r\n                async () => {\r\n                    // get the public download img url\r\n                    const downloadUrl = await storageRef.getDownloadURL();\r\n\r\n                    // save the url to local state\r\n                    setUrl(downloadUrl);\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    return { progress, url, error, uploadImage };\r\n};\r\nexport default useStorage;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx",["163","164","165"],"import React, { useState, useMemo, useContext, useCallback } from 'react';\nimport Select from 'react-select';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { UserContext } from '../../logic/providers/userProvider';\nimport { TagContext } from '../../logic/providers/tagProvider';\nimport { BookContext } from '../../logic/providers/bookProvider';\nimport { storage } from '../../logic/firebase';\nimport PatternService from '../../logic/services/patternServices';\n\nimport { patternToAdd, fileWithUrl, tag, book } from '../../logic/types';\n\nimport multiSelectWithColour from '../../design/selectStyles';\n\nimport {\n    FormGroup,\n    Input,\n    Label,\n    ItemDetail,\n    ItemHeader,\n    ButtonRow,\n    SuccessButton,\n    CancelButton,\n    DifficultyInput,\n    FormImageContainer,\n    IconButton,\n    DangerAlert,\n} from '../../design/styledComponents';\n\ninterface PropsType {\n    closeModal: () => void;\n}\n\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\n\nconst AddPattern: React.FC<PropsType> = React.memo(({ closeModal }) => {\n    const { user } = useContext(UserContext);\n    const { allTags } = useContext(TagContext);\n    const { allBooks } = useContext(BookContext);\n\n    const [title, setTitle] = useState<string>('');\n    const [tags, setTags] = useState<tag[]>([]);\n    const [books, setBooks] = useState<book[]>([]);\n    const [newTag, setNewTag] = useState<string>('');\n    const [description, setDescription] = useState<string>('');\n    const [difficulty, setDifficulty] = useState<number>(3);\n\n    const [newOpen, setNewOpen] = useState<boolean>(false);\n\n    const [patternPictures, setPatternPictures] = useState<fileWithUrl[]>([]);\n    const [finishedWorkPictures, setFinishedWorkPictures] = useState<fileWithUrl[]>([]);\n\n    const [error, setError] = useState<string | null>(null);\n\n    const id = useMemo(\n        () =>\n            `${newOpen ? 'y' : ''}${(new Date().getTime() / 1000).toFixed(0)}${new Array(5)\n                .join()\n                .replace(/(.|$)/g, function () {\n                    return (Math.random() * 36)\n                        .toString(36)\n                        [Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\n                })}`,\n        [newOpen],\n    );\n\n    const allPossibleBooks = useMemo(\n        () => allBooks.filter((possibleBook) => possibleBook.owner === user?.uid),\n        [allBooks, user?.uid],\n    );\n\n    const HandlePatternImageChange = useCallback(\n        (selectedFile: File | null) => {\n            if (selectedFile) {\n                if (imageTypes.includes(selectedFile.type)) {\n                    const maxAllowSize = 5 * 1024 * 1024;\n                    if (selectedFile.size > maxAllowSize) {\n                        setError('Image is too big! Maximum size is 5MB.');\n                    } else {\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\n\n                        storageRef.put(selectedFile).on(\n                            'state_changed',\n                            () => {},\n                            (err) => {\n                                setError(err.message);\n                            },\n                            async () => {\n                                const downloadUrl = await storageRef.getDownloadURL();\n                                setPatternPictures([\n                                    ...patternPictures,\n                                    { file: selectedFile, url: downloadUrl },\n                                ]);\n                            },\n                        );\n                    }\n                } else {\n                    setError('Please use only select an image file (png or jpg)');\n                }\n            }\n        },\n        [id, patternPictures],\n    );\n\n    const HandleWorkImageChange = useCallback(\n        (selectedFile: File | null) => {\n            if (selectedFile) {\n                if (imageTypes.includes(selectedFile.type)) {\n                    const maxAllowSize = 5 * 1024 * 1024;\n                    if (selectedFile.size > maxAllowSize) {\n                        setError('Image is too big! Maximum size is 5MB.');\n                    } else {\n                        const storageRef = storage.ref(\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\n                        );\n\n                        storageRef.put(selectedFile).on(\n                            'state_changed',\n                            () => {},\n                            (err) => {\n                                setError(err.message);\n                            },\n                            async () => {\n                                const downloadUrl = await storageRef.getDownloadURL();\n                                setFinishedWorkPictures([\n                                    ...finishedWorkPictures,\n                                    { file: selectedFile, url: downloadUrl },\n                                ]);\n                            },\n                        );\n                    }\n                } else {\n                    setError('Please use only select an image file (png or jpg)');\n                }\n            }\n        },\n        [id, finishedWorkPictures],\n    );\n\n    const removePaternPicture = useCallback(\n        (index: number) => {\n            const newPictures: fileWithUrl[] = [...patternPictures.filter((_, i) => i !== index)];\n            const fileToRemove: fileWithUrl = patternPictures[index];\n            const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.file.name}`);\n            storageRef\n                .delete()\n                .then(() => {\n                    setPatternPictures(newPictures);\n                })\n                .catch((err) => {\n                    setError(err.message);\n                });\n        },\n        [id, patternPictures],\n    );\n\n    const removeWorkPicture = useCallback(\n        (index: number) => {\n            const newPictures: fileWithUrl[] = [\n                ...finishedWorkPictures.filter((_, i) => i !== index),\n            ];\n            const fileToRemove: fileWithUrl = finishedWorkPictures[index];\n            const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.file.name}`);\n            storageRef\n                .delete()\n                .then(() => {\n                    setFinishedWorkPictures(newPictures);\n                })\n                .catch((err) => {\n                    setError(err.message);\n                });\n        },\n        [id, finishedWorkPictures],\n    );\n\n    const handleSubmit = useCallback(() => {\n        const data: patternToAdd = {\n            title,\n            description,\n            difficulty,\n            patternImages: patternPictures.map((picture) => ({\n                name: picture.file.name,\n                url: picture.url,\n            })),\n            finishedWorkImages: finishedWorkPictures.map((picture) => ({\n                name: picture.file.name,\n                url: picture.url,\n            })),\n            owner: user?.uid ? user.uid : null,\n            tags: tags.map((t) => t.id),\n            books: books.map((b) => b.id),\n        };\n\n        PatternService.set(id, data)\n            .then(() => {\n                setNewOpen(true);\n                closeModal();\n            })\n            .catch((e) => {\n                setError(e?.message);\n            });\n    }, [\n        closeModal,\n        description,\n        difficulty,\n        finishedWorkPictures,\n        id,\n        patternPictures,\n        tags,\n        title,\n        books,\n        user?.uid,\n    ]);\n\n    const handleTagAddition = useCallback(() => {\n        /*  if (newTag) {\n            const data: tagToAdd = {\n                label: newTag,\n            };\n\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\n\n            TagService.set(`${tagId}`, data)\n                .then(() => {\n                    setNewTag('');\n                })\n                .catch((e) => {\n                    setError(e?.message);\n                });\n        } */\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        let newError = 'Errors:';\n        newError = '';\n        patternPictures.forEach((picture) => {\n            storage\n                .ref(`patternImages/${id}/${picture.file.name}`)\n                .delete()\n                .catch((err: Error) => {\n                    newError.concat(err.message);\n                });\n        });\n        finishedWorkPictures.forEach((picture) => {\n            storage\n                .ref(`finishedWorkImages/${id}/${picture.file.name}`)\n                .delete()\n                .catch((err: Error) => {\n                    newError.concat(err.message);\n                });\n        });\n        if (newError.length) {\n            setError(newError);\n        } else {\n            setNewOpen(true);\n            closeModal();\n        }\n    }, [closeModal, finishedWorkPictures, id, patternPictures]);\n\n    return (\n        <ItemDetail>\n            <ItemHeader>Add a new pattern</ItemHeader>\n\n            <FormGroup>\n                <Label>Title</Label>\n                <Input\n                    block\n                    name=\"patternTitle\"\n                    placeholder=\"Enter title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Tags</Label>\n                <Select\n                    options={allTags}\n                    value={tags}\n                    isMulti\n                    backspaceRemovesValue\n                    inputValue={newTag}\n                    onKeyDown={(e) => {\n                        const enterKeyCode = 13;\n                        if (e.keyCode === enterKeyCode) {\n                            handleTagAddition();\n                        }\n                    }}\n                    onInputChange={(e) => {\n                        setNewTag(e);\n                    }}\n                    onChange={(e) => {\n                        setTags([...e]);\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Difficulty</Label>\n                <DifficultyInput\n                    block\n                    type=\"range\"\n                    name=\"patternDifficulty\"\n                    min={1}\n                    max={5}\n                    step={1}\n                    value={difficulty}\n                    difficulty={difficulty}\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Books</Label>\n                <Select\n                    styles={multiSelectWithColour}\n                    options={allPossibleBooks}\n                    value={books}\n                    isMulti\n                    onChange={(e) => {\n                        setBooks([...e]);\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Description</Label>\n                <CKEditor\n                    editor={ClassicEditor}\n                    data={description}\n                    onChange={(event: any, editor: any) => {\n                        setDescription(editor.getData());\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Pattern pictures</Label>\n                <>\n                    {patternPictures.map((picture, index) => (\n                        <FormImageContainer key={picture.file.name}>\n                            <IconButton onClick={() => removePaternPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"pattern\" />\n                        </FormImageContainer>\n                    ))}\n                    <Input\n                        block\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                </>\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Finished works</Label>\n                <>\n                    {finishedWorkPictures.map((picture, index) => (\n                        <FormImageContainer key={picture.file.name}>\n                            <IconButton onClick={() => removeWorkPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"finishedWork\" />\n                        </FormImageContainer>\n                    ))}\n                    <Input\n                        block\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                </>\n            </FormGroup>\n\n            {error && <DangerAlert>{error}</DangerAlert>}\n            <ButtonRow>\n                <CancelButton block={false} onClick={handleCancel}>\n                    Cancel\n                </CancelButton>\n\n                <SuccessButton block={false} onClick={handleSubmit}>\n                    Save\n                </SuccessButton>\n            </ButtonRow>\n        </ItemDetail>\n    );\n});\n\nAddPattern.displayName = 'AddPattern';\n\nexport default AddPattern;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx",["166","167","168"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx",["169","170"],"import React, { useState, useEffect, useCallback, useContext } from 'react';\nimport PatternService from '../../logic/services/patternServices';\nimport { TagContext } from '../../logic/providers/tagProvider';\nimport { BookContext } from '../../logic/providers/bookProvider';\n\nimport { pattern as patternType, basicImage } from '../../logic/types';\n\nimport {\n    ItemList,\n    Item,\n    ItemDetail,\n    ItemHeader,\n    ButtonRow,\n    SuccessButton,\n    DangerButton,\n    Difficulty,\n    TagRow,\n    Tag,\n} from '../../design/styledComponents';\n\ninterface PropsType {\n    setCurrentPattern: (pattern: patternType) => void;\n}\n\nconst List: React.FC<PropsType> = React.memo(({ setCurrentPattern }) => {\n    const { allTags } = useContext(TagContext);\n    const { allBooks } = useContext(BookContext);\n\n    const [patterns, setPatterns] = useState<patternType[]>([]);\n\n    const onDataChange = useCallback(\n        (items: any) => {\n            let loadedPatterns: patternType[] = [];\n            loadedPatterns = [];\n\n            items.docs.forEach((item: any) => {\n                const { id } = item;\n                const data = item.data();\n\n                loadedPatterns.push({\n                    id,\n                    title: data.title,\n                    description: data.description,\n                    difficulty: data.difficulty,\n                    owner: data.owner,\n                    patternImages: data.patternImages,\n                    finishedWorkImages: data.finishedWorkImages,\n                    tags: allTags.length\n                        ? data.tags.map((tagId: string) => allTags.find((tag) => tag.id === tagId))\n                        : [],\n                    books: allBooks.length\n                        ? data.books.map((bookId: string) =>\n                              allBooks.find((book) => book.id === bookId),\n                          )\n                        : [],\n                });\n            });\n\n            setPatterns(loadedPatterns);\n        },\n        [allTags, allBooks],\n    );\n\n    useEffect(() => {\n        const unsubscribe = PatternService.getAll().limit(20).onSnapshot(onDataChange);\n\n        return () => unsubscribe();\n    }, [onDataChange]);\n\n    return (\n        <ItemList>\n            {patterns.map((pattern: patternType) => (\n                <Item key={pattern.id}>\n                    <ItemDetail>\n                        <ButtonRow>\n                            <DangerButton block={false} onClick={() => setCurrentPattern(pattern)}>\n                                Detail\n                            </DangerButton>\n                            <SuccessButton block={false} onClick={() => {}}>\n                                Copy\n                            </SuccessButton>\n                        </ButtonRow>\n                        <ItemHeader>{pattern.title}</ItemHeader>\n                        <TagRow>\n                            {pattern.tags?.map((tag) => (\n                                <Tag key={tag.id} colour=\"tag\">\n                                    {' '}\n                                    {tag.label}{' '}\n                                </Tag>\n                            ))}\n                        </TagRow>\n                        <Difficulty difficulty={pattern.difficulty} />\n                        <TagRow>\n                            {pattern.books?.map((book) => (\n                                <Tag key={book.id} colour={book.colour}>\n                                    {' '}\n                                    {book.label}{' '}\n                                </Tag>\n                            ))}\n                        </TagRow>\n                        {pattern.finishedWorkImages.slice(0, 4).map((image: basicImage) => (\n                            <img\n                                key={image.name}\n                                src={image.url}\n                                alt={image.name}\n                                width=\"100px\"\n                                height=\"100px\"\n                            />\n                        ))}\n                    </ItemDetail>\n                </Item>\n            ))}\n        </ItemList>\n    );\n});\n\nList.displayName = 'List';\n\nexport default List;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx",["171","172","173","174","175","176","177"],"import { firestore, auth } from '../firebase';\nimport { patternToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/patterns');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst getAllMine = () => {\n    if (auth?.currentUser?.uid) {\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\n    }\n    return [];\n};\n\nconst getAllOfUser = (uid: string) => {\n    return collectionRef.where('owner', '==', uid);\n};\n\nconst create = (data: patternToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: patternToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: patternToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst PatternService = {\n    getAll,\n    getAllMine,\n    getAllOfUser,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default PatternService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx",["178","179"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx",["180","181","182","183","184"],"import { firestore } from '../firebase';\nimport { tagToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/tags');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst create = (data: tagToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst TagService = {\n    getAll,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default TagService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx",["185","186"],"import React, { createContext, useState, useEffect } from 'react';\nimport TagService from '../services/tagServices';\nimport { tag } from '../types';\n\nexport const TagContext = createContext<{ allTags: tag[] }>({ allTags: [] });\n\ninterface PropsType {\n    children: JSX.Element;\n}\n\nconst TagProvider: React.FC<PropsType> = ({ children }) => {\n    const [allTags, setAllTags] = useState<{ allTags: tag[] }>({ allTags: [] });\n\n    const onTagDataChange = (items: any) => {\n        let loadedTags: tag[] = [];\n        loadedTags = [];\n\n        items.docs.forEach((item: any) => {\n            const { id: tagId } = item;\n            const data = item.data();\n\n            loadedTags.push({\n                id: tagId,\n                label: data.label,\n                value: tagId,\n            });\n        });\n\n        setAllTags({ allTags: loadedTags });\n    };\n\n    useEffect(() => {\n        const unsubscribe = TagService.getAll().orderBy('label', 'asc').onSnapshot(onTagDataChange);\n\n        return () => unsubscribe();\n    }, []);\n\n    return <TagContext.Provider value={allTags}>{children}</TagContext.Provider>;\n};\n\nexport default TagProvider;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx",["187","188","189","190","191","192","193"],"import { firestore, auth } from '../firebase';\nimport { bookInfo } from '../types';\n\nconst collectionRef = firestore.collection('/book');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst getAllMine = () => {\n    if (auth?.currentUser?.uid) {\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\n    }\n    return collectionRef;\n};\n\nconst getAllOfUser = (uid: string) => {\n    return collectionRef.where('owner', '==', uid);\n};\n\nconst create = (data: bookInfo) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: bookInfo) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: bookInfo) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst BookService = {\n    getAll,\n    getAllMine,\n    getAllOfUser,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default BookService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx",["194","195"],"import React, { createContext, useState, useEffect } from 'react';\nimport BookService from '../services/bookServices';\nimport { book } from '../types';\n\nexport const BookContext = createContext<{ allBooks: book[] }>({ allBooks: [] });\n\ninterface PropsType {\n    children: JSX.Element;\n}\n\nconst BookProvider: React.FC<PropsType> = ({ children }) => {\n    const [allBooks, setAllBooks] = useState<{ allBooks: book[] }>({ allBooks: [] });\n\n    const onBookDataChange = (items: any) => {\n        let loadedBooks: book[] = [];\n        loadedBooks = [];\n\n        items.docs.forEach((item: any) => {\n            const { id: bookId } = item;\n            const data = item.data();\n\n            loadedBooks.push({\n                id: bookId,\n                label: data.label,\n                value: bookId,\n                colour: data.colour,\n                owner: data.owner,\n            });\n        });\n\n        setAllBooks({ allBooks: loadedBooks });\n    };\n\n    useEffect(() => {\n        const unsubscribe = BookService.getAll()\n            .orderBy('label', 'asc')\n            .onSnapshot(onBookDataChange);\n\n        return () => unsubscribe();\n    }, []);\n\n    return <BookContext.Provider value={allBooks}>{children}</BookContext.Provider>;\n};\n\nexport default BookProvider;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx",["196","197","198","199","200"],"export default {\n    multiValue: (provided: any, state: any) => {\n        const backgroundColor = `${state.data.colour}88`;\n\n        return {\n            ...provided,\n            backgroundColor,\n        };\n    },\n};\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx",["201","202"],"export const isEmail = (email: string) =>\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n        email,\n    );\n\nexport const hi = () => {\n    return 'Hi';\n};\n",{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":21,"column":35,"nodeType":"215","messageId":"216","endLine":21,"endColumn":38,"suggestions":"217"},{"ruleId":"213","severity":1,"message":"214","line":18,"column":35,"nodeType":"215","messageId":"216","endLine":18,"endColumn":38,"suggestions":"218"},{"ruleId":"213","severity":1,"message":"214","line":19,"column":37,"nodeType":"215","messageId":"216","endLine":19,"endColumn":40,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":30,"column":9,"nodeType":"222","messageId":"223","endLine":30,"endColumn":22},{"ruleId":"224","severity":1,"message":"225","line":35,"column":37,"nodeType":"226","messageId":"227","endLine":35,"endColumn":78},{"ruleId":"224","severity":1,"message":"228","line":35,"column":44,"nodeType":"229","messageId":"230","endLine":35,"endColumn":53},{"ruleId":"213","severity":1,"message":"214","line":35,"column":50,"nodeType":"215","messageId":"216","endLine":35,"endColumn":53,"suggestions":"231"},{"ruleId":"224","severity":1,"message":"232","line":35,"column":55,"nodeType":"229","messageId":"230","endLine":35,"endColumn":74},{"ruleId":"213","severity":1,"message":"214","line":35,"column":71,"nodeType":"215","messageId":"216","endLine":35,"endColumn":74,"suggestions":"233"},{"ruleId":"220","severity":1,"message":"221","line":48,"column":13,"nodeType":"222","messageId":"223","endLine":48,"endColumn":26},{"ruleId":"213","severity":1,"message":"214","line":23,"column":65,"nodeType":"215","messageId":"216","endLine":23,"endColumn":68,"suggestions":"234"},{"ruleId":"213","severity":1,"message":"214","line":13,"column":17,"nodeType":"215","messageId":"216","endLine":13,"endColumn":20,"suggestions":"235"},{"ruleId":"220","severity":1,"message":"221","line":17,"column":17,"nodeType":"222","messageId":"223","endLine":17,"endColumn":30},{"ruleId":"213","severity":1,"message":"214","line":141,"column":43,"nodeType":"215","messageId":"216","endLine":141,"endColumn":46,"suggestions":"236"},{"ruleId":"213","severity":1,"message":"214","line":141,"column":56,"nodeType":"215","messageId":"216","endLine":141,"endColumn":59,"suggestions":"237"},{"ruleId":"224","severity":1,"message":"225","line":5,"column":20,"nodeType":"226","messageId":"227","endLine":5,"endColumn":42},{"ruleId":"238","severity":1,"message":"239","line":61,"column":36,"nodeType":"240","messageId":"241","endLine":61,"endColumn":45},{"ruleId":"213","severity":1,"message":"214","line":333,"column":39,"nodeType":"215","messageId":"216","endLine":333,"endColumn":42,"suggestions":"242"},{"ruleId":"213","severity":1,"message":"214","line":333,"column":52,"nodeType":"215","messageId":"216","endLine":333,"endColumn":55,"suggestions":"243"},{"ruleId":"244","severity":2,"message":"245","line":1,"column":13,"nodeType":"229","messageId":"246","endLine":1,"endColumn":17},{"ruleId":"244","severity":2,"message":"247","line":3,"column":6,"nodeType":"229","messageId":"246","endLine":3,"endColumn":14},{"ruleId":"244","severity":2,"message":"248","line":11,"column":13,"nodeType":"229","messageId":"246","endLine":11,"endColumn":20},{"ruleId":"213","severity":1,"message":"214","line":32,"column":17,"nodeType":"215","messageId":"216","endLine":32,"endColumn":20,"suggestions":"249"},{"ruleId":"213","severity":1,"message":"214","line":36,"column":39,"nodeType":"215","messageId":"216","endLine":36,"endColumn":42,"suggestions":"250"},{"ruleId":"224","severity":1,"message":"225","line":6,"column":16,"nodeType":"226","messageId":"227","endLine":6,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":10,"column":20,"nodeType":"226","messageId":"227","endLine":10,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":17,"column":22,"nodeType":"226","messageId":"227","endLine":17,"endColumn":38},{"ruleId":"224","severity":1,"message":"225","line":21,"column":16,"nodeType":"226","messageId":"227","endLine":21,"endColumn":39},{"ruleId":"224","severity":1,"message":"225","line":25,"column":16,"nodeType":"226","messageId":"227","endLine":25,"endColumn":52},{"ruleId":"224","severity":1,"message":"225","line":29,"column":13,"nodeType":"226","messageId":"227","endLine":29,"endColumn":49},{"ruleId":"224","severity":1,"message":"225","line":33,"column":16,"nodeType":"226","messageId":"227","endLine":33,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":357,"column":39,"nodeType":"215","messageId":"216","endLine":357,"endColumn":42,"suggestions":"251"},{"ruleId":"213","severity":1,"message":"214","line":357,"column":52,"nodeType":"215","messageId":"216","endLine":357,"endColumn":55,"suggestions":"252"},{"ruleId":"224","severity":1,"message":"225","line":6,"column":16,"nodeType":"226","messageId":"227","endLine":6,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":10,"column":16,"nodeType":"226","messageId":"227","endLine":10,"endColumn":35},{"ruleId":"224","severity":1,"message":"225","line":14,"column":16,"nodeType":"226","messageId":"227","endLine":14,"endColumn":48},{"ruleId":"224","severity":1,"message":"225","line":18,"column":13,"nodeType":"226","messageId":"227","endLine":18,"endColumn":45},{"ruleId":"224","severity":1,"message":"225","line":22,"column":16,"nodeType":"226","messageId":"227","endLine":22,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":14,"column":37,"nodeType":"215","messageId":"216","endLine":14,"endColumn":40,"suggestions":"253"},{"ruleId":"213","severity":1,"message":"214","line":18,"column":35,"nodeType":"215","messageId":"216","endLine":18,"endColumn":38,"suggestions":"254"},{"ruleId":"224","severity":1,"message":"225","line":6,"column":16,"nodeType":"226","messageId":"227","endLine":6,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":10,"column":20,"nodeType":"226","messageId":"227","endLine":10,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":17,"column":22,"nodeType":"226","messageId":"227","endLine":17,"endColumn":38},{"ruleId":"224","severity":1,"message":"225","line":21,"column":16,"nodeType":"226","messageId":"227","endLine":21,"endColumn":35},{"ruleId":"224","severity":1,"message":"225","line":25,"column":16,"nodeType":"226","messageId":"227","endLine":25,"endColumn":48},{"ruleId":"224","severity":1,"message":"225","line":29,"column":13,"nodeType":"226","messageId":"227","endLine":29,"endColumn":45},{"ruleId":"224","severity":1,"message":"225","line":33,"column":16,"nodeType":"226","messageId":"227","endLine":33,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":14,"column":38,"nodeType":"215","messageId":"216","endLine":14,"endColumn":41,"suggestions":"255"},{"ruleId":"213","severity":1,"message":"214","line":18,"column":35,"nodeType":"215","messageId":"216","endLine":18,"endColumn":38,"suggestions":"256"},{"ruleId":"224","severity":1,"message":"225","line":2,"column":17,"nodeType":"226","messageId":"227","endLine":2,"endColumn":47},{"ruleId":"224","severity":1,"message":"257","line":2,"column":18,"nodeType":"229","messageId":"230","endLine":2,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":2,"column":28,"nodeType":"215","messageId":"216","endLine":2,"endColumn":31,"suggestions":"258"},{"ruleId":"224","severity":1,"message":"259","line":2,"column":33,"nodeType":"229","messageId":"230","endLine":2,"endColumn":43},{"ruleId":"213","severity":1,"message":"214","line":2,"column":40,"nodeType":"215","messageId":"216","endLine":2,"endColumn":43,"suggestions":"260"},{"ruleId":"224","severity":1,"message":"225","line":1,"column":24,"nodeType":"226","messageId":"227","endLine":1,"endColumn":42},{"ruleId":"224","severity":1,"message":"225","line":6,"column":19,"nodeType":"226","messageId":"227","endLine":6,"endColumn":24},"lines-around-directive",["261"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["262","263"],["264","265"],["266","267"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'user' should be typed with a non-any type.","Identifier","anyTypedArg",["268","269"],"Argument 'additionalData' should be typed with a non-any type.",["270","271"],["272","273"],["274","275"],["276","277"],["278","279"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed",["280","281"],["282","283"],"@typescript-eslint/naming-convention","Type Alias name `user` must match one of the following formats: PascalCase","doesNotMatchFormat","Type Alias name `userInfo` must match one of the following formats: PascalCase","Type Alias name `picture` must match one of the following formats: PascalCase",["284","285"],["286","287"],["288","289"],["290","291"],["292","293"],["294","295"],["296","297"],["298","299"],"Argument 'provided' should be typed with a non-any type.",["300","301"],"Argument 'state' should be typed with a non-any type.",["302","303"],"padding-line-between-statements",{"messageId":"304","fix":"305","desc":"306"},{"messageId":"307","fix":"308","desc":"309"},{"messageId":"304","fix":"310","desc":"306"},{"messageId":"307","fix":"311","desc":"309"},{"messageId":"304","fix":"312","desc":"306"},{"messageId":"307","fix":"313","desc":"309"},{"messageId":"304","fix":"314","desc":"306"},{"messageId":"307","fix":"315","desc":"309"},{"messageId":"304","fix":"316","desc":"306"},{"messageId":"307","fix":"317","desc":"309"},{"messageId":"304","fix":"318","desc":"306"},{"messageId":"307","fix":"319","desc":"309"},{"messageId":"304","fix":"320","desc":"306"},{"messageId":"307","fix":"321","desc":"309"},{"messageId":"304","fix":"322","desc":"306"},{"messageId":"307","fix":"323","desc":"309"},{"messageId":"304","fix":"324","desc":"306"},{"messageId":"307","fix":"325","desc":"309"},{"messageId":"304","fix":"326","desc":"306"},{"messageId":"307","fix":"327","desc":"309"},{"messageId":"304","fix":"328","desc":"306"},{"messageId":"307","fix":"329","desc":"309"},{"messageId":"304","fix":"330","desc":"306"},{"messageId":"307","fix":"331","desc":"309"},{"messageId":"304","fix":"332","desc":"306"},{"messageId":"307","fix":"333","desc":"309"},{"messageId":"304","fix":"334","desc":"306"},{"messageId":"307","fix":"335","desc":"309"},{"messageId":"304","fix":"336","desc":"306"},{"messageId":"307","fix":"337","desc":"309"},{"messageId":"304","fix":"338","desc":"306"},{"messageId":"307","fix":"339","desc":"309"},{"messageId":"304","fix":"340","desc":"306"},{"messageId":"307","fix":"341","desc":"309"},{"messageId":"304","fix":"342","desc":"306"},{"messageId":"307","fix":"343","desc":"309"},{"messageId":"304","fix":"344","desc":"306"},{"messageId":"307","fix":"345","desc":"309"},{"messageId":"304","fix":"346","desc":"306"},{"messageId":"307","fix":"347","desc":"309"},{"messageId":"304","fix":"348","desc":"306"},{"messageId":"307","fix":"349","desc":"309"},"suggestUnknown",{"range":"350","text":"351"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"350","text":"352"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"353","text":"351"},{"range":"353","text":"352"},{"range":"354","text":"351"},{"range":"354","text":"352"},{"range":"355","text":"351"},{"range":"355","text":"352"},{"range":"356","text":"351"},{"range":"356","text":"352"},{"range":"357","text":"351"},{"range":"357","text":"352"},{"range":"358","text":"351"},{"range":"358","text":"352"},{"range":"359","text":"351"},{"range":"359","text":"352"},{"range":"360","text":"351"},{"range":"360","text":"352"},{"range":"361","text":"351"},{"range":"361","text":"352"},{"range":"362","text":"351"},{"range":"362","text":"352"},{"range":"363","text":"351"},{"range":"363","text":"352"},{"range":"364","text":"351"},{"range":"364","text":"352"},{"range":"365","text":"351"},{"range":"365","text":"352"},{"range":"366","text":"351"},{"range":"366","text":"352"},{"range":"367","text":"351"},{"range":"367","text":"352"},{"range":"368","text":"351"},{"range":"368","text":"352"},{"range":"369","text":"351"},{"range":"369","text":"352"},{"range":"370","text":"351"},{"range":"370","text":"352"},{"range":"371","text":"351"},{"range":"371","text":"352"},{"range":"372","text":"351"},{"range":"372","text":"352"},[629,632],"unknown","never",[507,510],[504,507],[968,971],[989,992],[670,673],[479,482],[4582,4585],[4595,4598],[11465,11468],[11478,11481],[916,919],[1050,1053],[13015,13018],[13028,13031],[460,463],[566,569],[474,477],[583,586],[44,47],[56,59]]