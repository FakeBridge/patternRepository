[{"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx":"1","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx":"2","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx":"3","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx":"4","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx":"5","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx":"6","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx":"7","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx":"8","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx":"9","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx":"10","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx":"11","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx":"12","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx":"13","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx":"14","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx":"15","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx":"16","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx":"17","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx":"18","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx":"19","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx":"20","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx":"21","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx":"22","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx":"23","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx":"24","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx":"25","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx":"26","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx":"27","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx":"28","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx":"29","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx":"30","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx":"31","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx":"32","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx":"33","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx":"34","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx":"35","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\usersProvider.tsx":"36","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\userServices.tsx":"37","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\likedPatternsServices.tsx":"38","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\bookContainer.tsx":"39","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\viewBook.tsx":"40","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\editBook.tsx":"41","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\followedUsersService.tsx":"42"},{"size":695,"mtime":1620338532213,"results":"43","hashOfConfig":"44"},{"size":275,"mtime":1618591518992,"results":"45","hashOfConfig":"44"},{"size":1405,"mtime":1618832426865,"results":"46","hashOfConfig":"44"},{"size":1421,"mtime":1618524201234,"results":"47","hashOfConfig":"44"},{"size":1808,"mtime":1618764077833,"results":"48","hashOfConfig":"44"},{"size":1545,"mtime":1618610348765,"results":"49","hashOfConfig":"44"},{"size":1535,"mtime":1618524201222,"results":"50","hashOfConfig":"44"},{"size":135,"mtime":1618332767713,"results":"51","hashOfConfig":"44"},{"size":721,"mtime":1620421730835,"results":"52","hashOfConfig":"44"},{"size":3271,"mtime":1618610348755,"results":"53","hashOfConfig":"44"},{"size":415,"mtime":1617579618712,"results":"54","hashOfConfig":"44"},{"size":1768,"mtime":1618524201223,"results":"55","hashOfConfig":"44"},{"size":4984,"mtime":1618610348762,"results":"56","hashOfConfig":"44"},{"size":10479,"mtime":1620430833890,"results":"57","hashOfConfig":"44"},{"size":1362,"mtime":1617579618712,"results":"58","hashOfConfig":"44"},{"size":3950,"mtime":1620431203211,"results":"59","hashOfConfig":"44"},{"size":15859,"mtime":1620338532208,"results":"60","hashOfConfig":"44"},{"size":196,"mtime":1617283949558,"results":"61","hashOfConfig":"44"},{"size":8744,"mtime":1620431487300,"results":"62","hashOfConfig":"44"},{"size":1158,"mtime":1620338532215,"results":"63","hashOfConfig":"44"},{"size":1037,"mtime":1618336456802,"results":"64","hashOfConfig":"44"},{"size":4664,"mtime":1620338532212,"results":"65","hashOfConfig":"44"},{"size":17520,"mtime":1620338532209,"results":"66","hashOfConfig":"44"},{"size":650,"mtime":1618763627960,"results":"67","hashOfConfig":"44"},{"size":11059,"mtime":1620431102925,"results":"68","hashOfConfig":"44"},{"size":1146,"mtime":1618761398340,"results":"69","hashOfConfig":"44"},{"size":2668,"mtime":1618610348757,"results":"70","hashOfConfig":"44"},{"size":1005,"mtime":1618610348767,"results":"71","hashOfConfig":"44"},{"size":1319,"mtime":1618610348766,"results":"72","hashOfConfig":"44"},{"size":227,"mtime":1618610348763,"results":"73","hashOfConfig":"44"},{"size":279,"mtime":1618610348766,"results":"74","hashOfConfig":"44"},{"size":1175,"mtime":1618688616561,"results":"75","hashOfConfig":"44"},{"size":2586,"mtime":1618688616563,"results":"76","hashOfConfig":"44"},{"size":2458,"mtime":1618685794822,"results":"77","hashOfConfig":"44"},{"size":1653,"mtime":1618688616563,"results":"78","hashOfConfig":"44"},{"size":1311,"mtime":1620419805662,"results":"79","hashOfConfig":"44"},{"size":229,"mtime":1620338532216,"results":"80","hashOfConfig":"44"},{"size":389,"mtime":1620338532214,"results":"81","hashOfConfig":"44"},{"size":1034,"mtime":1620425513570,"results":"82","hashOfConfig":"44"},{"size":3724,"mtime":1620425782586,"results":"83","hashOfConfig":"44"},{"size":2579,"mtime":1620425539768,"results":"84","hashOfConfig":"44"},{"size":374,"mtime":1620428249064,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"g8f8c4",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"168"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"168"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"88"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"88"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx",[],["194","195","196","197","198"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx",["199"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { auth, generateUserDocument } from '../firebase';\r\nimport { user } from '../types';\r\n\r\nexport const UserContext = createContext<{ user: user }>({\r\n    user: null,\r\n});\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UserProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState<{ user: user }>({\r\n        user: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (userAuth) => {\r\n            if (userAuth) {\r\n                const signedUser: any = await generateUserDocument(userAuth, null);\r\n                setCurrentUser({\r\n                    user: {\r\n                        uid: signedUser?.uid,\r\n                        email: signedUser?.email,\r\n                        username: signedUser?.username,\r\n                        avatar: signedUser?.avatar,\r\n                        description: signedUser?.description,\r\n                        darkTheme: signedUser?.darkTheme,\r\n                    },\r\n                });\r\n            } else {\r\n                setCurrentUser({ user: null });\r\n            }\r\n        });\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    return <UserContext.Provider value={currentUser}>{children}</UserContext.Provider>;\r\n};\r\n\r\nexport default UserProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx",["200"],"import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { auth } from '../logic/firebase';\r\n\r\nimport { UserContext } from '../logic/providers/userProvider';\r\n\r\nimport { PageHeader as PH, HeaderName, Navigation, NavItem } from '../design/styledComponents';\r\n\r\nconst PageHeader: React.FC = () => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const logOutHandler = (event: any) => {\r\n        event.preventDefault();\r\n        auth.signOut();\r\n    };\r\n\r\n    return (\r\n        <PH>\r\n            <HeaderName>\r\n                <Link to=\"/home\">patternRepository</Link>\r\n            </HeaderName>\r\n            <Navigation>\r\n                <NavItem>\r\n                    <Link to=\"/home\">Home</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/patterns\">Browse patterns</Link>\r\n                </NavItem>\r\n                <NavItem style={{ float: 'right' }}>\r\n                    <UncontrolledDropdown nav inNavbar>\r\n                        <DropdownToggle nav caret>\r\n                            {`Welcome ${user?.username}`}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                            <DropdownItem>\r\n                                <Link to={`/profile/${user?.uid}`}>Profile</Link>\r\n                            </DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem onClick={logOutHandler}>Log out</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                </NavItem>\r\n            </Navigation>\r\n        </PH>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx",["201","202","203","204","205","206","207","208"],"import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nimport firebaseConfig from './firebaseConfig';\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n} else {\r\n    firebase.app(); // if already initialized, use that one\r\n}\r\n\r\n// firebase.initializeApp();\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const storage = firebase.storage();\r\n\r\nconst getUserDocument = async (uid: any) => {\r\n    if (!uid) return null;\r\n    try {\r\n        const userDocument = await firestore.doc(`users/${uid}`).get();\r\n        // const userAvatar = await storage.ref(`/avatars/${uid}`)?.getDownloadURL();\r\n        return {\r\n            uid,\r\n            ...userDocument.data(),\r\n            avatar: null, // userAvatar,\r\n        };\r\n    } catch (error) {\r\n        console.error(error.code);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const generateUserDocument = async (user: any, additionalData: any) => {\r\n    if (!user) return {};\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if (!snapshot.exists) {\r\n        const { email } = user;\r\n        try {\r\n            await userRef.set({\r\n                username: user.username,\r\n                email,\r\n                ...additionalData,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error creating user document', error);\r\n        }\r\n    }\r\n    return getUserDocument(user.uid);\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx",["209"],"import React, { useState } from 'react';\r\nimport { auth, generateUserDocument } from '../../logic/firebase';\r\n\r\nimport { isEmail } from '../../logic/helperFunctions';\r\n\r\nimport {\r\n    SuccessButton,\r\n    Input,\r\n    Label,\r\n    FormGroup,\r\n    DangerAlert,\r\n    HelperText,\r\n} from '../../design/styledComponents';\r\n\r\nconst SignUp: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordRepeat, setPasswordRepeat] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const createUserWithEmailAndPasswordHandler = async (event: any) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\r\n            generateUserDocument(user, { username });\r\n        } catch (errorData) {\r\n            setError('Error Signing up with email and password');\r\n        }\r\n\r\n        setUsername('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>Username</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter username\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <HelperText>You can change your username later ^^</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter mail\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => {\r\n                        if (!isEmail(e.target.value)) {\r\n                            setError('This is not a valid email!');\r\n                        } else {\r\n                            setError(null);\r\n                        }\r\n                        setEmail(e.target.value);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <HelperText>Password has to have at least six characters</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Repeat password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Repeat password\"\r\n                    value={passwordRepeat}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPasswordRepeat(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={createUserWithEmailAndPasswordHandler}>\r\n                Sign up\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx",["210","211"],"import React, { useState, useCallback } from 'react';\r\nimport { auth } from '../../logic/firebase';\r\n\r\nimport { SuccessButton, Input, Label, FormGroup, DangerAlert } from '../../design/styledComponents';\r\n\r\nconst SignIn: React.FC = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const signInWithEmailAndPasswordHandler = useCallback(\r\n        (event: any) => {\r\n            event.preventDefault();\r\n            auth.signInWithEmailAndPassword(email, password).catch((errorData) => {\r\n                setError('Error signing in with password and email!');\r\n                console.error('Error signing in with password and email', errorData);\r\n            });\r\n        },\r\n        [email, password],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={signInWithEmailAndPasswordHandler}>\r\n                Sign in\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\nexport default SignIn;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx",["212","213"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\n\r\nimport useStorage from '../../logic/hooks/useStorage';\r\n\r\nimport { firestore } from '../../logic/firebase';\r\n\r\nimport {\r\n    Main,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    MarginItemDetail,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DangerAlert,\r\n    SuccessAlert,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n}\r\n\r\nconst ProfileEdit: React.FC<PropsType> = ({ openEdit }) => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [file, setFile] = useState<File | null>(null);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [saved, setSaved] = useState<boolean>(false);\r\n\r\n    const types = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\n    useEffect(() => {\r\n        let name = '';\r\n        let descriptionText = '';\r\n        if (user && user.username) {\r\n            name = user.username;\r\n        }\r\n        if (user && user.description) {\r\n            descriptionText = user.description;\r\n        }\r\n        setUsername(name);\r\n        setDescription(descriptionText);\r\n    }, [user]);\r\n\r\n    const { progress, url, uploadImage } = useStorage(file);\r\n\r\n    const handleImageChange = (selectedFile: File | null) => {\r\n        if (selectedFile) {\r\n            if (types.includes(selectedFile.type)) {\r\n                const maxAllowSize = 5 * 1024 * 1024;\r\n                if (selectedFile.size > maxAllowSize) {\r\n                    setError('Image is too big! Maximum size is 5MB.');\r\n                } else {\r\n                    setError(null);\r\n                    setFile(selectedFile);\r\n                }\r\n            } else {\r\n                setFile(null);\r\n                setError('Please use only select an image file (png or jpg)');\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateData = () => {\r\n        firestore\r\n            .collection(`users`)\r\n            .doc(`${user?.uid}`)\r\n            .update({\r\n                username,\r\n                description,\r\n            })\r\n            .then(() => {\r\n                setSaved(true);\r\n            })\r\n            .catch((errorData) => {\r\n                setError(errorData?.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Main>\r\n            <MarginItemDetail>\r\n                <ButtonRow>\r\n                    <CancelButton onClick={() => openEdit(false)} block={false}>\r\n                        Close\r\n                    </CancelButton>\r\n\r\n                    <SuccessButton onClick={() => updateData()} block={false}>\r\n                        Save\r\n                    </SuccessButton>\r\n                </ButtonRow>\r\n\r\n                {saved && <SuccessAlert>Your changes were saved!</SuccessAlert>}\r\n\r\n                {error && <DangerAlert>{error}</DangerAlert>}\r\n\r\n                <FormGroup>\r\n                    <Label>Profile picture</Label>\r\n                    {url && (\r\n                        <img\r\n                            style={{ width: '100px', height: '100px', objectFit: 'cover' }}\r\n                            src={url}\r\n                            alt=\"\"\r\n                        />\r\n                    )}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            handleImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                    {file && (\r\n                        <SuccessButton\r\n                            block={false}\r\n                            onClick={() => uploadImage('avatars', user?.uid ? user.uid : '')}\r\n                        >\r\n                            Save image{' '}\r\n                        </SuccessButton>\r\n                    )}\r\n                    {file && progress > 0 && progress < 100 && <p>{`${progress}% uploaded`}</p>}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>Username</Label>\r\n                    <Input block value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>{`Something about you <3`}</Label>\r\n                    <CKEditor\r\n                        editor={ClassicEditor}\r\n                        data={description}\r\n                        onChange={(event: any, editor: any) => {\r\n                            setDescription(editor.getData());\r\n                        }}\r\n                    />\r\n                </FormGroup>\r\n            </MarginItemDetail>\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default ProfileEdit;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx",["214","215","216","217"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx",["218"],"import { useState } from 'react';\r\n\r\nimport { storage } from '../firebase';\r\n\r\nconst useStorage = (file: File | null) => {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [url, setUrl] = useState<string | null>(null);\r\n\r\n    // runs every time the file value changes\r\n    const uploadImage = (storageName: string, pictureName: string) => {\r\n        if (file) {\r\n            // storage ref\r\n            const storageRef = storage.ref(`${storageName}/${pictureName}`);\r\n\r\n            storageRef.put(file).on(\r\n                'state_changed',\r\n                (snap) => {\r\n                    // track the upload progress\r\n                    const percentage = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                    setProgress(percentage);\r\n                },\r\n                (err) => {\r\n                    setError(err.message);\r\n                },\r\n                async () => {\r\n                    // get the public download img url\r\n                    const downloadUrl = await storageRef.getDownloadURL();\r\n\r\n                    // save the url to local state\r\n                    setUrl(downloadUrl);\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    return { progress, url, error, uploadImage };\r\n};\r\nexport default useStorage;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx",["219","220","221"],"import React, { useState, useMemo, useContext, useCallback, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport TagService from '../../logic/services/tagServices';\r\n\r\nimport {\r\n    patternToAdd,\r\n    fileWithUrl,\r\n    basicImage,\r\n    tag,\r\n    book,\r\n    tagToAdd,\r\n    pattern,\r\n} from '../../logic/types';\r\n\r\nimport multiSelectWithColour from '../../design/selectStyles';\r\n\r\nimport {\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DifficultyInput,\r\n    FormImageContainer,\r\n    IconButton,\r\n    DangerAlert,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    closeModal: () => void;\r\n    copyPattern: pattern | null;\r\n}\r\n\r\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\nconst AddPattern: React.FC<PropsType> = React.memo(({ closeModal, copyPattern }) => {\r\n    const { user } = useContext(UserContext);\r\n    const { allTags } = useContext(TagContext);\r\n    const { allBooks } = useContext(BookContext);\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [tags, setTags] = useState<tag[]>([]);\r\n    const [books, setBooks] = useState<book[]>([]);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>('');\r\n    const [difficulty, setDifficulty] = useState<number>(3);\r\n\r\n    const [newOpen, setNewOpen] = useState<boolean>(false);\r\n\r\n    const [copiedPatternPictures, setCopiedPatternPictures] = useState<basicImage[]>([]);\r\n    const [patternPictures, setPatternPictures] = useState<fileWithUrl[]>([]);\r\n    const [finishedWorkPictures, setFinishedWorkPictures] = useState<fileWithUrl[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const id = useMemo(\r\n        () =>\r\n            `${newOpen ? 'y' : ''}${(new Date().getTime() / 1000).toFixed(0)}${new Array(5)\r\n                .join()\r\n                .replace(/(.|$)/g, function () {\r\n                    return (Math.random() * 36)\r\n                        .toString(36)\r\n                        [Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\r\n                })}`,\r\n        [newOpen],\r\n    );\r\n\r\n    const allPossibleBooks = useMemo(\r\n        () => allBooks.filter((possibleBook) => possibleBook.owner === user?.uid),\r\n        [allBooks, user?.uid],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (copyPattern) {\r\n            setTitle(copyPattern?.title ? copyPattern.title : 'Untitled pattern');\r\n            setTags(copyPattern.tags);\r\n            setDescription(copyPattern?.description ? copyPattern.description : '');\r\n            setCopiedPatternPictures(copyPattern.patternImages);\r\n        }\r\n    }, [copyPattern]);\r\n\r\n    const HandlePatternImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setPatternPictures([\r\n                                    ...patternPictures,\r\n                                    { file: selectedFile, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, patternPictures],\r\n    );\r\n\r\n    const HandleWorkImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(\r\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\r\n                        );\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setFinishedWorkPictures([\r\n                                    ...finishedWorkPictures,\r\n                                    { file: selectedFile, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, finishedWorkPictures],\r\n    );\r\n\r\n    const removeCopiedPaternPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: basicImage[] = [\r\n                ...copiedPatternPictures.filter((_, i) => i !== index),\r\n            ];\r\n            setCopiedPatternPictures(newPictures);\r\n        },\r\n        [copiedPatternPictures],\r\n    );\r\n\r\n    const removePaternPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: fileWithUrl[] = [\r\n                ...patternPictures.filter((picture, i) => i !== index),\r\n            ];\r\n            const fileToRemove: fileWithUrl = patternPictures[index];\r\n            const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.file.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setPatternPictures(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        },\r\n        [id, patternPictures],\r\n    );\r\n\r\n    const removeWorkPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: fileWithUrl[] = [\r\n                ...finishedWorkPictures.filter((_, i) => i !== index),\r\n            ];\r\n            const fileToRemove: fileWithUrl = finishedWorkPictures[index];\r\n            const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.file.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setFinishedWorkPictures(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        },\r\n        [id, finishedWorkPictures],\r\n    );\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: patternPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            finishedWorkImages: finishedWorkPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            owner: user?.uid ? user.uid : null,\r\n            tags: tags.map((t) => t.id),\r\n            books: books.map((b) => b.id),\r\n            likes: 0,\r\n        };\r\n\r\n        PatternService.set(id, data)\r\n            .then(() => {\r\n                setNewOpen(true);\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    }, [\r\n        closeModal,\r\n        description,\r\n        difficulty,\r\n        finishedWorkPictures,\r\n        id,\r\n        patternPictures,\r\n        tags,\r\n        title,\r\n        books,\r\n        user?.uid,\r\n    ]);\r\n\r\n    const handleTagAddition = useCallback(() => {\r\n        if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        }\r\n    }, [newTag, tags]);\r\n\r\n    const handleCancel = useCallback(() => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        patternPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        finishedWorkPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            setNewOpen(true);\r\n            closeModal();\r\n        }\r\n    }, [closeModal, finishedWorkPictures, id, patternPictures]);\r\n\r\n    return (\r\n        <ItemDetail>\r\n            <ItemHeader>Add a new pattern</ItemHeader>\r\n\r\n            <FormGroup>\r\n                <Label>Title</Label>\r\n                <Input\r\n                    block\r\n                    name=\"patternTitle\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                            handleTagAddition();\r\n                            e.preventDefault();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Difficulty</Label>\r\n                <DifficultyInput\r\n                    block\r\n                    type=\"range\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    difficulty={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Books</Label>\r\n                <Select\r\n                    styles={multiSelectWithColour}\r\n                    options={allPossibleBooks}\r\n                    value={books}\r\n                    isMulti\r\n                    onChange={(e) => {\r\n                        setBooks([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Pattern pictures</Label>\r\n                <>\r\n                    {copiedPatternPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeCopiedPaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {patternPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.file.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Finished works</Label>\r\n                <>\r\n                    {finishedWorkPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.file.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <ButtonRow>\r\n                <CancelButton block={false} onClick={handleCancel}>\r\n                    Cancel\r\n                </CancelButton>\r\n\r\n                <SuccessButton block={false} onClick={handleSubmit}>\r\n                    Save\r\n                </SuccessButton>\r\n            </ButtonRow>\r\n        </ItemDetail>\r\n    );\r\n});\r\n\r\nAddPattern.displayName = 'AddPattern';\r\n\r\nexport default AddPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx",["222","223","224"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx",["225","226","227"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx",["228","229","230","231","232","233","234","235"],"import { firestore, auth } from '../firebase';\r\nimport { patternToAdd } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/patterns');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return [];\r\n};\r\n\r\nconst getAllOfUser = (uid: string) => {\r\n    return collectionRef.where('owner', '==', uid);\r\n};\r\n\r\nconst create = (data: patternToAdd) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst updateLikes = (id: string, value: number) => {\r\n    return collectionRef.doc(id).update({ likes: value });\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst PatternService = {\r\n    getAll,\r\n    getAllMine,\r\n    getAllOfUser,\r\n    set,\r\n    updateLikes,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default PatternService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx",["236","237","238"],"import React, { useState, useCallback, useContext, useMemo } from 'react';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport TagService from '../../logic/services/tagServices';\r\n\r\nimport {\r\n    pattern,\r\n    patternToAdd,\r\n    basicImage,\r\n    tag as tagType,\r\n    tagToAdd,\r\n    book,\r\n} from '../../logic/types';\r\n\r\nimport multiSelectWithColour from '../../design/selectStyles';\r\n\r\nimport {\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DifficultyInput,\r\n    FormImageContainer,\r\n    IconButton,\r\n    DangerAlert,\r\n    InvisibleIconButton,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n    closeModal: () => void;\r\n    currentPattern: pattern;\r\n}\r\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\nconst EditPattern: React.FC<PropsType> = React.memo(({ openEdit, closeModal, currentPattern }) => {\r\n    const { allTags } = useContext(TagContext);\r\n    const { allBooks } = useContext(BookContext);\r\n\r\n    const [title, setTitle] = useState<string>(currentPattern.title ? currentPattern.title : '');\r\n    const [tags, setTags] = useState<tagType[]>(currentPattern.tags ? currentPattern.tags : []);\r\n    const [books, setBooks] = useState<book[]>(currentPattern.books ? currentPattern.books : []);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>(\r\n        currentPattern.description ? currentPattern.description : '',\r\n    );\r\n    const [difficulty, setDifficulty] = useState<number>(\r\n        currentPattern.difficulty ? currentPattern.difficulty : 3,\r\n    );\r\n\r\n    const [patternImages, setPatternImages] = useState<basicImage[]>(\r\n        currentPattern.patternImages ? currentPattern.patternImages : [],\r\n    );\r\n    const [finishedWorkImages, setFinishedWorkImages] = useState<basicImage[]>(\r\n        currentPattern.finishedWorkImages ? currentPattern.finishedWorkImages : [],\r\n    );\r\n\r\n    const [newPatternImages, setNewPatternImages] = useState<basicImage[]>([]);\r\n    const [newFinishedWorkImages, setNewFinishedWorkImages] = useState<basicImage[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const { id } = currentPattern;\r\n\r\n    const allPossibleBooks = useMemo(\r\n        () =>\r\n            allBooks.filter(\r\n                (possibleBook) => possibleBook.owner === currentPattern.owner?.username,\r\n            ),\r\n        [allBooks, currentPattern.owner],\r\n    );\r\n\r\n    const HandlePatternImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setNewPatternImages([\r\n                                    ...newPatternImages,\r\n                                    { name: selectedFile.name, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, newPatternImages],\r\n    );\r\n\r\n    const HandleWorkImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(\r\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\r\n                        );\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setNewFinishedWorkImages([\r\n                                    ...newFinishedWorkImages,\r\n                                    { name: selectedFile.name, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, newFinishedWorkImages],\r\n    );\r\n\r\n    const removePaternPicture = useCallback(\r\n        (index: number) => {\r\n            if (index < patternImages.length) {\r\n                const newPictures: basicImage[] = [...patternImages.filter((_, i) => i !== index)];\r\n                setPatternImages(newPictures);\r\n\r\n                // TODO: check if not other patterns are using this picture;\r\n                /*    const fileToRemove: basicImage = patternImages[index];\r\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                         })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    }); */\r\n            } else {\r\n                const newPictures: basicImage[] = [\r\n                    ...newPatternImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = newPatternImages[index];\r\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setNewPatternImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            }\r\n        },\r\n        [id, newPatternImages, patternImages],\r\n    );\r\n\r\n    const removeWorkPicture = useCallback(\r\n        (index: number) => {\r\n            if (index < finishedWorkImages.length) {\r\n                const newPictures: basicImage[] = [\r\n                    ...finishedWorkImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = finishedWorkImages[index];\r\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setFinishedWorkImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            } else {\r\n                const newPictures: basicImage[] = [\r\n                    ...newFinishedWorkImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = newFinishedWorkImages[index];\r\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setNewFinishedWorkImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            }\r\n        },\r\n        [finishedWorkImages, id, newFinishedWorkImages],\r\n    );\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: [...patternImages, ...newPatternImages],\r\n            finishedWorkImages: [...finishedWorkImages, ...newFinishedWorkImages],\r\n            tags: tags.map((t) => t.id),\r\n            books: books.map((b) => b.id),\r\n            likes: 0,\r\n        };\r\n\r\n        PatternService.update(id, data)\r\n            .then(() => {\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    }, [\r\n        closeModal,\r\n        description,\r\n        difficulty,\r\n        finishedWorkImages,\r\n        id,\r\n        newFinishedWorkImages,\r\n        newPatternImages,\r\n        patternImages,\r\n        tags,\r\n        books,\r\n        title,\r\n    ]);\r\n\r\n    const handleTagAddition = useCallback(() => {\r\n        if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        }\r\n    }, [newTag, tags]);\r\n\r\n    const handleCancel = useCallback(() => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        newPatternImages.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        newFinishedWorkImages.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            openEdit(false);\r\n        }\r\n    }, [id, newFinishedWorkImages, newPatternImages, openEdit]);\r\n\r\n    const remove = useCallback(() => {\r\n        if (window.confirm('Are you sure you want to delete this pattern?')) {\r\n            PatternService.remove(id);\r\n            closeModal();\r\n        }\r\n    }, [id, closeModal]);\r\n\r\n    return (\r\n        <ItemDetail>\r\n            <ItemHeader>\r\n                Edit this pattern{' '}\r\n                <InvisibleIconButton style={{ fontSize: '1em' }} red onClick={remove}>\r\n                    <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                </InvisibleIconButton>\r\n            </ItemHeader>\r\n\r\n            <FormGroup>\r\n                <Label>Title</Label>\r\n                <Input\r\n                    block\r\n                    name=\"patternTitle\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                            handleTagAddition();\r\n                            e.preventDefault();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Difficulty</Label>\r\n                <DifficultyInput\r\n                    block\r\n                    type=\"range\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    difficulty={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Books</Label>\r\n                <Select\r\n                    styles={multiSelectWithColour}\r\n                    options={allPossibleBooks}\r\n                    value={books}\r\n                    isMulti\r\n                    onChange={(e) => {\r\n                        setBooks([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Pattern pictures</Label>\r\n                <>\r\n                    {patternImages.map((picture: basicImage, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {newPatternImages.map((picture: basicImage, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Finished works</Label>\r\n                <>\r\n                    {finishedWorkImages.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {newFinishedWorkImages.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <ButtonRow>\r\n                <CancelButton block={false} onClick={handleCancel}>\r\n                    Cancel\r\n                </CancelButton>\r\n\r\n                <SuccessButton block={false} onClick={handleSubmit}>\r\n                    Save\r\n                </SuccessButton>\r\n            </ButtonRow>\r\n        </ItemDetail>\r\n    );\r\n});\r\n\r\nEditPattern.displayName = 'EditPattern';\r\n\r\nexport default EditPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx",["239","240","241","242","243"],"import { firestore } from '../firebase';\nimport { tagToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/tags');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst create = (data: tagToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst TagService = {\n    getAll,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default TagService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx",["244","245"],"import React, { createContext, useState, useEffect } from 'react';\nimport TagService from '../services/tagServices';\nimport { tag } from '../types';\n\nexport const TagContext = createContext<{ allTags: tag[] }>({ allTags: [] });\n\ninterface PropsType {\n    children: JSX.Element;\n}\n\nconst TagProvider: React.FC<PropsType> = ({ children }) => {\n    const [allTags, setAllTags] = useState<{ allTags: tag[] }>({ allTags: [] });\n\n    const onTagDataChange = (items: any) => {\n        let loadedTags: tag[] = [];\n        loadedTags = [];\n\n        items.docs.forEach((item: any) => {\n            const { id: tagId } = item;\n            const data = item.data();\n\n            loadedTags.push({\n                id: tagId,\n                label: data.label,\n                value: tagId,\n            });\n        });\n\n        setAllTags({ allTags: loadedTags });\n    };\n\n    useEffect(() => {\n        const unsubscribe = TagService.getAll().orderBy('label', 'asc').onSnapshot(onTagDataChange);\n\n        return () => unsubscribe();\n    }, []);\n\n    return <TagContext.Provider value={allTags}>{children}</TagContext.Provider>;\n};\n\nexport default TagProvider;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx",["246","247","248","249","250","251","252"],"import { firestore, auth } from '../firebase';\r\nimport { bookInfo } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/book');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllOfUser = (uid: string) => {\r\n    return collectionRef.where('owner', '==', uid);\r\n};\r\n\r\nconst create = (data: bookInfo) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst BookService = {\r\n    getAll,\r\n    getAllMine,\r\n    getAllOfUser,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default BookService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx",["253","254"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport BookService from '../services/bookServices';\r\nimport { book } from '../types';\r\n\r\nexport const BookContext = createContext<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst BookProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [allBooks, setAllBooks] = useState<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\n    const onBookDataChange = (items: any) => {\r\n        let loadedBooks: book[] = [];\r\n        loadedBooks = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: bookId } = item;\r\n            const data = item.data();\r\n\r\n            loadedBooks.push({\r\n                id: bookId,\r\n                label: data.label,\r\n                value: bookId,\r\n                colour: data.colour,\r\n                owner: data.owner,\r\n            });\r\n        });\r\n\r\n        setAllBooks({ allBooks: loadedBooks });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = BookService.getAll()\r\n            .orderBy('label', 'asc')\r\n            .onSnapshot(onBookDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return <BookContext.Provider value={allBooks}>{children}</BookContext.Provider>;\r\n};\r\n\r\nexport default BookProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx",["255","256","257","258","259"],"export default {\r\n    multiValue: (provided: any, state: any) => {\r\n        const backgroundColor = `${state.data.colour}88`;\r\n\r\n        return {\r\n            ...provided,\r\n            backgroundColor,\r\n        };\r\n    },\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx",["260","261"],"export const isEmail = (email: string) =>\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n        email,\r\n    );\r\n\r\nexport const hi = () => {\r\n    return 'Hi';\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx",["262","263"],"import React from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n  FontAwesomeIcon\r\n} from '@fortawesome/react-fontawesome';\r\nimport ComponentToPrint from './toPrint';\r\n\r\nimport {\r\n  InvisibleIconButton,\r\n} from '../../design/styledComponents';\r\n\r\nclass Example extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactToPrint\r\n          trigger={() => {\r\n            // NOTE: could just as easily return <SomeComponent />. Do NOT pass an `onClick` prop\r\n            // to the root node of the returned component as it will be overwritten.\r\n            return <InvisibleIconButton type=\"button\">\r\n                <FontAwesomeIcon icon={['fa', 'print']} /></InvisibleIconButton>;\r\n          }}\r\n          content={() => this.componentRef}\r\n        />\r\n        <div style={{display: \"none\"}}>\r\n          <ComponentToPrint ref={el => (this.componentRef = el)} {...this.props}/> { /* eslint-disable-line no-return-assign */ } { /* eslint-disable-line react/jsx-props-no-spreading */ }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;",["264","265","266","267","268"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx",["269","270"],"import React from 'react';\r\n\r\nimport {\r\n  ItemHeader,\r\n  ItemLabel,\r\n  Difficulty,\r\n  Tag,\r\n  Description,\r\n  TagRow,\r\n} from '../../design/styledComponents';\r\n\r\nexport default class ComponentToPrint extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      pattern\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      tags,\r\n      difficulty,\r\n      books,\r\n      description,\r\n      patternImages,\r\n      finishedWorkImages\r\n    } = pattern;\r\n    return (\r\n      <div style={{padding: \"100px\"}}>\r\n        <ItemHeader>{title?.length > 0 ? title : 'Untitled'}</ItemHeader>\r\n\r\n          <TagRow>\r\n              {tags.map((tag) => (\r\n                  <Tag key={tag.id} colour=\"tag\">\r\n                      {' '}\r\n                      {tag.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <Difficulty difficulty={difficulty} />\r\n\r\n          <ItemLabel>Books</ItemLabel>\r\n          <TagRow>\r\n              {books?.map((book) => (\r\n                  <Tag key={book.id} colour={book.colour}>\r\n                      {' '}\r\n                      {book.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <ItemLabel>Description</ItemLabel>\r\n          <Description\r\n              dangerouslySetInnerHTML={{\r\n                  __html: description,\r\n              }}\r\n          />\r\n\r\n        <div style={{display: \"block\", pageBreakBefore: \"always\", paddingTop: \"100px\"}}>\r\n        <ItemLabel>Finished Works</ItemLabel>\r\n        <div>\r\n              {finishedWorkImages.map((picture) => (\r\n                <div key={picture.name} style={{display: \"inline\"}}>\r\n                  <img\r\n                      key={picture.name}\r\n                      src={picture.url}\r\n                      alt={picture.name}\r\n                      width=\"50%\"\r\n                      style={{display: \"inline\"}}\r\n                  />\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n              <div>\r\n                {patternImages.map((picture) => (\r\n                  <div key={picture.name} style={{height: \"100%\", paddingTop: \"100px\"}}>\r\n                  <img\r\n                    key={picture.name}\r\n                    src={picture.url}\r\n                    alt={picture.name}\r\n                    width=\"100%\"\r\n                    style={{display: \"block\", pageBreakBefore: \"auto\"}}\r\n                    />\r\n                </div>\r\n                ))}\r\n              </div>\r\n      </div>\r\n    );\r\n  }\r\n}","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx",["271","272"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx",["273","274"],"import React from 'react';\r\nimport {\r\n  Text,\r\n  Page,\r\n  Document,\r\n  View,\r\n  StyleSheet\r\n} from '@react-pdf/renderer';\r\n\r\nconst styles = StyleSheet.create( {\r\n  page: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#FFF',\r\n  },\r\n  section: {\r\n    margin: 10,\r\n    padding: 10,\r\n    display: 'block',\r\n  }\r\n} );\r\n\r\nexport default class ComponentToExport extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      pattern\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      tags,\r\n      difficulty,\r\n      books,\r\n      description,\r\n    } = pattern;\r\n    return (\r\n      <Document>\r\n        <Page size=\"A4\" style={styles.page}>\r\n          <View  style={styles.section}>\r\n            <Text>{title?.length > 0 ? title : 'Untitled'}</Text>\r\n              {tags.map((tag) => (\r\n                  <Text key={tag.id}>\r\n                      {' '}\r\n                      {tag.label}{' '}\r\n                  </Text>\r\n              ))}\r\n          </View>\r\n\r\n                      <View style={styles.section}>\r\n          <Text>{`Difficulty: ${difficulty}`}</Text>\r\n            </View>\r\n\r\n            <View style={styles.section}>\r\n                {books?.map((book) => (\r\n                    <Text key={book.id} colour={book.colour}>\r\n                        {' '}\r\n                        {book.label}{' '}\r\n                    </Text>\r\n                ))}\r\n            </View>\r\n\r\n            <View style={styles.section}>\r\n            <Text>Description</Text>\r\n            <Text>{description}</Text>\r\n        </View>\r\n\r\n        </Page>\r\n      </Document>\r\n    );\r\n  }\r\n}","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\usersProvider.tsx",["275","276"],"import React, { createContext, useState, useEffect } from 'react';\nimport UserService from '../services/userServices';\nimport { userInfo } from '../types';\n\nexport const UsersContext = createContext<{ allUsers: userInfo[] }>({ allUsers: [] });\n\ninterface PropsType {\n    children: JSX.Element;\n}\n\nconst UsersProvider: React.FC<PropsType> = ({ children }) => {\n    const [allUsers, setAllUsers] = useState<{ allUsers: userInfo[] }>({ allUsers: [] });\n\n    const onUserDataChange = (items: any) => {\n        let loadedUsers: userInfo[] = [];\n        loadedUsers = [];\n\n        items.docs.forEach((item: any) => {\n            const { id: userId } = item;\n            const data = item.data();\n\n            loadedUsers.push({\n                uid: userId,\n                username: data.username,\n                avatar: data.avatar,\n                email: data.email,\n                description: data.description,\n                darkTheme: data.darkTheme,\n            });\n        });\n\n        setAllUsers({ allUsers: loadedUsers });\n    };\n\n    useEffect(() => {\n        const unsubscribe = UserService.getAll().onSnapshot(onUserDataChange);\n\n        return () => unsubscribe();\n    }, []);\n\n    return <UsersContext.Provider value={allUsers}>{children}</UsersContext.Provider>;\n};\n\nexport default UsersProvider;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\userServices.tsx",["277"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/users');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst UserService = {\r\n    getAll,\r\n};\r\n\r\nexport default UserService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\likedPatternsServices.tsx",["278","279"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/likedPatterns');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst setLiked = (id: string, value: string[]) => {\r\n    return collectionRef.doc(id).set({ patterns: value });\r\n};\r\n\r\nconst LikedPatternsService = {\r\n    getAll,\r\n    setLiked,\r\n};\r\n\r\nexport default LikedPatternsService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\bookContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\viewBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\editBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\followedUsersService.tsx",["280","281"],{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":21,"column":35,"nodeType":"294","messageId":"295","endLine":21,"endColumn":38,"suggestions":"296"},{"ruleId":"292","severity":1,"message":"293","line":13,"column":35,"nodeType":"294","messageId":"295","endLine":13,"endColumn":38,"suggestions":"297"},{"ruleId":"292","severity":1,"message":"293","line":19,"column":37,"nodeType":"294","messageId":"295","endLine":19,"endColumn":40,"suggestions":"298"},{"ruleId":"299","severity":1,"message":"300","line":30,"column":9,"nodeType":"301","messageId":"302","endLine":30,"endColumn":22},{"ruleId":"303","severity":1,"message":"304","line":35,"column":37,"nodeType":"305","messageId":"306","endLine":35,"endColumn":78},{"ruleId":"303","severity":1,"message":"307","line":35,"column":44,"nodeType":"308","messageId":"309","endLine":35,"endColumn":53},{"ruleId":"292","severity":1,"message":"293","line":35,"column":50,"nodeType":"294","messageId":"295","endLine":35,"endColumn":53,"suggestions":"310"},{"ruleId":"303","severity":1,"message":"311","line":35,"column":55,"nodeType":"308","messageId":"309","endLine":35,"endColumn":74},{"ruleId":"292","severity":1,"message":"293","line":35,"column":71,"nodeType":"294","messageId":"295","endLine":35,"endColumn":74,"suggestions":"312"},{"ruleId":"299","severity":1,"message":"300","line":48,"column":13,"nodeType":"301","messageId":"302","endLine":48,"endColumn":26},{"ruleId":"292","severity":1,"message":"293","line":23,"column":65,"nodeType":"294","messageId":"295","endLine":23,"endColumn":68,"suggestions":"313"},{"ruleId":"292","severity":1,"message":"293","line":13,"column":17,"nodeType":"294","messageId":"295","endLine":13,"endColumn":20,"suggestions":"314"},{"ruleId":"299","severity":1,"message":"300","line":17,"column":17,"nodeType":"301","messageId":"302","endLine":17,"endColumn":30},{"ruleId":"292","severity":1,"message":"293","line":141,"column":43,"nodeType":"294","messageId":"295","endLine":141,"endColumn":46,"suggestions":"315"},{"ruleId":"292","severity":1,"message":"293","line":141,"column":56,"nodeType":"294","messageId":"295","endLine":141,"endColumn":59,"suggestions":"316"},{"ruleId":"292","severity":1,"message":"293","line":71,"column":17,"nodeType":"294","messageId":"295","endLine":71,"endColumn":20,"suggestions":"317"},{"ruleId":"292","severity":1,"message":"293","line":75,"column":39,"nodeType":"294","messageId":"295","endLine":75,"endColumn":42,"suggestions":"318"},{"ruleId":"292","severity":1,"message":"293","line":123,"column":17,"nodeType":"294","messageId":"295","endLine":123,"endColumn":20,"suggestions":"319"},{"ruleId":"292","severity":1,"message":"293","line":135,"column":56,"nodeType":"294","messageId":"295","endLine":135,"endColumn":59,"suggestions":"320"},{"ruleId":"303","severity":1,"message":"304","line":5,"column":20,"nodeType":"305","messageId":"306","endLine":5,"endColumn":42},{"ruleId":"321","severity":1,"message":"322","line":72,"column":36,"nodeType":"323","messageId":"324","endLine":72,"endColumn":45},{"ruleId":"292","severity":1,"message":"293","line":367,"column":39,"nodeType":"294","messageId":"295","endLine":367,"endColumn":42,"suggestions":"325"},{"ruleId":"292","severity":1,"message":"293","line":367,"column":52,"nodeType":"294","messageId":"295","endLine":367,"endColumn":55,"suggestions":"326"},{"ruleId":"327","severity":2,"message":"328","line":1,"column":13,"nodeType":"308","messageId":"329","endLine":1,"endColumn":17},{"ruleId":"327","severity":2,"message":"330","line":3,"column":6,"nodeType":"308","messageId":"329","endLine":3,"endColumn":14},{"ruleId":"327","severity":2,"message":"331","line":11,"column":13,"nodeType":"308","messageId":"329","endLine":11,"endColumn":20},{"ruleId":"292","severity":1,"message":"293","line":45,"column":21,"nodeType":"294","messageId":"295","endLine":45,"endColumn":24,"suggestions":"332"},{"ruleId":"292","severity":1,"message":"293","line":49,"column":43,"nodeType":"294","messageId":"295","endLine":49,"endColumn":46,"suggestions":"333"},{"ruleId":"292","severity":1,"message":"293","line":81,"column":55,"nodeType":"294","messageId":"295","endLine":81,"endColumn":58,"suggestions":"334"},{"ruleId":"303","severity":1,"message":"304","line":6,"column":16,"nodeType":"305","messageId":"306","endLine":6,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":10,"column":20,"nodeType":"305","messageId":"306","endLine":10,"endColumn":25},{"ruleId":"303","severity":1,"message":"304","line":17,"column":22,"nodeType":"305","messageId":"306","endLine":17,"endColumn":38},{"ruleId":"303","severity":1,"message":"304","line":21,"column":16,"nodeType":"305","messageId":"306","endLine":21,"endColumn":39},{"ruleId":"303","severity":1,"message":"304","line":25,"column":16,"nodeType":"305","messageId":"306","endLine":25,"endColumn":52},{"ruleId":"303","severity":1,"message":"304","line":29,"column":13,"nodeType":"305","messageId":"306","endLine":29,"endColumn":49},{"ruleId":"303","severity":1,"message":"304","line":33,"column":21,"nodeType":"305","messageId":"306","endLine":33,"endColumn":51},{"ruleId":"303","severity":1,"message":"304","line":37,"column":16,"nodeType":"305","messageId":"306","endLine":37,"endColumn":31},{"ruleId":"335","severity":1,"message":"336","line":301,"column":13,"nodeType":"337","messageId":"302","endLine":301,"endColumn":76},{"ruleId":"292","severity":1,"message":"293","line":383,"column":39,"nodeType":"294","messageId":"295","endLine":383,"endColumn":42,"suggestions":"338"},{"ruleId":"292","severity":1,"message":"293","line":383,"column":52,"nodeType":"294","messageId":"295","endLine":383,"endColumn":55,"suggestions":"339"},{"ruleId":"303","severity":1,"message":"304","line":6,"column":16,"nodeType":"305","messageId":"306","endLine":6,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":10,"column":16,"nodeType":"305","messageId":"306","endLine":10,"endColumn":35},{"ruleId":"303","severity":1,"message":"304","line":14,"column":16,"nodeType":"305","messageId":"306","endLine":14,"endColumn":48},{"ruleId":"303","severity":1,"message":"304","line":18,"column":13,"nodeType":"305","messageId":"306","endLine":18,"endColumn":45},{"ruleId":"303","severity":1,"message":"304","line":22,"column":16,"nodeType":"305","messageId":"306","endLine":22,"endColumn":31},{"ruleId":"292","severity":1,"message":"293","line":14,"column":37,"nodeType":"294","messageId":"295","endLine":14,"endColumn":40,"suggestions":"340"},{"ruleId":"292","severity":1,"message":"293","line":18,"column":35,"nodeType":"294","messageId":"295","endLine":18,"endColumn":38,"suggestions":"341"},{"ruleId":"303","severity":1,"message":"304","line":6,"column":16,"nodeType":"305","messageId":"306","endLine":6,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":10,"column":20,"nodeType":"305","messageId":"306","endLine":10,"endColumn":25},{"ruleId":"303","severity":1,"message":"304","line":17,"column":22,"nodeType":"305","messageId":"306","endLine":17,"endColumn":38},{"ruleId":"303","severity":1,"message":"304","line":21,"column":16,"nodeType":"305","messageId":"306","endLine":21,"endColumn":35},{"ruleId":"303","severity":1,"message":"304","line":25,"column":16,"nodeType":"305","messageId":"306","endLine":25,"endColumn":48},{"ruleId":"303","severity":1,"message":"304","line":29,"column":13,"nodeType":"305","messageId":"306","endLine":29,"endColumn":45},{"ruleId":"303","severity":1,"message":"304","line":33,"column":16,"nodeType":"305","messageId":"306","endLine":33,"endColumn":31},{"ruleId":"292","severity":1,"message":"293","line":14,"column":38,"nodeType":"294","messageId":"295","endLine":14,"endColumn":41,"suggestions":"342"},{"ruleId":"292","severity":1,"message":"293","line":18,"column":35,"nodeType":"294","messageId":"295","endLine":18,"endColumn":38,"suggestions":"343"},{"ruleId":"303","severity":1,"message":"304","line":2,"column":17,"nodeType":"305","messageId":"306","endLine":2,"endColumn":47},{"ruleId":"303","severity":1,"message":"344","line":2,"column":18,"nodeType":"308","messageId":"309","endLine":2,"endColumn":31},{"ruleId":"292","severity":1,"message":"293","line":2,"column":28,"nodeType":"294","messageId":"295","endLine":2,"endColumn":31,"suggestions":"345"},{"ruleId":"303","severity":1,"message":"346","line":2,"column":33,"nodeType":"308","messageId":"309","endLine":2,"endColumn":43},{"ruleId":"292","severity":1,"message":"293","line":2,"column":40,"nodeType":"294","messageId":"295","endLine":2,"endColumn":43,"suggestions":"347"},{"ruleId":"303","severity":1,"message":"304","line":1,"column":24,"nodeType":"305","messageId":"306","endLine":1,"endColumn":42},{"ruleId":"303","severity":1,"message":"304","line":6,"column":19,"nodeType":"305","messageId":"306","endLine":6,"endColumn":24},{"ruleId":"303","severity":1,"message":"348","line":13,"column":16,"nodeType":"308","messageId":"349","endLine":13,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":18,"column":3,"nodeType":"323","messageId":"306","endLine":18,"endColumn":11},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"303","severity":1,"message":"348","line":13,"column":16,"nodeType":"308","messageId":"349","endLine":13,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":19,"column":3,"nodeType":"323","messageId":"306","endLine":19,"endColumn":11},{"ruleId":"303","severity":1,"message":"348","line":24,"column":16,"nodeType":"308","messageId":"349","endLine":24,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":29,"column":3,"nodeType":"323","messageId":"306","endLine":29,"endColumn":11},{"ruleId":"303","severity":1,"message":"348","line":23,"column":16,"nodeType":"308","messageId":"349","endLine":23,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":28,"column":3,"nodeType":"323","messageId":"306","endLine":28,"endColumn":11},{"ruleId":"292","severity":1,"message":"293","line":14,"column":38,"nodeType":"294","messageId":"295","endLine":14,"endColumn":41,"suggestions":"350"},{"ruleId":"292","severity":1,"message":"293","line":18,"column":35,"nodeType":"294","messageId":"295","endLine":18,"endColumn":38,"suggestions":"351"},{"ruleId":"303","severity":1,"message":"304","line":5,"column":16,"nodeType":"305","messageId":"306","endLine":5,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":5,"column":16,"nodeType":"305","messageId":"306","endLine":5,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":9,"column":18,"nodeType":"305","messageId":"306","endLine":9,"endColumn":50},{"ruleId":"303","severity":1,"message":"304","line":5,"column":16,"nodeType":"305","messageId":"306","endLine":5,"endColumn":21},{"ruleId":"303","severity":1,"message":"304","line":9,"column":21,"nodeType":"305","messageId":"306","endLine":9,"endColumn":53},"lines-around-directive",["352"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["353","354"],["355","356"],["357","358"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'user' should be typed with a non-any type.","Identifier","anyTypedArg",["359","360"],"Argument 'additionalData' should be typed with a non-any type.",["361","362"],["363","364"],["365","366"],["367","368"],["369","370"],["371","372"],["373","374"],["375","376"],["377","378"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed",["379","380"],["381","382"],"@typescript-eslint/naming-convention","Type Alias name `user` must match one of the following formats: PascalCase","doesNotMatchFormat","Type Alias name `userInfo` must match one of the following formats: PascalCase","Type Alias name `picture` must match one of the following formats: PascalCase",["383","384"],["385","386"],["387","388"],"no-alert","Unexpected confirm.","CallExpression",["389","390"],["391","392"],["393","394"],["395","396"],["397","398"],["399","400"],"Argument 'provided' should be typed with a non-any type.",["401","402"],"Argument 'state' should be typed with a non-any type.",["403","404"],"Argument 'props' should be typed.","missingArgType",["405","406"],["407","408"],"padding-line-between-statements",{"messageId":"409","fix":"410","desc":"411"},{"messageId":"412","fix":"413","desc":"414"},{"messageId":"409","fix":"415","desc":"411"},{"messageId":"412","fix":"416","desc":"414"},{"messageId":"409","fix":"417","desc":"411"},{"messageId":"412","fix":"418","desc":"414"},{"messageId":"409","fix":"419","desc":"411"},{"messageId":"412","fix":"420","desc":"414"},{"messageId":"409","fix":"421","desc":"411"},{"messageId":"412","fix":"422","desc":"414"},{"messageId":"409","fix":"423","desc":"411"},{"messageId":"412","fix":"424","desc":"414"},{"messageId":"409","fix":"425","desc":"411"},{"messageId":"412","fix":"426","desc":"414"},{"messageId":"409","fix":"427","desc":"411"},{"messageId":"412","fix":"428","desc":"414"},{"messageId":"409","fix":"429","desc":"411"},{"messageId":"412","fix":"430","desc":"414"},{"messageId":"409","fix":"431","desc":"411"},{"messageId":"412","fix":"432","desc":"414"},{"messageId":"409","fix":"433","desc":"411"},{"messageId":"412","fix":"434","desc":"414"},{"messageId":"409","fix":"435","desc":"411"},{"messageId":"412","fix":"436","desc":"414"},{"messageId":"409","fix":"437","desc":"411"},{"messageId":"412","fix":"438","desc":"414"},{"messageId":"409","fix":"439","desc":"411"},{"messageId":"412","fix":"440","desc":"414"},{"messageId":"409","fix":"441","desc":"411"},{"messageId":"412","fix":"442","desc":"414"},{"messageId":"409","fix":"443","desc":"411"},{"messageId":"412","fix":"444","desc":"414"},{"messageId":"409","fix":"445","desc":"411"},{"messageId":"412","fix":"446","desc":"414"},{"messageId":"409","fix":"447","desc":"411"},{"messageId":"412","fix":"448","desc":"414"},{"messageId":"409","fix":"449","desc":"411"},{"messageId":"412","fix":"450","desc":"414"},{"messageId":"409","fix":"451","desc":"411"},{"messageId":"412","fix":"452","desc":"414"},{"messageId":"409","fix":"453","desc":"411"},{"messageId":"412","fix":"454","desc":"414"},{"messageId":"409","fix":"455","desc":"411"},{"messageId":"412","fix":"456","desc":"414"},{"messageId":"409","fix":"457","desc":"411"},{"messageId":"412","fix":"458","desc":"414"},{"messageId":"409","fix":"459","desc":"411"},{"messageId":"412","fix":"460","desc":"414"},{"messageId":"409","fix":"461","desc":"411"},{"messageId":"412","fix":"462","desc":"414"},{"messageId":"409","fix":"463","desc":"411"},{"messageId":"412","fix":"464","desc":"414"},{"messageId":"409","fix":"465","desc":"411"},{"messageId":"412","fix":"466","desc":"414"},{"messageId":"409","fix":"467","desc":"411"},{"messageId":"412","fix":"468","desc":"414"},"suggestUnknown",{"range":"469","text":"470"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"469","text":"471"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"472","text":"470"},{"range":"472","text":"471"},{"range":"473","text":"470"},{"range":"473","text":"471"},{"range":"474","text":"470"},{"range":"474","text":"471"},{"range":"475","text":"470"},{"range":"475","text":"471"},{"range":"476","text":"470"},{"range":"476","text":"471"},{"range":"477","text":"470"},{"range":"477","text":"471"},{"range":"478","text":"470"},{"range":"478","text":"471"},{"range":"479","text":"470"},{"range":"479","text":"471"},{"range":"480","text":"470"},{"range":"480","text":"471"},{"range":"481","text":"470"},{"range":"481","text":"471"},{"range":"482","text":"470"},{"range":"482","text":"471"},{"range":"483","text":"470"},{"range":"483","text":"471"},{"range":"484","text":"470"},{"range":"484","text":"471"},{"range":"485","text":"470"},{"range":"485","text":"471"},{"range":"486","text":"470"},{"range":"486","text":"471"},{"range":"487","text":"470"},{"range":"487","text":"471"},{"range":"488","text":"470"},{"range":"488","text":"471"},{"range":"489","text":"470"},{"range":"489","text":"471"},{"range":"490","text":"470"},{"range":"490","text":"471"},{"range":"491","text":"470"},{"range":"491","text":"471"},{"range":"492","text":"470"},{"range":"492","text":"471"},{"range":"493","text":"470"},{"range":"493","text":"471"},{"range":"494","text":"470"},{"range":"494","text":"471"},{"range":"495","text":"470"},{"range":"495","text":"471"},{"range":"496","text":"470"},{"range":"496","text":"471"},{"range":"497","text":"470"},{"range":"497","text":"471"},{"range":"498","text":"470"},{"range":"498","text":"471"},[629,632],"unknown","never",[513,516],[522,525],[1002,1005],[1023,1026],[692,695],[479,482],[4722,4725],[4735,4738],[3009,3012],[3143,3146],[4836,4839],[5313,5316],[12908,12911],[12921,12924],[1580,1583],[1726,1729],[3107,3110],[14083,14086],[14096,14099],[460,463],[566,569],[487,490],[600,603],[45,48],[57,60],[488,491],[601,604]]