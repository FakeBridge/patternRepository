[{"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx":"1","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx":"2","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx":"3","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx":"4","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx":"5","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx":"6","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx":"7","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx":"8","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx":"9","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx":"10","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx":"11","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx":"12","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx":"13","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx":"14","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx":"15","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx":"16","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx":"17","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx":"18","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx":"19"},{"size":294,"mtime":1617273324544,"results":"20","hashOfConfig":"21"},{"size":275,"mtime":1617273014367,"results":"22","hashOfConfig":"21"},{"size":919,"mtime":1617573399682,"results":"23","hashOfConfig":"21"},{"size":1362,"mtime":1617135087444,"results":"24","hashOfConfig":"21"},{"size":1835,"mtime":1617273068954,"results":"25","hashOfConfig":"21"},{"size":1498,"mtime":1617283929680,"results":"26","hashOfConfig":"21"},{"size":1592,"mtime":1616794887874,"results":"27","hashOfConfig":"21"},{"size":142,"mtime":1616971830312,"results":"28","hashOfConfig":"21"},{"size":439,"mtime":1616971830315,"results":"29","hashOfConfig":"21"},{"size":2157,"mtime":1617273200629,"results":"30","hashOfConfig":"21"},{"size":404,"mtime":1617134952745,"results":"31","hashOfConfig":"21"},{"size":1337,"mtime":1617273179795,"results":"32","hashOfConfig":"21"},{"size":4504,"mtime":1617573617711,"results":"33","hashOfConfig":"21"},{"size":2941,"mtime":1617273160163,"results":"34","hashOfConfig":"21"},{"size":1323,"mtime":1617573583647,"results":"35","hashOfConfig":"21"},{"size":840,"mtime":1617577473181,"results":"36","hashOfConfig":"21"},{"size":9354,"mtime":1617577665164,"results":"37","hashOfConfig":"21"},{"size":196,"mtime":1617283949558,"results":"38","hashOfConfig":"21"},{"size":1579,"mtime":1617579567318,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"g8f8c4",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx",[],["86","87","88","89","90"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx",["91"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { auth, generateUserDocument } from '../firebase';\r\nimport { user } from '../types';\r\n\r\nexport const UserContext = createContext<{ user: user }>({\r\n    user: null,\r\n});\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UserProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState<{ user: user }>({\r\n        user: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (userAuth) => {\r\n            if (userAuth) {\r\n                const signedUser: any = await generateUserDocument(userAuth, null);\r\n                setCurrentUser({\r\n                    user: {\r\n                        uid: signedUser?.uid,\r\n                        email: signedUser?.email,\r\n                        username: signedUser?.username,\r\n                        avatar: signedUser?.avatar,\r\n                        description: signedUser?.description,\r\n                    },\r\n                });\r\n            } else {\r\n                setCurrentUser({ user: null });\r\n            }\r\n        });\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    return <UserContext.Provider value={currentUser}>{children}</UserContext.Provider>;\r\n};\r\n\r\nexport default UserProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx",["92"],"import React, { useContext } from 'react';\nimport {\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n} from 'reactstrap';\nimport { auth } from '../logic/firebase';\n\nimport { UserContext } from '../logic/providers/userProvider';\n\nconst PageHeader: React.FC = () => {\n    const { user } = useContext(UserContext);\n\n    const logOutHandler = (event: any) => {\n        event.preventDefault();\n        auth.signOut();\n    };\n\n    return (\n        <div>\n            <Navbar color=\"light\" light expand=\"md\">\n                <NavbarBrand href=\"/\">patternRepository</NavbarBrand>\n\n                <Nav className=\"\" navbar style={{ width: '-webkit-fill-available' }}>\n                    <NavItem>\n                        <NavLink href=\"/\">Home</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"/patterns\">Browse patterns</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"/smth\">Smth</NavLink>\n                    </NavItem>\n                    <UncontrolledDropdown nav inNavbar style={{ marginLeft: 'auto' }}>\n                        <DropdownToggle nav caret>\n                            {`Welcome ${user?.username}`}\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            <DropdownItem href={`/profile/${user?.uid}`}>Profile</DropdownItem>\n                            <DropdownItem divider />\n                            <DropdownItem onClick={logOutHandler}>Log out</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                </Nav>\n            </Navbar>\n        </div>\n    );\n};\n\nexport default PageHeader;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx",["93","94","95","96","97","98","99","100"],"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nimport firebaseConfig from './firebaseConfig';\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n} else {\n    firebase.app(); // if already initialized, use that one\n}\n\n// firebase.initializeApp();\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storage = firebase.storage();\n\nconst getUserDocument = async (uid: any) => {\n    if (!uid) return null;\n    try {\n        const userDocument = await firestore.doc(`users/${uid}`).get();\n        const userAvatar = await storage.ref(`/avatars/${uid}`).getDownloadURL();\n        return {\n            uid,\n            ...userDocument.data(),\n            avatar: userAvatar,\n        };\n    } catch (error) {\n        console.error('Error fetching user', error);\n        return null;\n    }\n};\n\nexport const generateUserDocument = async (user: any, additionalData: any) => {\n    if (!user) return {};\n    const userRef = firestore.doc(`users/${user.uid}`);\n    const snapshot = await userRef.get();\n    if (!snapshot.exists) {\n        const { email } = user;\n        try {\n            await userRef.set({\n                username: user.username,\n                email,\n                ...additionalData,\n            });\n        } catch (error) {\n            console.error('Error creating user document', error);\n        }\n    }\n    return getUserDocument(user.uid);\n};\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx",["101"],"import React from 'react';\nimport { Button, Input, Label } from 'reactstrap';\nimport { auth, generateUserDocument } from '../../logic/firebase';\n\nconst SignUp: React.FC = () => {\n    const [username, setUsername] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [password, setPassword] = React.useState('');\n    const [passwordRepeat, setPasswordRepeat] = React.useState('');\n\n    const [error, setError] = React.useState<string | null>(null);\n\n    const createUserWithEmailAndPasswordHandler = async (event: any) => {\n        event.preventDefault();\n        try {\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\n            generateUserDocument(user, { username });\n        } catch (errorData) {\n            setError('Error Signing up with email and password');\n        }\n\n        setUsername('');\n        setEmail('');\n        setPassword('');\n        setPasswordRepeat('');\n        event.preventDefault();\n    };\n\n    return (\n        <div>\n            <Label>Username</Label>\n            <Input\n                placeholder=\"Enter username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n            />\n            <Label>E-mail</Label>\n            <Input\n                placeholder=\"Enter mail\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n            />\n            <Label>Password</Label>\n            <Input\n                placeholder=\"Enter password\"\n                value={password}\n                type=\"password\"\n                onChange={(e) => setPassword(e.target.value)}\n            />\n            <Label>Repeat password</Label>\n            <Input\n                placeholder=\"Repeat password\"\n                value={passwordRepeat}\n                type=\"password\"\n                onChange={(e) => setPasswordRepeat(e.target.value)}\n            />\n\n            <p>{error}</p>\n            <Button block onClick={createUserWithEmailAndPasswordHandler}>\n                Sign up\n            </Button>\n        </div>\n    );\n};\n\nexport default SignUp;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx",["102","103"],"import React from 'react';\nimport { Button, Input, Label } from 'reactstrap';\nimport { auth } from '../../logic/firebase';\n\nconst SignIn: React.FC = () => {\n    const [email, setEmail] = React.useState('');\n    const [password, setPassword] = React.useState('');\n\n    const [error, setError] = React.useState<string | null>(null);\n\n    const signInWithEmailAndPasswordHandler = (event: any) => {\n        event.preventDefault();\n        auth.signInWithEmailAndPassword(email, password).catch((errorData) => {\n            setError('Error signing in with password and email!');\n            console.error('Error signing in with password and email', errorData);\n        });\n    };\n\n    return (\n        <div>\n            <Label>E-mail</Label>\n            <Input\n                placeholder=\"Enter email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n            />\n            <Label>password</Label>\n            <Input\n                placeholder=\"Enter password\"\n                value={password}\n                type=\"password\"\n                onChange={(e) => setPassword(e.target.value)}\n            />\n            <p>{error}</p>\n            <Button block onClick={signInWithEmailAndPasswordHandler}>\n                Sign in\n            </Button>\n        </div>\n    );\n};\nexport default SignIn;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx",["104"],"import { useState } from 'react';\n\nimport { storage } from '../firebase';\n\nconst useStorage = (file: File | null) => {\n    const [progress, setProgress] = useState<number>(0);\n    const [error, setError] = useState<string | null>(null);\n    const [url, setUrl] = useState<string | null>(null);\n\n    // runs every time the file value changes\n    const uploadImage = (storageName: string, pictureName: string) => {\n        if (file) {\n            // storage ref\n            const storageRef = storage.ref(`${storageName}/${pictureName}`);\n\n            storageRef.put(file).on(\n                'state_changed',\n                (snap) => {\n                    // track the upload progress\n                    const percentage = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\n                    setProgress(percentage);\n                },\n                (err) => {\n                    setError(err.message);\n                },\n                async () => {\n                    // get the public download img url\n                    const downloadUrl = await storageRef.getDownloadURL();\n\n                    // save the url to local state\n                    setUrl(downloadUrl);\n                },\n            );\n        }\n    };\n\n    return { progress, url, error, uploadImage };\n};\nexport default useStorage;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx",["105","106","107"],"import React, { useState, useMemo, useContext } from 'react';\nimport { Button, FormGroup, Input, Label } from 'reactstrap';\nimport { UserContext } from '../../logic/providers/userProvider';\n\nimport { firestore, storage } from '../../logic/firebase';\n\ninterface PropsType {\n    closeModal: () => void;\n}\n\nconst PatternList: React.FC<PropsType> = ({ closeModal }) => {\n    const { user } = useContext(UserContext);\n\n    const [title, setTitle] = useState<string | number | readonly string[] | undefined>('');\n    const [tags, setTags] = useState<any>([]);\n    const [description, setDescription] = useState<string | number | readonly string[] | undefined>(\n        '',\n    );\n    const [difficulty, setDifficulty] = useState<string | number | readonly string[] | undefined>(\n        3,\n    );\n\n    const [newOpen, setNewOpen] = useState<boolean>(false);\n\n    const [patternPictures, setPatternPictures] = useState<File[]>([]);\n    const [finishedWorkPictures, setFinishedWorkPictures] = useState<File[]>([]);\n\n    const [error, setError] = useState<string | null>(null);\n\n    const imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\n\n    const id = useMemo(\n        () =>\n            `${newOpen ? 'y' : ''}${(new Date().getTime() / 1000).toFixed(0)}${new Array(5)\n                .join()\n                .replace(/(.|$)/g, function () {\n                    return (Math.random() * 36)\n                        .toString(36)\n                        [Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\n                })}`,\n        [newOpen],\n    );\n\n    console.log(id);\n\n    const HandlePatternImageChange = (selectedFile: File | null) => {\n        if (selectedFile) {\n            if (imageTypes.includes(selectedFile.type)) {\n                const maxAllowSize = 5 * 1024 * 1024;\n                if (selectedFile.size > maxAllowSize) {\n                    setError('Image is too big! Maximum size is 5MB.');\n                } else {\n                    const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\n\n                    storageRef.put(selectedFile).on(\n                        'state_changed',\n                        () => {},\n                        (err) => {\n                            setError(err.message);\n                        },\n                    );\n                    setPatternPictures([...patternPictures, selectedFile]);\n                }\n            } else {\n                setError('Please use only select an image file (png or jpg)');\n            }\n        }\n    };\n\n    const HandleWorkImageChange = (selectedFile: File | null) => {\n        if (selectedFile) {\n            if (imageTypes.includes(selectedFile.type)) {\n                const maxAllowSize = 5 * 1024 * 1024;\n                if (selectedFile.size > maxAllowSize) {\n                    setError('Image is too big! Maximum size is 5MB.');\n                } else {\n                    const storageRef = storage.ref(`finishedWorkImages/${id}/${selectedFile.name}`);\n\n                    storageRef.put(selectedFile).on(\n                        'state_changed',\n                        () => {},\n                        (err) => {\n                            setError(err.message);\n                        },\n                    );\n\n                    setFinishedWorkPictures([...finishedWorkPictures, selectedFile]);\n                }\n            } else {\n                setError('Please use only select an image file (png or jpg)');\n            }\n        }\n    };\n\n    const removePaternPicture = (index: number) => {\n        const newPictures: File[] = [...patternPictures.filter((_, i) => i !== index)];\n        // TO DO: remove from storage\n        setPatternPictures(newPictures);\n    };\n\n    const removeWorkPicture = (index: number) => {\n        const newPictures: File[] = [...finishedWorkPictures.filter((_, i) => i !== index)];\n        // TO DO: remove from storage\n        setFinishedWorkPictures(newPictures);\n    };\n\n    const handleSubmit = () => {\n        firestore\n            .collection(`patterns`)\n            .doc(id)\n            .set({\n                title,\n                description,\n                difficulty,\n                patterns: patternPictures.map((picture) => picture.name),\n                finishedWorks: finishedWorkPictures.map((picture) => picture.name),\n                owner: user?.uid,\n            })\n            .then(() => {\n                setNewOpen(true);\n                closeModal();\n            })\n            .catch((errorData) => {\n                setError(errorData?.message);\n            });\n    };\n\n    //  const { url } = useStorage(file);\n\n    return (\n        <div style={{}}>\n            <h1>Add a new pattern</h1>\n\n            <FormGroup>\n                <Label for=\"title\">Title</Label>\n                <Input\n                    name=\"patternTitle\"\n                    id=\"title\"\n                    placeholder=\"Enter title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label for=\"tags\">Tags</Label>\n                <Input\n                    type=\"select\"\n                    multiple\n                    name=\"patternTags\"\n                    id=\"tags\"\n                    value={tags}\n                    onChange={(e) => setTags(e.target.value)}\n                >\n                    <option>Tag 1</option>\n                    <option>Tag 2 </option>\n                    <option>Tag 3</option>\n                </Input>\n            </FormGroup>\n\n            <FormGroup>\n                <Label for=\"difficulty\">Difficulty</Label>\n                <Input\n                    type=\"range\"\n                    id=\"difficulty\"\n                    name=\"patternDifficulty\"\n                    min={1}\n                    max={5}\n                    step={1}\n                    value={difficulty}\n                    onChange={(e) => setDifficulty(e.target.value)}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label for=\"books\">Add to...</Label>\n                <Input type=\"select\" multiple name=\"patternBooks\" id=\"books\">\n                    <option>Book 1</option>\n                    <option>Book 2 </option>\n                    <option>Book 3</option>\n                </Input>\n            </FormGroup>\n\n            <FormGroup>\n                <Label for=\"description\">Description</Label>\n                <Input\n                    type=\"textarea\"\n                    name=\"patternDescription\"\n                    id=\"description\"\n                    placeholder=\"Enter description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label for=\"description\" style={{ display: 'block' }}>\n                    Pattern pictures\n                </Label>\n                <>\n                    {patternPictures.map((picture, index) => (\n                        <div key={picture.name}>\n                            <Label>{picture.name}</Label>\n                            <Button color=\"danger\" onClick={() => removePaternPicture(index)}>\n                                x\n                            </Button>\n                        </div>\n                    ))}\n                    <Input\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                    <Button color=\"info\" onClick={() => {}}>\n                        +\n                    </Button>\n                </>\n            </FormGroup>\n\n            <FormGroup>\n                <Label for=\"description\" style={{ display: 'block' }}>\n                    Finished works\n                </Label>\n                <>\n                    {finishedWorkPictures.map((picture, index) => (\n                        <div key={picture.name}>\n                            <Label>{picture.name}</Label>\n                            <Button color=\"danger\" onClick={() => removeWorkPicture(index)}>\n                                x\n                            </Button>\n                        </div>\n                    ))}\n                    <Input\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                    <Button color=\"info\" onClick={() => {}}>\n                        +\n                    </Button>\n                </>\n            </FormGroup>\n\n            {error && <p>{error}</p>}\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                <Button\n                    color=\"info\"\n                    onClick={() => {\n                        setNewOpen(true);\n                        closeModal();\n                    }}\n                >\n                    Cancel\n                </Button>\n\n                <Button color=\"info\" style={{ marginLeft: 'auto' }} onClick={handleSubmit}>\n                    Save\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default PatternList;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx",["108","109","110"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx",["111","112","113","114","115","116","117"],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":21,"column":35,"nodeType":"130","messageId":"131","endLine":21,"endColumn":38,"suggestions":"132"},{"ruleId":"128","severity":1,"message":"129","line":20,"column":35,"nodeType":"130","messageId":"131","endLine":20,"endColumn":38,"suggestions":"133"},{"ruleId":"128","severity":1,"message":"129","line":19,"column":37,"nodeType":"130","messageId":"131","endLine":19,"endColumn":40,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":30,"column":9,"nodeType":"137","messageId":"138","endLine":30,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":35,"column":37,"nodeType":"141","messageId":"142","endLine":35,"endColumn":78},{"ruleId":"139","severity":1,"message":"143","line":35,"column":44,"nodeType":"144","messageId":"145","endLine":35,"endColumn":53},{"ruleId":"128","severity":1,"message":"129","line":35,"column":50,"nodeType":"130","messageId":"131","endLine":35,"endColumn":53,"suggestions":"146"},{"ruleId":"139","severity":1,"message":"147","line":35,"column":55,"nodeType":"144","messageId":"145","endLine":35,"endColumn":74},{"ruleId":"128","severity":1,"message":"129","line":35,"column":71,"nodeType":"130","messageId":"131","endLine":35,"endColumn":74,"suggestions":"148"},{"ruleId":"135","severity":1,"message":"136","line":48,"column":13,"nodeType":"137","messageId":"138","endLine":48,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":13,"column":65,"nodeType":"130","messageId":"131","endLine":13,"endColumn":68,"suggestions":"149"},{"ruleId":"128","severity":1,"message":"129","line":11,"column":55,"nodeType":"130","messageId":"131","endLine":11,"endColumn":58,"suggestions":"150"},{"ruleId":"135","severity":1,"message":"136","line":15,"column":13,"nodeType":"137","messageId":"138","endLine":15,"endColumn":26},{"ruleId":"139","severity":1,"message":"140","line":5,"column":20,"nodeType":"141","messageId":"142","endLine":5,"endColumn":42},{"ruleId":"128","severity":1,"message":"129","line":15,"column":38,"nodeType":"130","messageId":"131","endLine":15,"endColumn":41,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":36,"column":36,"nodeType":"154","messageId":"155","endLine":36,"endColumn":45},{"ruleId":"135","severity":1,"message":"136","line":44,"column":5,"nodeType":"137","messageId":"138","endLine":44,"endColumn":16},{"ruleId":"156","severity":2,"message":"157","line":1,"column":13,"nodeType":"144","messageId":"158","endLine":1,"endColumn":17},{"ruleId":"156","severity":2,"message":"159","line":3,"column":6,"nodeType":"144","messageId":"158","endLine":3,"endColumn":14},{"ruleId":"156","severity":2,"message":"160","line":11,"column":13,"nodeType":"144","messageId":"158","endLine":11,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":11,"column":5,"nodeType":"137","messageId":"138","endLine":11,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":17,"column":13,"nodeType":"137","messageId":"138","endLine":17,"endColumn":24},{"ruleId":"135","severity":1,"message":"136","line":18,"column":13,"nodeType":"137","messageId":"138","endLine":18,"endColumn":24},{"ruleId":"135","severity":1,"message":"136","line":20,"column":17,"nodeType":"137","messageId":"138","endLine":20,"endColumn":28},{"ruleId":"135","severity":1,"message":"136","line":27,"column":13,"nodeType":"137","messageId":"138","endLine":27,"endColumn":24},{"ruleId":"135","severity":1,"message":"136","line":30,"column":17,"nodeType":"137","messageId":"138","endLine":30,"endColumn":28},{"ruleId":"135","severity":1,"message":"136","line":44,"column":5,"nodeType":"137","messageId":"138","endLine":44,"endColumn":16},"lines-around-directive",["161"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["162","163"],["164","165"],["166","167"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'user' should be typed with a non-any type.","Identifier","anyTypedArg",["168","169"],"Argument 'additionalData' should be typed with a non-any type.",["170","171"],["172","173"],["174","175"],["176","177"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed","@typescript-eslint/naming-convention","Type Alias name `user` must match one of the following formats: PascalCase","doesNotMatchFormat","Type Alias name `userInfo` must match one of the following formats: PascalCase","Type Alias name `picture` must match one of the following formats: PascalCase","padding-line-between-statements",{"messageId":"178","fix":"179","desc":"180"},{"messageId":"181","fix":"182","desc":"183"},{"messageId":"178","fix":"184","desc":"180"},{"messageId":"181","fix":"185","desc":"183"},{"messageId":"178","fix":"186","desc":"180"},{"messageId":"181","fix":"187","desc":"183"},{"messageId":"178","fix":"188","desc":"180"},{"messageId":"181","fix":"189","desc":"183"},{"messageId":"178","fix":"190","desc":"180"},{"messageId":"181","fix":"191","desc":"183"},{"messageId":"178","fix":"192","desc":"180"},{"messageId":"181","fix":"193","desc":"183"},{"messageId":"178","fix":"194","desc":"180"},{"messageId":"181","fix":"195","desc":"183"},{"messageId":"178","fix":"196","desc":"180"},{"messageId":"181","fix":"197","desc":"183"},"suggestUnknown",{"range":"198","text":"199"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"198","text":"200"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"201","text":"199"},{"range":"201","text":"200"},{"range":"202","text":"199"},{"range":"202","text":"200"},{"range":"203","text":"199"},{"range":"203","text":"200"},{"range":"204","text":"199"},{"range":"204","text":"200"},{"range":"205","text":"199"},{"range":"205","text":"200"},{"range":"206","text":"199"},{"range":"206","text":"200"},{"range":"207","text":"199"},{"range":"207","text":"200"},[629,632],"unknown","never",[444,447],[504,507],[973,976],[994,997],[542,545],[386,389],[544,547]]