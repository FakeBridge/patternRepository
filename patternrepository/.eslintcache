[{"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx":"1","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx":"2","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx":"3","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx":"4","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx":"5","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx":"6","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx":"7","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx":"8","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx":"9","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx":"10","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx":"11","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx":"12","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx":"13","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx":"14","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx":"15","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx":"16","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx":"17","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx":"18","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx":"19","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx":"20","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx":"21","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx":"22","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx":"23","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx":"24","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx":"25","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx":"26","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx":"27","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx":"28","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx":"29","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx":"30","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx":"31","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx":"32","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx":"33","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx":"34","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx":"35"},{"size":645,"mtime":1618688437988,"results":"36","hashOfConfig":"37"},{"size":275,"mtime":1618591518992,"results":"38","hashOfConfig":"37"},{"size":1111,"mtime":1618661384725,"results":"39","hashOfConfig":"37"},{"size":1421,"mtime":1618524201234,"results":"40","hashOfConfig":"37"},{"size":1782,"mtime":1618661465596,"results":"41","hashOfConfig":"37"},{"size":1545,"mtime":1618610348765,"results":"42","hashOfConfig":"37"},{"size":1535,"mtime":1618524201222,"results":"43","hashOfConfig":"37"},{"size":135,"mtime":1618332767713,"results":"44","hashOfConfig":"37"},{"size":423,"mtime":1618332668472,"results":"45","hashOfConfig":"37"},{"size":3271,"mtime":1618610348755,"results":"46","hashOfConfig":"37"},{"size":415,"mtime":1617579618712,"results":"47","hashOfConfig":"37"},{"size":1768,"mtime":1618524201223,"results":"48","hashOfConfig":"37"},{"size":4984,"mtime":1618610348762,"results":"49","hashOfConfig":"37"},{"size":3282,"mtime":1618610348762,"results":"50","hashOfConfig":"37"},{"size":1362,"mtime":1617579618712,"results":"51","hashOfConfig":"37"},{"size":2768,"mtime":1618610348759,"results":"52","hashOfConfig":"37"},{"size":14261,"mtime":1618610348756,"results":"53","hashOfConfig":"37"},{"size":196,"mtime":1617283949558,"results":"54","hashOfConfig":"37"},{"size":4350,"mtime":1618688452823,"results":"55","hashOfConfig":"37"},{"size":1020,"mtime":1618610348768,"results":"56","hashOfConfig":"37"},{"size":1037,"mtime":1618336456802,"results":"57","hashOfConfig":"37"},{"size":4497,"mtime":1618688224993,"results":"58","hashOfConfig":"37"},{"size":16808,"mtime":1618610348758,"results":"59","hashOfConfig":"37"},{"size":650,"mtime":1618601931286,"results":"60","hashOfConfig":"37"},{"size":9386,"mtime":1618683128333,"results":"61","hashOfConfig":"37"},{"size":1187,"mtime":1618610348767,"results":"62","hashOfConfig":"37"},{"size":2668,"mtime":1618610348757,"results":"63","hashOfConfig":"37"},{"size":1005,"mtime":1618610348767,"results":"64","hashOfConfig":"37"},{"size":1319,"mtime":1618610348766,"results":"65","hashOfConfig":"37"},{"size":227,"mtime":1618610348763,"results":"66","hashOfConfig":"37"},{"size":279,"mtime":1618610348766,"results":"67","hashOfConfig":"37"},{"size":1175,"mtime":1618676452139,"results":"68","hashOfConfig":"37"},{"size":2586,"mtime":1618678268037,"results":"69","hashOfConfig":"37"},{"size":2458,"mtime":1618685794822,"results":"70","hashOfConfig":"37"},{"size":1653,"mtime":1618687821167,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g8f8c4",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"154"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx",[],["162","163","164","165","166"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx",["167"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { auth, generateUserDocument } from '../firebase';\r\nimport { user } from '../types';\r\n\r\nexport const UserContext = createContext<{ user: user }>({\r\n    user: null,\r\n});\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UserProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState<{ user: user }>({\r\n        user: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (userAuth) => {\r\n            if (userAuth) {\r\n                const signedUser: any = await generateUserDocument(userAuth, null);\r\n                setCurrentUser({\r\n                    user: {\r\n                        uid: signedUser?.uid,\r\n                        email: signedUser?.email,\r\n                        username: signedUser?.username,\r\n                        avatar: signedUser?.avatar,\r\n                        description: signedUser?.description,\r\n                        darkTheme: signedUser?.darkTheme,\r\n                    },\r\n                });\r\n            } else {\r\n                setCurrentUser({ user: null });\r\n            }\r\n        });\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    return <UserContext.Provider value={currentUser}>{children}</UserContext.Provider>;\r\n};\r\n\r\nexport default UserProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx",["168"],"import React, { useContext } from 'react';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { auth } from '../logic/firebase';\n\nimport { UserContext } from '../logic/providers/userProvider';\n\nimport {\n    PageHeader as PH,\n    HeaderName,\n    Navigation,\n    NavItem,\n    NavLink,\n} from '../design/styledComponents';\n\nconst PageHeader: React.FC = () => {\n    const { user } = useContext(UserContext);\n\n    const logOutHandler = (event: any) => {\n        event.preventDefault();\n        auth.signOut();\n    };\n\n    return (\n        <PH>\n            <HeaderName href=\"/\" onClick={(e) => e.preventDefault()}>\n                patternRepository\n            </HeaderName>\n            <Navigation>\n                <NavItem>\n                    <NavLink href=\"/\" onClick={(e) => e.preventDefault()}>\n                        Home\n                    </NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink href=\"/\">Browse patterns</NavLink>\n                </NavItem>\n                <NavItem style={{ float: 'right' }}>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            {`Welcome ${user?.username}`}\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            <DropdownItem href={`/profile/${user?.uid}`}>Profile</DropdownItem>\n                            <DropdownItem divider />\n                            <DropdownItem onClick={logOutHandler}>Log out</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                </NavItem>\n            </Navigation>\n        </PH>\n    );\n};\n\nexport default PageHeader;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx",["169","170","171","172","173","174","175","176"],"import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nimport firebaseConfig from './firebaseConfig';\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n} else {\r\n    firebase.app(); // if already initialized, use that one\r\n}\r\n\r\n// firebase.initializeApp();\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const storage = firebase.storage();\r\n\r\nconst getUserDocument = async (uid: any) => {\r\n    if (!uid) return null;\r\n    try {\r\n        const userDocument = await firestore.doc(`users/${uid}`).get();\r\n        // const userAvatar = await storage.ref(`/avatars/${uid}`)?.getDownloadURL();\r\n        return {\r\n            uid,\r\n            ...userDocument.data(),\r\n            avatar: null, // userAvatar,\r\n        };\r\n    } catch (error) {\r\n        console.error(error.code);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const generateUserDocument = async (user: any, additionalData: any) => {\r\n    if (!user) return {};\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if (!snapshot.exists) {\r\n        const { email } = user;\r\n        try {\r\n            await userRef.set({\r\n                username: user.username,\r\n                email,\r\n                ...additionalData,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error creating user document', error);\r\n        }\r\n    }\r\n    return getUserDocument(user.uid);\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx",["177"],"import React, { useState } from 'react';\r\nimport { auth, generateUserDocument } from '../../logic/firebase';\r\n\r\nimport { isEmail } from '../../logic/helperFunctions';\r\n\r\nimport {\r\n    SuccessButton,\r\n    Input,\r\n    Label,\r\n    FormGroup,\r\n    DangerAlert,\r\n    HelperText,\r\n} from '../../design/styledComponents';\r\n\r\nconst SignUp: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordRepeat, setPasswordRepeat] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const createUserWithEmailAndPasswordHandler = async (event: any) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\r\n            generateUserDocument(user, { username });\r\n        } catch (errorData) {\r\n            setError('Error Signing up with email and password');\r\n        }\r\n\r\n        setUsername('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>Username</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter username\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <HelperText>You can change your username later ^^</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter mail\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => {\r\n                        if (!isEmail(e.target.value)) {\r\n                            setError('This is not a valid email!');\r\n                        } else {\r\n                            setError(null);\r\n                        }\r\n                        setEmail(e.target.value);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <HelperText>Password has to have at least six characters</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Repeat password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Repeat password\"\r\n                    value={passwordRepeat}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPasswordRepeat(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={createUserWithEmailAndPasswordHandler}>\r\n                Sign up\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx",["178","179"],"import React, { useState, useCallback } from 'react';\r\nimport { auth } from '../../logic/firebase';\r\n\r\nimport { SuccessButton, Input, Label, FormGroup, DangerAlert } from '../../design/styledComponents';\r\n\r\nconst SignIn: React.FC = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const signInWithEmailAndPasswordHandler = useCallback(\r\n        (event: any) => {\r\n            event.preventDefault();\r\n            auth.signInWithEmailAndPassword(email, password).catch((errorData) => {\r\n                setError('Error signing in with password and email!');\r\n                console.error('Error signing in with password and email', errorData);\r\n            });\r\n        },\r\n        [email, password],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={signInWithEmailAndPasswordHandler}>\r\n                Sign in\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\nexport default SignIn;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx",["180","181"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\n\r\nimport useStorage from '../../logic/hooks/useStorage';\r\n\r\nimport { firestore } from '../../logic/firebase';\r\n\r\nimport {\r\n    Main,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    MarginItemDetail,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DangerAlert,\r\n    SuccessAlert,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n}\r\n\r\nconst ProfileEdit: React.FC<PropsType> = ({ openEdit }) => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [file, setFile] = useState<File | null>(null);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [saved, setSaved] = useState<boolean>(false);\r\n\r\n    const types = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\n    useEffect(() => {\r\n        let name = '';\r\n        let descriptionText = '';\r\n        if (user && user.username) {\r\n            name = user.username;\r\n        }\r\n        if (user && user.description) {\r\n            descriptionText = user.description;\r\n        }\r\n        setUsername(name);\r\n        setDescription(descriptionText);\r\n    }, [user]);\r\n\r\n    const { progress, url, uploadImage } = useStorage(file);\r\n\r\n    const handleImageChange = (selectedFile: File | null) => {\r\n        if (selectedFile) {\r\n            if (types.includes(selectedFile.type)) {\r\n                const maxAllowSize = 5 * 1024 * 1024;\r\n                if (selectedFile.size > maxAllowSize) {\r\n                    setError('Image is too big! Maximum size is 5MB.');\r\n                } else {\r\n                    setError(null);\r\n                    setFile(selectedFile);\r\n                }\r\n            } else {\r\n                setFile(null);\r\n                setError('Please use only select an image file (png or jpg)');\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateData = () => {\r\n        firestore\r\n            .collection(`users`)\r\n            .doc(`${user?.uid}`)\r\n            .update({\r\n                username,\r\n                description,\r\n            })\r\n            .then(() => {\r\n                setSaved(true);\r\n            })\r\n            .catch((errorData) => {\r\n                setError(errorData?.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Main>\r\n            <MarginItemDetail>\r\n                <ButtonRow>\r\n                    <CancelButton onClick={() => openEdit(false)} block={false}>\r\n                        Close\r\n                    </CancelButton>\r\n\r\n                    <SuccessButton onClick={() => updateData()} block={false}>\r\n                        Save\r\n                    </SuccessButton>\r\n                </ButtonRow>\r\n\r\n                {saved && <SuccessAlert>Your changes were saved!</SuccessAlert>}\r\n\r\n                {error && <DangerAlert>{error}</DangerAlert>}\r\n\r\n                <FormGroup>\r\n                    <Label>Profile picture</Label>\r\n                    {url && (\r\n                        <img\r\n                            style={{ width: '100px', height: '100px', objectFit: 'cover' }}\r\n                            src={url}\r\n                            alt=\"\"\r\n                        />\r\n                    )}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            handleImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                    {file && (\r\n                        <SuccessButton\r\n                            block={false}\r\n                            onClick={() => uploadImage('avatars', user?.uid ? user.uid : '')}\r\n                        >\r\n                            Save image{' '}\r\n                        </SuccessButton>\r\n                    )}\r\n                    {file && progress > 0 && progress < 100 && <p>{`${progress}% uploaded`}</p>}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>Username</Label>\r\n                    <Input block value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>{`Something about you <3`}</Label>\r\n                    <CKEditor\r\n                        editor={ClassicEditor}\r\n                        data={description}\r\n                        onChange={(event: any, editor: any) => {\r\n                            setDescription(editor.getData());\r\n                        }}\r\n                    />\r\n                </FormGroup>\r\n            </MarginItemDetail>\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default ProfileEdit;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx",["182"],"import { useState } from 'react';\r\n\r\nimport { storage } from '../firebase';\r\n\r\nconst useStorage = (file: File | null) => {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [url, setUrl] = useState<string | null>(null);\r\n\r\n    // runs every time the file value changes\r\n    const uploadImage = (storageName: string, pictureName: string) => {\r\n        if (file) {\r\n            // storage ref\r\n            const storageRef = storage.ref(`${storageName}/${pictureName}`);\r\n\r\n            storageRef.put(file).on(\r\n                'state_changed',\r\n                (snap) => {\r\n                    // track the upload progress\r\n                    const percentage = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                    setProgress(percentage);\r\n                },\r\n                (err) => {\r\n                    setError(err.message);\r\n                },\r\n                async () => {\r\n                    // get the public download img url\r\n                    const downloadUrl = await storageRef.getDownloadURL();\r\n\r\n                    // save the url to local state\r\n                    setUrl(downloadUrl);\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    return { progress, url, error, uploadImage };\r\n};\r\nexport default useStorage;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx",["183","184","185"],"import React, { useState, useMemo, useContext, useCallback } from 'react';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\n\r\nimport { patternToAdd, fileWithUrl, tag, book } from '../../logic/types';\r\n\r\nimport multiSelectWithColour from '../../design/selectStyles';\r\n\r\nimport {\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DifficultyInput,\r\n    FormImageContainer,\r\n    IconButton,\r\n    DangerAlert,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    closeModal: () => void;\r\n}\r\n\r\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\nconst AddPattern: React.FC<PropsType> = React.memo(({ closeModal }) => {\r\n    const { user } = useContext(UserContext);\r\n    const { allTags } = useContext(TagContext);\r\n    const { allBooks } = useContext(BookContext);\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [tags, setTags] = useState<tag[]>([]);\r\n    const [books, setBooks] = useState<book[]>([]);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>('');\r\n    const [difficulty, setDifficulty] = useState<number>(3);\r\n\r\n    const [newOpen, setNewOpen] = useState<boolean>(false);\r\n\r\n    const [patternPictures, setPatternPictures] = useState<fileWithUrl[]>([]);\r\n    const [finishedWorkPictures, setFinishedWorkPictures] = useState<fileWithUrl[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const id = useMemo(\r\n        () =>\r\n            `${newOpen ? 'y' : ''}${(new Date().getTime() / 1000).toFixed(0)}${new Array(5)\r\n                .join()\r\n                .replace(/(.|$)/g, function () {\r\n                    return (Math.random() * 36)\r\n                        .toString(36)\r\n                        [Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\r\n                })}`,\r\n        [newOpen],\r\n    );\r\n\r\n    const allPossibleBooks = useMemo(\r\n        () => allBooks.filter((possibleBook) => possibleBook.owner === user?.uid),\r\n        [allBooks, user?.uid],\r\n    );\r\n\r\n    const HandlePatternImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setPatternPictures([\r\n                                    ...patternPictures,\r\n                                    { file: selectedFile, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, patternPictures],\r\n    );\r\n\r\n    const HandleWorkImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(\r\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\r\n                        );\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setFinishedWorkPictures([\r\n                                    ...finishedWorkPictures,\r\n                                    { file: selectedFile, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, finishedWorkPictures],\r\n    );\r\n\r\n    const removePaternPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: fileWithUrl[] = [...patternPictures.filter((_, i) => i !== index)];\r\n            const fileToRemove: fileWithUrl = patternPictures[index];\r\n            const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.file.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setPatternPictures(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        },\r\n        [id, patternPictures],\r\n    );\r\n\r\n    const removeWorkPicture = useCallback(\r\n        (index: number) => {\r\n            const newPictures: fileWithUrl[] = [\r\n                ...finishedWorkPictures.filter((_, i) => i !== index),\r\n            ];\r\n            const fileToRemove: fileWithUrl = finishedWorkPictures[index];\r\n            const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.file.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setFinishedWorkPictures(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        },\r\n        [id, finishedWorkPictures],\r\n    );\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: patternPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            finishedWorkImages: finishedWorkPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            owner: user?.uid ? user.uid : null,\r\n            tags: tags.map((t) => t.id),\r\n            books: books.map((b) => b.id),\r\n        };\r\n\r\n        PatternService.set(id, data)\r\n            .then(() => {\r\n                setNewOpen(true);\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    }, [\r\n        closeModal,\r\n        description,\r\n        difficulty,\r\n        finishedWorkPictures,\r\n        id,\r\n        patternPictures,\r\n        tags,\r\n        title,\r\n        books,\r\n        user?.uid,\r\n    ]);\r\n\r\n    const handleTagAddition = useCallback(() => {\r\n        /*  if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        } */\r\n    }, []);\r\n\r\n    const handleCancel = useCallback(() => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        patternPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        finishedWorkPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            setNewOpen(true);\r\n            closeModal();\r\n        }\r\n    }, [closeModal, finishedWorkPictures, id, patternPictures]);\r\n\r\n    return (\r\n        <ItemDetail>\r\n            <ItemHeader>Add a new pattern</ItemHeader>\r\n\r\n            <FormGroup>\r\n                <Label>Title</Label>\r\n                <Input\r\n                    block\r\n                    name=\"patternTitle\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        const enterKeyCode = 13;\r\n                        if (e.keyCode === enterKeyCode) {\r\n                            handleTagAddition();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Difficulty</Label>\r\n                <DifficultyInput\r\n                    block\r\n                    type=\"range\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    difficulty={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Books</Label>\r\n                <Select\r\n                    styles={multiSelectWithColour}\r\n                    options={allPossibleBooks}\r\n                    value={books}\r\n                    isMulti\r\n                    onChange={(e) => {\r\n                        setBooks([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Pattern pictures</Label>\r\n                <>\r\n                    {patternPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.file.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Finished works</Label>\r\n                <>\r\n                    {finishedWorkPictures.map((picture, index) => (\r\n                        <FormImageContainer key={picture.file.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <ButtonRow>\r\n                <CancelButton block={false} onClick={handleCancel}>\r\n                    Cancel\r\n                </CancelButton>\r\n\r\n                <SuccessButton block={false} onClick={handleSubmit}>\r\n                    Save\r\n                </SuccessButton>\r\n            </ButtonRow>\r\n        </ItemDetail>\r\n    );\r\n});\r\n\r\nAddPattern.displayName = 'AddPattern';\r\n\r\nexport default AddPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx",["186","187","188"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx",["189","190"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx",["191","192","193","194","195","196","197"],"import { firestore, auth } from '../firebase';\r\nimport { patternToAdd } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/patterns');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return [];\r\n};\r\n\r\nconst getAllOfUser = (uid: string) => {\r\n    return collectionRef.where('owner', '==', uid);\r\n};\r\n\r\nconst create = (data: patternToAdd) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst PatternService = {\r\n    getAll,\r\n    getAllMine,\r\n    getAllOfUser,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default PatternService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx",["198","199"],"import React, { useState, useCallback, useContext, useMemo } from 'react';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport { TagContext } from '../../logic/providers/tagProvider';\r\nimport { BookContext } from '../../logic/providers/bookProvider';\r\n// import TagService from '../../logic/services/tagServices';\r\n\r\nimport { pattern, patternToAdd, basicImage, tag as tagType, book } from '../../logic/types';\r\n\r\nimport multiSelectWithColour from '../../design/selectStyles';\r\n\r\nimport {\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    ItemDetail,\r\n    ItemHeader,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DifficultyInput,\r\n    FormImageContainer,\r\n    IconButton,\r\n    DangerAlert,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n    closeModal: () => void;\r\n    currentPattern: pattern;\r\n}\r\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\nconst EditPattern: React.FC<PropsType> = React.memo(({ openEdit, closeModal, currentPattern }) => {\r\n    const { allTags } = useContext(TagContext);\r\n    const { allBooks } = useContext(BookContext);\r\n\r\n    const [title, setTitle] = useState<string>(currentPattern.title ? currentPattern.title : '');\r\n    const [tags, setTags] = useState<tagType[]>(currentPattern.tags ? currentPattern.tags : []);\r\n    const [books, setBooks] = useState<book[]>(currentPattern.books ? currentPattern.books : []);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>(\r\n        currentPattern.description ? currentPattern.description : '',\r\n    );\r\n    const [difficulty, setDifficulty] = useState<number>(\r\n        currentPattern.difficulty ? currentPattern.difficulty : 3,\r\n    );\r\n\r\n    const [patternImages, setPatternImages] = useState<basicImage[]>(\r\n        currentPattern.patternImages ? currentPattern.patternImages : [],\r\n    );\r\n    const [finishedWorkImages, setFinishedWorkImages] = useState<basicImage[]>(\r\n        currentPattern.finishedWorkImages ? currentPattern.finishedWorkImages : [],\r\n    );\r\n\r\n    const [newPatternImages, setNewPatternImages] = useState<basicImage[]>([]);\r\n    const [newFinishedWorkImages, setNewFinishedWorkImages] = useState<basicImage[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const { id } = currentPattern;\r\n\r\n    const allPossibleBooks = useMemo(\r\n        () => allBooks.filter((possibleBook) => possibleBook.owner === currentPattern.owner),\r\n        [allBooks, currentPattern.owner],\r\n    );\r\n\r\n    const HandlePatternImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setNewPatternImages([\r\n                                    ...newPatternImages,\r\n                                    { name: selectedFile.name, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, newPatternImages],\r\n    );\r\n\r\n    const HandleWorkImageChange = useCallback(\r\n        (selectedFile: File | null) => {\r\n            if (selectedFile) {\r\n                if (imageTypes.includes(selectedFile.type)) {\r\n                    const maxAllowSize = 5 * 1024 * 1024;\r\n                    if (selectedFile.size > maxAllowSize) {\r\n                        setError('Image is too big! Maximum size is 5MB.');\r\n                    } else {\r\n                        const storageRef = storage.ref(\r\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\r\n                        );\r\n\r\n                        storageRef.put(selectedFile).on(\r\n                            'state_changed',\r\n                            () => {},\r\n                            (err) => {\r\n                                setError(err.message);\r\n                            },\r\n                            async () => {\r\n                                const downloadUrl = await storageRef.getDownloadURL();\r\n                                setNewFinishedWorkImages([\r\n                                    ...newFinishedWorkImages,\r\n                                    { name: selectedFile.name, url: downloadUrl },\r\n                                ]);\r\n                            },\r\n                        );\r\n                    }\r\n                } else {\r\n                    setError('Please use only select an image file (png or jpg)');\r\n                }\r\n            }\r\n        },\r\n        [id, newFinishedWorkImages],\r\n    );\r\n\r\n    const removePaternPicture = useCallback(\r\n        (index: number) => {\r\n            if (index < patternImages.length) {\r\n                const newPictures: basicImage[] = [...patternImages.filter((_, i) => i !== index)];\r\n                const fileToRemove: basicImage = patternImages[index];\r\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setPatternImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            } else {\r\n                const newPictures: basicImage[] = [\r\n                    ...newPatternImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = newPatternImages[index];\r\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setNewPatternImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            }\r\n        },\r\n        [id, newPatternImages, patternImages],\r\n    );\r\n\r\n    const removeWorkPicture = useCallback(\r\n        (index: number) => {\r\n            if (index < finishedWorkImages.length) {\r\n                const newPictures: basicImage[] = [\r\n                    ...finishedWorkImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = finishedWorkImages[index];\r\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setFinishedWorkImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            } else {\r\n                const newPictures: basicImage[] = [\r\n                    ...newFinishedWorkImages.filter((_, i) => i !== index),\r\n                ];\r\n                const fileToRemove: basicImage = newFinishedWorkImages[index];\r\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n                storageRef\r\n                    .delete()\r\n                    .then(() => {\r\n                        setNewFinishedWorkImages(newPictures);\r\n                    })\r\n                    .catch((err) => {\r\n                        setError(err.message);\r\n                    });\r\n            }\r\n        },\r\n        [finishedWorkImages, id, newFinishedWorkImages],\r\n    );\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: [...patternImages, ...newPatternImages],\r\n            finishedWorkImages: [...finishedWorkImages, ...newFinishedWorkImages],\r\n            tags: tags.map((t) => t.id),\r\n            books: books.map((b) => b.id),\r\n        };\r\n\r\n        PatternService.update(id, data)\r\n            .then(() => {\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    }, [\r\n        closeModal,\r\n        description,\r\n        difficulty,\r\n        finishedWorkImages,\r\n        id,\r\n        newFinishedWorkImages,\r\n        newPatternImages,\r\n        patternImages,\r\n        tags,\r\n        books,\r\n        title,\r\n    ]);\r\n\r\n    const handleTagAddition = useCallback(() => {\r\n        /*      if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        } */\r\n    }, []);\r\n\r\n    const handleCancel = useCallback(() => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        newPatternImages.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        newFinishedWorkImages.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            openEdit(false);\r\n        }\r\n    }, [id, newFinishedWorkImages, newPatternImages, openEdit]);\r\n\r\n    return (\r\n        <ItemDetail>\r\n            <ItemHeader>Edit this pattern</ItemHeader>\r\n\r\n            <FormGroup>\r\n                <Label>Title</Label>\r\n                <Input\r\n                    block\r\n                    name=\"patternTitle\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        //    e.preventDefault();\r\n                        const enterKeyCode = 13;\r\n                        if (e.keyCode === enterKeyCode) {\r\n                            handleTagAddition();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Difficulty</Label>\r\n                <DifficultyInput\r\n                    block\r\n                    type=\"range\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    difficulty={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Books</Label>\r\n                <Select\r\n                    styles={multiSelectWithColour}\r\n                    options={allPossibleBooks}\r\n                    value={books}\r\n                    isMulti\r\n                    onChange={(e) => {\r\n                        setBooks([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Pattern pictures</Label>\r\n                <>\r\n                    {patternImages.map((picture: basicImage, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {newPatternImages.map((picture: basicImage, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removePaternPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"pattern\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label>Finished works</Label>\r\n                <>\r\n                    {finishedWorkImages.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    {newFinishedWorkImages.map((picture, index) => (\r\n                        <FormImageContainer key={picture.name}>\r\n                            <IconButton onClick={() => removeWorkPicture(index)}>\r\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\r\n                            </IconButton>\r\n                            <img src={picture.url} alt=\"finishedWork\" />\r\n                        </FormImageContainer>\r\n                    ))}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <ButtonRow>\r\n                <CancelButton block={false} onClick={handleCancel}>\r\n                    Cancel\r\n                </CancelButton>\r\n\r\n                <SuccessButton block={false} onClick={handleSubmit}>\r\n                    Save\r\n                </SuccessButton>\r\n            </ButtonRow>\r\n        </ItemDetail>\r\n    );\r\n});\r\n\r\nEditPattern.displayName = 'EditPattern';\r\n\r\nexport default EditPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx",["200","201","202","203","204"],"import { firestore } from '../firebase';\nimport { tagToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/tags');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst create = (data: tagToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst TagService = {\n    getAll,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default TagService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx",["205","206"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport TagService from '../services/tagServices';\r\nimport { tag } from '../types';\r\n\r\nexport const TagContext = createContext<{ allTags: tag[] }>({ allTags: [] });\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst TagProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [allTags, setAllTags] = useState<{ allTags: tag[] }>({ allTags: [] });\r\n\r\n    const onTagDataChange = (items: any) => {\r\n        let loadedTags: tag[] = [];\r\n        loadedTags = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: tagId } = item;\r\n            const data = item.data();\r\n\r\n            loadedTags.push({\r\n                id: tagId,\r\n                label: data.label,\r\n                value: tagId,\r\n            });\r\n        });\r\n\r\n        setAllTags({ allTags: loadedTags });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = TagService.getAll().orderBy('label', 'asc').onSnapshot(onTagDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return <TagContext.Provider value={allTags}>{children}</TagContext.Provider>;\r\n};\r\n\r\nexport default TagProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx",["207","208","209","210","211","212","213"],"import { firestore, auth } from '../firebase';\r\nimport { bookInfo } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/book');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllOfUser = (uid: string) => {\r\n    return collectionRef.where('owner', '==', uid);\r\n};\r\n\r\nconst create = (data: bookInfo) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst BookService = {\r\n    getAll,\r\n    getAllMine,\r\n    getAllOfUser,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default BookService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx",["214","215"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport BookService from '../services/bookServices';\r\nimport { book } from '../types';\r\n\r\nexport const BookContext = createContext<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst BookProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [allBooks, setAllBooks] = useState<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\n    const onBookDataChange = (items: any) => {\r\n        let loadedBooks: book[] = [];\r\n        loadedBooks = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: bookId } = item;\r\n            const data = item.data();\r\n\r\n            loadedBooks.push({\r\n                id: bookId,\r\n                label: data.label,\r\n                value: bookId,\r\n                colour: data.colour,\r\n                owner: data.owner,\r\n            });\r\n        });\r\n\r\n        setAllBooks({ allBooks: loadedBooks });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = BookService.getAll()\r\n            .orderBy('label', 'asc')\r\n            .onSnapshot(onBookDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return <BookContext.Provider value={allBooks}>{children}</BookContext.Provider>;\r\n};\r\n\r\nexport default BookProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx",["216","217","218","219","220"],"export default {\r\n    multiValue: (provided: any, state: any) => {\r\n        const backgroundColor = `${state.data.colour}88`;\r\n\r\n        return {\r\n            ...provided,\r\n            backgroundColor,\r\n        };\r\n    },\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx",["221","222"],"export const isEmail = (email: string) =>\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n        email,\r\n    );\r\n\r\nexport const hi = () => {\r\n    return 'Hi';\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx",["223","224"],"import React from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n  FontAwesomeIcon\r\n} from '@fortawesome/react-fontawesome';\r\nimport ComponentToPrint from './toPrint';\r\n\r\nimport {\r\n  InvisibleIconButton,\r\n} from '../../design/styledComponents';\r\n\r\nclass Example extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactToPrint\r\n          trigger={() => {\r\n            // NOTE: could just as easily return <SomeComponent />. Do NOT pass an `onClick` prop\r\n            // to the root node of the returned component as it will be overwritten.\r\n            return <InvisibleIconButton type=\"button\">\r\n                <FontAwesomeIcon icon={['fa', 'print']} /></InvisibleIconButton>;\r\n          }}\r\n          content={() => this.componentRef}\r\n        />\r\n        <div style={{display: \"none\"}}>\r\n          <ComponentToPrint ref={el => (this.componentRef = el)} {...this.props}/> { /* eslint-disable-line no-return-assign */ } { /* eslint-disable-line react/jsx-props-no-spreading */ }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;",["225","226","227","228","229"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx",["230","231"],"import React from 'react';\r\n\r\nimport {\r\n  ItemHeader,\r\n  ItemLabel,\r\n  Difficulty,\r\n  Tag,\r\n  Description,\r\n  TagRow,\r\n} from '../../design/styledComponents';\r\n\r\nexport default class ComponentToPrint extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      pattern\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      tags,\r\n      difficulty,\r\n      books,\r\n      description,\r\n      patternImages,\r\n      finishedWorkImages\r\n    } = pattern;\r\n    return (\r\n      <div style={{padding: \"100px\"}}>\r\n        <ItemHeader>{title?.length > 0 ? title : 'Untitled'}</ItemHeader>\r\n\r\n          <TagRow>\r\n              {tags.map((tag) => (\r\n                  <Tag key={tag.id} colour=\"tag\">\r\n                      {' '}\r\n                      {tag.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <Difficulty difficulty={difficulty} />\r\n\r\n          <ItemLabel>Books</ItemLabel>\r\n          <TagRow>\r\n              {books?.map((book) => (\r\n                  <Tag key={book.id} colour={book.colour}>\r\n                      {' '}\r\n                      {book.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <ItemLabel>Description</ItemLabel>\r\n          <Description\r\n              dangerouslySetInnerHTML={{\r\n                  __html: description,\r\n              }}\r\n          />\r\n\r\n        <div style={{display: \"block\", pageBreakBefore: \"always\", paddingTop: \"100px\"}}>\r\n        <ItemLabel>Finished Works</ItemLabel>\r\n        <div>\r\n              {finishedWorkImages.map((picture) => (\r\n                <div key={picture.name} style={{display: \"inline\"}}>\r\n                  <img\r\n                      key={picture.name}\r\n                      src={picture.url}\r\n                      alt={picture.name}\r\n                      width=\"50%\"\r\n                      style={{display: \"inline\"}}\r\n                  />\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n              <div>\r\n                {patternImages.map((picture) => (\r\n                  <div key={picture.name} style={{height: \"100%\", paddingTop: \"100px\"}}>\r\n                  <img\r\n                    key={picture.name}\r\n                    src={picture.url}\r\n                    alt={picture.name}\r\n                    width=\"100%\"\r\n                    style={{display: \"block\", pageBreakBefore: \"auto\"}}\r\n                    />\r\n                </div>\r\n                ))}\r\n              </div>\r\n      </div>\r\n    );\r\n  }\r\n}","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx",["232","233"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx",["234","235"],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":21,"column":35,"nodeType":"248","messageId":"249","endLine":21,"endColumn":38,"suggestions":"250"},{"ruleId":"246","severity":1,"message":"247","line":18,"column":35,"nodeType":"248","messageId":"249","endLine":18,"endColumn":38,"suggestions":"251"},{"ruleId":"246","severity":1,"message":"247","line":19,"column":37,"nodeType":"248","messageId":"249","endLine":19,"endColumn":40,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":30,"column":9,"nodeType":"255","messageId":"256","endLine":30,"endColumn":22},{"ruleId":"257","severity":1,"message":"258","line":35,"column":37,"nodeType":"259","messageId":"260","endLine":35,"endColumn":78},{"ruleId":"257","severity":1,"message":"261","line":35,"column":44,"nodeType":"262","messageId":"263","endLine":35,"endColumn":53},{"ruleId":"246","severity":1,"message":"247","line":35,"column":50,"nodeType":"248","messageId":"249","endLine":35,"endColumn":53,"suggestions":"264"},{"ruleId":"257","severity":1,"message":"265","line":35,"column":55,"nodeType":"262","messageId":"263","endLine":35,"endColumn":74},{"ruleId":"246","severity":1,"message":"247","line":35,"column":71,"nodeType":"248","messageId":"249","endLine":35,"endColumn":74,"suggestions":"266"},{"ruleId":"253","severity":1,"message":"254","line":48,"column":13,"nodeType":"255","messageId":"256","endLine":48,"endColumn":26},{"ruleId":"246","severity":1,"message":"247","line":23,"column":65,"nodeType":"248","messageId":"249","endLine":23,"endColumn":68,"suggestions":"267"},{"ruleId":"246","severity":1,"message":"247","line":13,"column":17,"nodeType":"248","messageId":"249","endLine":13,"endColumn":20,"suggestions":"268"},{"ruleId":"253","severity":1,"message":"254","line":17,"column":17,"nodeType":"255","messageId":"256","endLine":17,"endColumn":30},{"ruleId":"246","severity":1,"message":"247","line":141,"column":43,"nodeType":"248","messageId":"249","endLine":141,"endColumn":46,"suggestions":"269"},{"ruleId":"246","severity":1,"message":"247","line":141,"column":56,"nodeType":"248","messageId":"249","endLine":141,"endColumn":59,"suggestions":"270"},{"ruleId":"257","severity":1,"message":"258","line":5,"column":20,"nodeType":"259","messageId":"260","endLine":5,"endColumn":42},{"ruleId":"271","severity":1,"message":"272","line":61,"column":36,"nodeType":"273","messageId":"274","endLine":61,"endColumn":45},{"ruleId":"246","severity":1,"message":"247","line":333,"column":39,"nodeType":"248","messageId":"249","endLine":333,"endColumn":42,"suggestions":"275"},{"ruleId":"246","severity":1,"message":"247","line":333,"column":52,"nodeType":"248","messageId":"249","endLine":333,"endColumn":55,"suggestions":"276"},{"ruleId":"277","severity":2,"message":"278","line":1,"column":13,"nodeType":"262","messageId":"279","endLine":1,"endColumn":17},{"ruleId":"277","severity":2,"message":"280","line":3,"column":6,"nodeType":"262","messageId":"279","endLine":3,"endColumn":14},{"ruleId":"277","severity":2,"message":"281","line":11,"column":13,"nodeType":"262","messageId":"279","endLine":11,"endColumn":20},{"ruleId":"246","severity":1,"message":"247","line":32,"column":17,"nodeType":"248","messageId":"249","endLine":32,"endColumn":20,"suggestions":"282"},{"ruleId":"246","severity":1,"message":"247","line":36,"column":39,"nodeType":"248","messageId":"249","endLine":36,"endColumn":42,"suggestions":"283"},{"ruleId":"257","severity":1,"message":"258","line":6,"column":16,"nodeType":"259","messageId":"260","endLine":6,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":10,"column":20,"nodeType":"259","messageId":"260","endLine":10,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":17,"column":22,"nodeType":"259","messageId":"260","endLine":17,"endColumn":38},{"ruleId":"257","severity":1,"message":"258","line":21,"column":16,"nodeType":"259","messageId":"260","endLine":21,"endColumn":39},{"ruleId":"257","severity":1,"message":"258","line":25,"column":16,"nodeType":"259","messageId":"260","endLine":25,"endColumn":52},{"ruleId":"257","severity":1,"message":"258","line":29,"column":13,"nodeType":"259","messageId":"260","endLine":29,"endColumn":49},{"ruleId":"257","severity":1,"message":"258","line":33,"column":16,"nodeType":"259","messageId":"260","endLine":33,"endColumn":31},{"ruleId":"246","severity":1,"message":"247","line":357,"column":39,"nodeType":"248","messageId":"249","endLine":357,"endColumn":42,"suggestions":"284"},{"ruleId":"246","severity":1,"message":"247","line":357,"column":52,"nodeType":"248","messageId":"249","endLine":357,"endColumn":55,"suggestions":"285"},{"ruleId":"257","severity":1,"message":"258","line":6,"column":16,"nodeType":"259","messageId":"260","endLine":6,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":10,"column":16,"nodeType":"259","messageId":"260","endLine":10,"endColumn":35},{"ruleId":"257","severity":1,"message":"258","line":14,"column":16,"nodeType":"259","messageId":"260","endLine":14,"endColumn":48},{"ruleId":"257","severity":1,"message":"258","line":18,"column":13,"nodeType":"259","messageId":"260","endLine":18,"endColumn":45},{"ruleId":"257","severity":1,"message":"258","line":22,"column":16,"nodeType":"259","messageId":"260","endLine":22,"endColumn":31},{"ruleId":"246","severity":1,"message":"247","line":14,"column":37,"nodeType":"248","messageId":"249","endLine":14,"endColumn":40,"suggestions":"286"},{"ruleId":"246","severity":1,"message":"247","line":18,"column":35,"nodeType":"248","messageId":"249","endLine":18,"endColumn":38,"suggestions":"287"},{"ruleId":"257","severity":1,"message":"258","line":6,"column":16,"nodeType":"259","messageId":"260","endLine":6,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":10,"column":20,"nodeType":"259","messageId":"260","endLine":10,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":17,"column":22,"nodeType":"259","messageId":"260","endLine":17,"endColumn":38},{"ruleId":"257","severity":1,"message":"258","line":21,"column":16,"nodeType":"259","messageId":"260","endLine":21,"endColumn":35},{"ruleId":"257","severity":1,"message":"258","line":25,"column":16,"nodeType":"259","messageId":"260","endLine":25,"endColumn":48},{"ruleId":"257","severity":1,"message":"258","line":29,"column":13,"nodeType":"259","messageId":"260","endLine":29,"endColumn":45},{"ruleId":"257","severity":1,"message":"258","line":33,"column":16,"nodeType":"259","messageId":"260","endLine":33,"endColumn":31},{"ruleId":"246","severity":1,"message":"247","line":14,"column":38,"nodeType":"248","messageId":"249","endLine":14,"endColumn":41,"suggestions":"288"},{"ruleId":"246","severity":1,"message":"247","line":18,"column":35,"nodeType":"248","messageId":"249","endLine":18,"endColumn":38,"suggestions":"289"},{"ruleId":"257","severity":1,"message":"258","line":2,"column":17,"nodeType":"259","messageId":"260","endLine":2,"endColumn":47},{"ruleId":"257","severity":1,"message":"290","line":2,"column":18,"nodeType":"262","messageId":"263","endLine":2,"endColumn":31},{"ruleId":"246","severity":1,"message":"247","line":2,"column":28,"nodeType":"248","messageId":"249","endLine":2,"endColumn":31,"suggestions":"291"},{"ruleId":"257","severity":1,"message":"292","line":2,"column":33,"nodeType":"262","messageId":"263","endLine":2,"endColumn":43},{"ruleId":"246","severity":1,"message":"247","line":2,"column":40,"nodeType":"248","messageId":"249","endLine":2,"endColumn":43,"suggestions":"293"},{"ruleId":"257","severity":1,"message":"258","line":1,"column":24,"nodeType":"259","messageId":"260","endLine":1,"endColumn":42},{"ruleId":"257","severity":1,"message":"258","line":6,"column":19,"nodeType":"259","messageId":"260","endLine":6,"endColumn":24},{"ruleId":"257","severity":1,"message":"294","line":13,"column":16,"nodeType":"262","messageId":"295","endLine":13,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":18,"column":3,"nodeType":"273","messageId":"260","endLine":18,"endColumn":11},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"257","severity":1,"message":"294","line":13,"column":16,"nodeType":"262","messageId":"295","endLine":13,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":19,"column":3,"nodeType":"273","messageId":"260","endLine":19,"endColumn":11},{"ruleId":"257","severity":1,"message":"294","line":24,"column":16,"nodeType":"262","messageId":"295","endLine":24,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":29,"column":3,"nodeType":"273","messageId":"260","endLine":29,"endColumn":11},{"ruleId":"257","severity":1,"message":"294","line":23,"column":16,"nodeType":"262","messageId":"295","endLine":23,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":28,"column":3,"nodeType":"273","messageId":"260","endLine":28,"endColumn":11},"lines-around-directive",["296"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["297","298"],["299","300"],["301","302"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'user' should be typed with a non-any type.","Identifier","anyTypedArg",["303","304"],"Argument 'additionalData' should be typed with a non-any type.",["305","306"],["307","308"],["309","310"],["311","312"],["313","314"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed",["315","316"],["317","318"],"@typescript-eslint/naming-convention","Type Alias name `user` must match one of the following formats: PascalCase","doesNotMatchFormat","Type Alias name `userInfo` must match one of the following formats: PascalCase","Type Alias name `picture` must match one of the following formats: PascalCase",["319","320"],["321","322"],["323","324"],["325","326"],["327","328"],["329","330"],["331","332"],["333","334"],"Argument 'provided' should be typed with a non-any type.",["335","336"],"Argument 'state' should be typed with a non-any type.",["337","338"],"Argument 'props' should be typed.","missingArgType","padding-line-between-statements",{"messageId":"339","fix":"340","desc":"341"},{"messageId":"342","fix":"343","desc":"344"},{"messageId":"339","fix":"345","desc":"341"},{"messageId":"342","fix":"346","desc":"344"},{"messageId":"339","fix":"347","desc":"341"},{"messageId":"342","fix":"348","desc":"344"},{"messageId":"339","fix":"349","desc":"341"},{"messageId":"342","fix":"350","desc":"344"},{"messageId":"339","fix":"351","desc":"341"},{"messageId":"342","fix":"352","desc":"344"},{"messageId":"339","fix":"353","desc":"341"},{"messageId":"342","fix":"354","desc":"344"},{"messageId":"339","fix":"355","desc":"341"},{"messageId":"342","fix":"356","desc":"344"},{"messageId":"339","fix":"357","desc":"341"},{"messageId":"342","fix":"358","desc":"344"},{"messageId":"339","fix":"359","desc":"341"},{"messageId":"342","fix":"360","desc":"344"},{"messageId":"339","fix":"361","desc":"341"},{"messageId":"342","fix":"362","desc":"344"},{"messageId":"339","fix":"363","desc":"341"},{"messageId":"342","fix":"364","desc":"344"},{"messageId":"339","fix":"365","desc":"341"},{"messageId":"342","fix":"366","desc":"344"},{"messageId":"339","fix":"367","desc":"341"},{"messageId":"342","fix":"368","desc":"344"},{"messageId":"339","fix":"369","desc":"341"},{"messageId":"342","fix":"370","desc":"344"},{"messageId":"339","fix":"371","desc":"341"},{"messageId":"342","fix":"372","desc":"344"},{"messageId":"339","fix":"373","desc":"341"},{"messageId":"342","fix":"374","desc":"344"},{"messageId":"339","fix":"375","desc":"341"},{"messageId":"342","fix":"376","desc":"344"},{"messageId":"339","fix":"377","desc":"341"},{"messageId":"342","fix":"378","desc":"344"},{"messageId":"339","fix":"379","desc":"341"},{"messageId":"342","fix":"380","desc":"344"},{"messageId":"339","fix":"381","desc":"341"},{"messageId":"342","fix":"382","desc":"344"},{"messageId":"339","fix":"383","desc":"341"},{"messageId":"342","fix":"384","desc":"344"},"suggestUnknown",{"range":"385","text":"386"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"385","text":"387"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"388","text":"386"},{"range":"388","text":"387"},{"range":"389","text":"386"},{"range":"389","text":"387"},{"range":"390","text":"386"},{"range":"390","text":"387"},{"range":"391","text":"386"},{"range":"391","text":"387"},{"range":"392","text":"386"},{"range":"392","text":"387"},{"range":"393","text":"386"},{"range":"393","text":"387"},{"range":"394","text":"386"},{"range":"394","text":"387"},{"range":"395","text":"386"},{"range":"395","text":"387"},{"range":"396","text":"386"},{"range":"396","text":"387"},{"range":"397","text":"386"},{"range":"397","text":"387"},{"range":"398","text":"386"},{"range":"398","text":"387"},{"range":"399","text":"386"},{"range":"399","text":"387"},{"range":"400","text":"386"},{"range":"400","text":"387"},{"range":"401","text":"386"},{"range":"401","text":"387"},{"range":"402","text":"386"},{"range":"402","text":"387"},{"range":"403","text":"386"},{"range":"403","text":"387"},{"range":"404","text":"386"},{"range":"404","text":"387"},{"range":"405","text":"386"},{"range":"405","text":"387"},{"range":"406","text":"386"},{"range":"406","text":"387"},{"range":"407","text":"386"},{"range":"407","text":"387"},[629,632],"unknown","never",[490,493],[522,525],[1002,1005],[1023,1026],[692,695],[479,482],[4722,4725],[4735,4738],[11797,11800],[11810,11813],[970,973],[1104,1107],[13371,13374],[13384,13387],[473,476],[583,586],[487,490],[600,603],[45,48],[57,60]]