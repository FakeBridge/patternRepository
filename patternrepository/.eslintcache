[{"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx":"1","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx":"2","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx":"3","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx":"4","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx":"5","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx":"6","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx":"7","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx":"8","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx":"9","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx":"10","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx":"11","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx":"12","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx":"13","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx":"14","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx":"15","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx":"16","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx":"17","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx":"18","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx":"19","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx":"20","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx":"21","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx":"22","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx":"23","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx":"24","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx":"25"},{"size":307,"mtime":1617579618711,"results":"26","hashOfConfig":"27"},{"size":275,"mtime":1618332485543,"results":"28","hashOfConfig":"27"},{"size":1098,"mtime":1618428406810,"results":"29","hashOfConfig":"27"},{"size":1377,"mtime":1618434409007,"results":"30","hashOfConfig":"27"},{"size":1827,"mtime":1618430081998,"results":"31","hashOfConfig":"27"},{"size":1550,"mtime":1617579618711,"results":"32","hashOfConfig":"27"},{"size":1392,"mtime":1618433296119,"results":"33","hashOfConfig":"27"},{"size":135,"mtime":1618332767713,"results":"34","hashOfConfig":"27"},{"size":423,"mtime":1618332668472,"results":"35","hashOfConfig":"27"},{"size":2208,"mtime":1618336456798,"results":"36","hashOfConfig":"27"},{"size":415,"mtime":1617579618712,"results":"37","hashOfConfig":"27"},{"size":1469,"mtime":1618336456797,"results":"38","hashOfConfig":"27"},{"size":4504,"mtime":1618332707171,"results":"39","hashOfConfig":"27"},{"size":2941,"mtime":1618332684644,"results":"40","hashOfConfig":"27"},{"size":1362,"mtime":1617579618712,"results":"41","hashOfConfig":"27"},{"size":1818,"mtime":1618336456801,"results":"42","hashOfConfig":"27"},{"size":13482,"mtime":1618336456799,"results":"43","hashOfConfig":"27"},{"size":196,"mtime":1617283949558,"results":"44","hashOfConfig":"27"},{"size":2232,"mtime":1618336456802,"results":"45","hashOfConfig":"27"},{"size":901,"mtime":1618172623977,"results":"46","hashOfConfig":"27"},{"size":1037,"mtime":1618336456802,"results":"47","hashOfConfig":"27"},{"size":2733,"mtime":1618336456803,"results":"48","hashOfConfig":"27"},{"size":15916,"mtime":1618336456800,"results":"49","hashOfConfig":"27"},{"size":684,"mtime":1618172623977,"results":"50","hashOfConfig":"27"},{"size":1354,"mtime":1618435044355,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"g8f8c4",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"54"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx",[],["115","116","117","118","119"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx",["120"],"import React, { createContext, useState, useEffect } from 'react';\nimport { auth, generateUserDocument } from '../firebase';\nimport { user } from '../types';\n\nexport const UserContext = createContext<{ user: user }>({\n    user: null,\n});\n\ninterface PropsType {\n    children: JSX.Element;\n}\n\nconst UserProvider: React.FC<PropsType> = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState<{ user: user }>({\n        user: null,\n    });\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(async (userAuth) => {\n            if (userAuth) {\n                const signedUser: any = await generateUserDocument(userAuth, null);\n                setCurrentUser({\n                    user: {\n                        uid: signedUser?.uid,\n                        email: signedUser?.email,\n                        username: signedUser?.username,\n                        avatar: signedUser?.avatar,\n                        description: signedUser?.description,\n                        darkTheme: signedUser?.darkTheme,\n                    },\n                });\n            } else {\n                setCurrentUser({ user: null });\n            }\n        });\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    return <UserContext.Provider value={currentUser}>{children}</UserContext.Provider>;\n};\n\nexport default UserProvider;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx",["121"],"import React, { useContext } from 'react';\nimport {\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n} from 'reactstrap';\nimport { auth } from '../logic/firebase';\n\nimport { UserContext } from '../logic/providers/userProvider';\n\nconst PageHeader: React.FC = () => {\n    const { user } = useContext(UserContext);\n\n    const logOutHandler = (event: any) => {\n        event.preventDefault();\n        auth.signOut();\n    };\n\n    return (\n        <div>\n            <Navbar color=\"light\" light expand=\"md\">\n                <NavbarBrand href=\"/\">patternRepository</NavbarBrand>\n\n                <Nav className=\"\" navbar style={{ width: '-webkit-fill-available' }}>\n                    <NavItem>\n                        <NavLink href=\"/\">Home</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"/\">Browse patterns</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"/smth\">Smth</NavLink>\n                    </NavItem>\n                    <UncontrolledDropdown nav inNavbar style={{ marginLeft: 'auto' }}>\n                        <DropdownToggle nav caret>\n                            {`Welcome ${user?.username}`}\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            <DropdownItem href={`/profile/${user?.uid}`}>Profile</DropdownItem>\n                            <DropdownItem divider />\n                            <DropdownItem onClick={logOutHandler}>Log out</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                </Nav>\n            </Navbar>\n        </div>\n    );\n};\n\nexport default PageHeader;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx",["122","123","124","125","126","127","128","129"],"import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nimport firebaseConfig from './firebaseConfig';\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n} else {\r\n    firebase.app(); // if already initialized, use that one\r\n}\r\n\r\n// firebase.initializeApp();\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const storage = firebase.storage();\r\n\r\nconst getUserDocument = async (uid: any) => {\r\n    if (!uid) return null;\r\n    try {\r\n        const userDocument = await firestore.doc(`users/${uid}`).get();\r\n        const userAvatar = await storage.ref(`/avatars/${uid}`).getDownloadURL();\r\n        return {\r\n            uid,\r\n            ...userDocument.data(),\r\n            avatar: userAvatar,\r\n        };\r\n    } catch (error) {\r\n        console.error('Error fetching user', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const generateUserDocument = async (user: any, additionalData: any) => {\r\n    if (!user) return {};\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if (!snapshot.exists) {\r\n        const { email } = user;\r\n        try {\r\n            await userRef.set({\r\n                username: user.username,\r\n                email,\r\n                ...additionalData,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error creating user document', error);\r\n        }\r\n    }\r\n    return getUserDocument(user.uid);\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx",["130"],"import React, { useState } from 'react';\r\nimport { Button, Input, Label } from 'reactstrap';\r\nimport { auth, generateUserDocument } from '../../logic/firebase';\r\n\r\nconst SignUp: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordRepeat, setPasswordRepeat] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const createUserWithEmailAndPasswordHandler = async (event: any) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\r\n            generateUserDocument(user, { username });\r\n        } catch (errorData) {\r\n            setError('Error Signing up with email and password');\r\n        }\r\n\r\n        setUsername('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Label>Username</Label>\r\n            <Input\r\n                placeholder=\"Enter username\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n            />\r\n            <Label>E-mail</Label>\r\n            <Input\r\n                placeholder=\"Enter mail\"\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n            <Label>Password</Label>\r\n            <Input\r\n                placeholder=\"Enter password\"\r\n                value={password}\r\n                type=\"password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <Label>Repeat password</Label>\r\n            <Input\r\n                placeholder=\"Repeat password\"\r\n                value={passwordRepeat}\r\n                type=\"password\"\r\n                onChange={(e) => setPasswordRepeat(e.target.value)}\r\n            />\r\n\r\n            <p>{error}</p>\r\n            <Button block onClick={createUserWithEmailAndPasswordHandler}>\r\n                Sign up\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx",["131","132"],"import React, { useState, useCallback } from 'react';\r\nimport { Button, Input, Label } from 'reactstrap';\r\nimport { auth } from '../../logic/firebase';\r\n\r\nconst SignIn: React.FC = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const signInWithEmailAndPasswordHandler = useCallback(\r\n        (event: any) => {\r\n            event.preventDefault();\r\n            auth.signInWithEmailAndPassword(email, password).catch((errorData) => {\r\n                setError('Error signing in with password and email!');\r\n                console.error('Error signing in with password and email', errorData);\r\n            });\r\n        },\r\n        [email, password],\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Label>E-mail</Label>\r\n            <Input\r\n                placeholder=\"Enter email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n            <Label>password</Label>\r\n            <Input\r\n                placeholder=\"Enter password\"\r\n                value={password}\r\n                type=\"password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <p>{error}</p>\r\n            <Button block onClick={signInWithEmailAndPasswordHandler}>\r\n                Sign in\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\nexport default SignIn;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx",["133"],"import { useState } from 'react';\r\n\r\nimport { storage } from '../firebase';\r\n\r\nconst useStorage = (file: File | null) => {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [url, setUrl] = useState<string | null>(null);\r\n\r\n    // runs every time the file value changes\r\n    const uploadImage = (storageName: string, pictureName: string) => {\r\n        if (file) {\r\n            // storage ref\r\n            const storageRef = storage.ref(`${storageName}/${pictureName}`);\r\n\r\n            storageRef.put(file).on(\r\n                'state_changed',\r\n                (snap) => {\r\n                    // track the upload progress\r\n                    const percentage = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                    setProgress(percentage);\r\n                },\r\n                (err) => {\r\n                    setError(err.message);\r\n                },\r\n                async () => {\r\n                    // get the public download img url\r\n                    const downloadUrl = await storageRef.getDownloadURL();\r\n\r\n                    // save the url to local state\r\n                    setUrl(downloadUrl);\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    return { progress, url, error, uploadImage };\r\n};\r\nexport default useStorage;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx",["134","135","136","137","138"],"import React, { useState, useMemo, useContext, useEffect } from 'react';\r\nimport { Button, FormGroup, Input, Label } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\n\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport TagService from '../../logic/services/tagServices';\r\n\r\nimport { patternToAdd, fileWithUrl, tag, tagToAdd } from '../../logic/types';\r\n\r\ninterface PropsType {\r\n    closeModal: () => void;\r\n}\r\n\r\nconst AddPattern: React.FC<PropsType> = ({ closeModal }) => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [tags, setTags] = useState<tag[]>([]);\r\n    const [allTags, setAllTags] = useState<tag[]>([]);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>('');\r\n    const [difficulty, setDifficulty] = useState<number>(3);\r\n\r\n    const [newOpen, setNewOpen] = useState<boolean>(false);\r\n\r\n    const [patternPictures, setPatternPictures] = useState<fileWithUrl[]>([]);\r\n    const [finishedWorkPictures, setFinishedWorkPictures] = useState<fileWithUrl[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\n    const id = useMemo(\r\n        () =>\r\n            `${newOpen ? 'y' : ''}${(new Date().getTime() / 1000).toFixed(0)}${new Array(5)\r\n                .join()\r\n                .replace(/(.|$)/g, function () {\r\n                    return (Math.random() * 36)\r\n                        .toString(36)\r\n                        [Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\r\n                })}`,\r\n        [newOpen],\r\n    );\r\n\r\n    const onTagDataChange = (items: any) => {\r\n        let loadedTags: tag[] = [];\r\n        loadedTags = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: tagId } = item;\r\n            const data = item.data();\r\n\r\n            loadedTags.push({\r\n                id: tagId,\r\n                label: data.label,\r\n                value: tagId,\r\n            });\r\n        });\r\n\r\n        setAllTags(loadedTags);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = TagService.getAll().orderBy('label', 'asc').onSnapshot(onTagDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    const HandlePatternImageChange = (selectedFile: File | null) => {\r\n        if (selectedFile) {\r\n            if (imageTypes.includes(selectedFile.type)) {\r\n                const maxAllowSize = 5 * 1024 * 1024;\r\n                if (selectedFile.size > maxAllowSize) {\r\n                    setError('Image is too big! Maximum size is 5MB.');\r\n                } else {\r\n                    const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                    storageRef.put(selectedFile).on(\r\n                        'state_changed',\r\n                        () => {},\r\n                        (err) => {\r\n                            setError(err.message);\r\n                        },\r\n                        async () => {\r\n                            const downloadUrl = await storageRef.getDownloadURL();\r\n                            setPatternPictures([\r\n                                ...patternPictures,\r\n                                { file: selectedFile, url: downloadUrl },\r\n                            ]);\r\n                        },\r\n                    );\r\n                }\r\n            } else {\r\n                setError('Please use only select an image file (png or jpg)');\r\n            }\r\n        }\r\n    };\r\n\r\n    const HandleWorkImageChange = (selectedFile: File | null) => {\r\n        if (selectedFile) {\r\n            if (imageTypes.includes(selectedFile.type)) {\r\n                const maxAllowSize = 5 * 1024 * 1024;\r\n                if (selectedFile.size > maxAllowSize) {\r\n                    setError('Image is too big! Maximum size is 5MB.');\r\n                } else {\r\n                    const storageRef = storage.ref(`finishedWorkImages/${id}/${selectedFile.name}`);\r\n\r\n                    storageRef.put(selectedFile).on(\r\n                        'state_changed',\r\n                        () => {},\r\n                        (err) => {\r\n                            setError(err.message);\r\n                        },\r\n                        async () => {\r\n                            const downloadUrl = await storageRef.getDownloadURL();\r\n                            setFinishedWorkPictures([\r\n                                ...finishedWorkPictures,\r\n                                { file: selectedFile, url: downloadUrl },\r\n                            ]);\r\n                        },\r\n                    );\r\n                }\r\n            } else {\r\n                setError('Please use only select an image file (png or jpg)');\r\n            }\r\n        }\r\n    };\r\n\r\n    const removePaternPicture = (index: number) => {\r\n        const newPictures: fileWithUrl[] = [...patternPictures.filter((_, i) => i !== index)];\r\n        const fileToRemove: fileWithUrl = patternPictures[index];\r\n        const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.file.name}`);\r\n        storageRef\r\n            .delete()\r\n            .then(() => {\r\n                setPatternPictures(newPictures);\r\n            })\r\n            .catch((err) => {\r\n                setError(err.message);\r\n            });\r\n    };\r\n\r\n    const removeWorkPicture = (index: number) => {\r\n        const newPictures: fileWithUrl[] = [...finishedWorkPictures.filter((_, i) => i !== index)];\r\n        const fileToRemove: fileWithUrl = finishedWorkPictures[index];\r\n        const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.file.name}`);\r\n        storageRef\r\n            .delete()\r\n            .then(() => {\r\n                setFinishedWorkPictures(newPictures);\r\n            })\r\n            .catch((err) => {\r\n                setError(err.message);\r\n            });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: patternPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            finishedWorkImages: finishedWorkPictures.map((picture) => ({\r\n                name: picture.file.name,\r\n                url: picture.url,\r\n            })),\r\n            owner: user?.uid ? user.uid : null,\r\n            tags: tags.map((t) => t.id),\r\n        };\r\n\r\n        PatternService.set(id, data)\r\n            .then(() => {\r\n                setNewOpen(true);\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    };\r\n\r\n    const handleTagAddition = () => {\r\n        if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setAllTags([...allTags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        patternPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        finishedWorkPictures.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.file.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            setNewOpen(true);\r\n            closeModal();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{}}>\r\n            <h1>Add a new pattern</h1>\r\n\r\n            <FormGroup>\r\n                <Label for=\"title\">Title</Label>\r\n                <Input\r\n                    name=\"patternTitle\"\r\n                    id=\"title\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"tags\">Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        const enterKeyCode = 13;\r\n                        if (e.keyCode === enterKeyCode) {\r\n                            handleTagAddition();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"difficulty\">Difficulty</Label>\r\n                <Input\r\n                    type=\"range\"\r\n                    id=\"difficulty\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"books\">Add to...</Label>\r\n                <Input type=\"select\" multiple name=\"patternBooks\" id=\"books\">\r\n                    <option>Book 1</option>\r\n                    <option>Book 2 </option>\r\n                    <option>Book 3</option>\r\n                </Input>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"description\">Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"description\" style={{ display: 'block' }}>\r\n                    Pattern pictures\r\n                </Label>\r\n                <>\r\n                    {patternPictures.map((picture, index) => (\r\n                        <div key={picture.file.name}>\r\n                            <Label>{picture.file.name}</Label>\r\n                            <Button color=\"danger\" onClick={() => removePaternPicture(index)}>\r\n                                x\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                    <Input\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                    <Button color=\"info\" onClick={() => {}}>\r\n                        +\r\n                    </Button>\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"description\" style={{ display: 'block' }}>\r\n                    Finished works\r\n                </Label>\r\n                <>\r\n                    {finishedWorkPictures.map((picture, index) => (\r\n                        <div key={picture.file.name}>\r\n                            <Label>{picture.file.name}</Label>\r\n                            <Button color=\"danger\" onClick={() => removeWorkPicture(index)}>\r\n                                x\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                    <Input\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                    <Button color=\"info\" onClick={() => {}}>\r\n                        +\r\n                    </Button>\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <p>{error}</p>}\r\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                <Button color=\"info\" onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n\r\n                <Button color=\"info\" style={{ marginLeft: 'auto' }} onClick={handleSubmit}>\r\n                    Save\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx",["139","140","141"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx",["142","143"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport PatternService from '../../logic/services/patternServices';\r\n\r\nimport { pattern as patternType, basicImage } from '../../logic/types';\r\n\r\ninterface PropsType {\r\n    setCurrentPattern: (pattern: patternType) => void;\r\n}\r\n\r\nconst List: React.FC<PropsType> = React.memo(({ setCurrentPattern }) => {\r\n    const [patterns, setPatterns] = useState<patternType[]>([]);\r\n\r\n    const onDataChange = useCallback((items: any) => {\r\n        let loadedPatterns: patternType[] = [];\r\n        loadedPatterns = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id } = item;\r\n            const data = item.data();\r\n\r\n            loadedPatterns.push({\r\n                id,\r\n                title: data.title,\r\n                description: data.description,\r\n                difficulty: data.difficulty,\r\n                owner: data.owner,\r\n                patternImages: data.patternImages,\r\n                finishedWorkImages: data.finishedWorkImages,\r\n            });\r\n        });\r\n\r\n        setPatterns(loadedPatterns);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = PatternService.getAll()\r\n            .orderBy('title', 'asc')\r\n            .onSnapshot(onDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, [onDataChange]);\r\n\r\n    return (\r\n        <div>\r\n            {patterns.map((pattern: patternType) => (\r\n                <div key={pattern.id} style={{ width: '33%', backgroundColor: 'aliceblue' }}>\r\n                    <button type=\"button\" onClick={() => setCurrentPattern(pattern)}>\r\n                        Detail\r\n                    </button>\r\n                    <h2>{pattern.title}</h2>\r\n                    {pattern.finishedWorkImages.slice(0, 3).map((image: basicImage) => (\r\n                        <img\r\n                            key={image.name}\r\n                            src={image.url}\r\n                            alt={image.name}\r\n                            width=\"100px\"\r\n                            height=\"100px\"\r\n                        />\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n});\r\n\r\nList.displayName = 'List';\r\n\r\nexport default List;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx",["144","145","146","147","148","149"],"import { firestore, auth } from '../firebase';\r\nimport { patternToAdd } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/patterns');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return [];\r\n};\r\n\r\nconst create = (data: patternToAdd) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: patternToAdd) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst PatternService = {\r\n    getAll,\r\n    getAllMine,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default PatternService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx",["150"],"import React, { useContext } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\nimport { pattern as patternType } from '../../logic/types';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n    closeModal: () => void;\r\n    currentPattern: patternType | null;\r\n}\r\n\r\nconst ViewPattern: React.FC<PropsType> = React.memo(({ openEdit, closeModal, currentPattern }) => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const handleClose = () => {\r\n        closeModal();\r\n    };\r\n\r\n    return (\r\n        <div style={{}}>\r\n            {currentPattern?.owner === user?.uid && (\r\n                <p>\r\n                    This is how other users see this patterns. Click{' '}\r\n                    <Button\r\n                        onClick={() => openEdit(true)}\r\n                        color=\"link\"\r\n                        style={{ padding: '0', lineHeight: '1em' }}\r\n                    >\r\n                        here\r\n                    </Button>{' '}\r\n                    to edit.\r\n                </p>\r\n            )}\r\n\r\n            <h1>{currentPattern ? currentPattern.title : 'Untitled'}</h1>\r\n\r\n            <h3>Tags</h3>\r\n\r\n            <h3>{currentPattern?.difficulty}</h3>\r\n\r\n            <h3>Books</h3>\r\n\r\n            <h3>Description</h3>\r\n            <div\r\n                dangerouslySetInnerHTML={{\r\n                    __html: currentPattern?.description ? currentPattern.description : '',\r\n                }}\r\n            />\r\n\r\n            <h2 style={{ display: 'block' }}>Pattern pictures</h2>\r\n            <>\r\n                {currentPattern?.patternImages.map((picture) => (\r\n                    <img\r\n                        key={picture.name}\r\n                        src={picture.url}\r\n                        alt={picture.name}\r\n                        width=\"100px\"\r\n                        height=\"100px\"\r\n                    />\r\n                ))}\r\n            </>\r\n\r\n            <h2 style={{ display: 'block' }}>Finished works</h2>\r\n            <>\r\n                {currentPattern?.finishedWorkImages.map((picture) => (\r\n                    <img\r\n                        key={picture.name}\r\n                        src={picture.url}\r\n                        alt={picture.name}\r\n                        width=\"100px\"\r\n                        height=\"100px\"\r\n                    />\r\n                ))}\r\n            </>\r\n\r\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                <Button color=\"info\" onClick={handleClose}>\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nViewPattern.displayName = 'ViewPattern';\r\n\r\nexport default ViewPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx",["151","152","153","154"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, FormGroup, Input, Label } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nimport { storage } from '../../logic/firebase';\r\nimport PatternService from '../../logic/services/patternServices';\r\nimport TagService from '../../logic/services/tagServices';\r\n\r\nimport { pattern, patternToAdd, basicImage, tag as tagType, tagToAdd } from '../../logic/types';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n    closeModal: () => void;\r\n    currentPattern: pattern;\r\n}\r\n\r\nconst EditPattern: React.FC<PropsType> = React.memo(({ openEdit, closeModal, currentPattern }) => {\r\n    const [title, setTitle] = useState<string>(currentPattern.title ? currentPattern.title : '');\r\n    const [tags, setTags] = useState<tagType[]>([]);\r\n    const [allTags, setAllTags] = useState<tagType[]>([]);\r\n    const [newTag, setNewTag] = useState<string>('');\r\n    const [description, setDescription] = useState<string>(\r\n        currentPattern.description ? currentPattern.description : '',\r\n    );\r\n    const [difficulty, setDifficulty] = useState<number>(\r\n        currentPattern.difficulty ? currentPattern.difficulty : 3,\r\n    );\r\n\r\n    const [patternImages, setPatternImages] = useState<basicImage[]>(\r\n        currentPattern.patternImages ? currentPattern.patternImages : [],\r\n    );\r\n    const [finishedWorkImages, setFinishedWorkImages] = useState<basicImage[]>(\r\n        currentPattern.finishedWorkImages ? currentPattern.finishedWorkImages : [],\r\n    );\r\n\r\n    const [newPatternImages, setNewPatternImages] = useState<basicImage[]>([]);\r\n    const [newFinishedWorkImages, setNewFinishedWorkImages] = useState<basicImage[]>([]);\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\n    const { id } = currentPattern;\r\n\r\n    const onTagDataChange = (items: any) => {\r\n        let loadedTags: tagType[] = [];\r\n        loadedTags = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: tagId } = item;\r\n            const data = item.data();\r\n\r\n            loadedTags.push({\r\n                id: tagId,\r\n                label: data.label,\r\n                value: tagId,\r\n            });\r\n        });\r\n\r\n        setAllTags(loadedTags);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = TagService.getAll().orderBy('label', 'asc').onSnapshot(onTagDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    const HandlePatternImageChange = (selectedFile: File | null) => {\r\n        if (selectedFile) {\r\n            if (imageTypes.includes(selectedFile.type)) {\r\n                const maxAllowSize = 5 * 1024 * 1024;\r\n                if (selectedFile.size > maxAllowSize) {\r\n                    setError('Image is too big! Maximum size is 5MB.');\r\n                } else {\r\n                    const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\r\n\r\n                    storageRef.put(selectedFile).on(\r\n                        'state_changed',\r\n                        () => {},\r\n                        (err) => {\r\n                            setError(err.message);\r\n                        },\r\n                        async () => {\r\n                            const downloadUrl = await storageRef.getDownloadURL();\r\n                            setNewPatternImages([\r\n                                ...newPatternImages,\r\n                                { name: selectedFile.name, url: downloadUrl },\r\n                            ]);\r\n                        },\r\n                    );\r\n                }\r\n            } else {\r\n                setError('Please use only select an image file (png or jpg)');\r\n            }\r\n        }\r\n    };\r\n\r\n    const HandleWorkImageChange = (selectedFile: File | null) => {\r\n        if (selectedFile) {\r\n            if (imageTypes.includes(selectedFile.type)) {\r\n                const maxAllowSize = 5 * 1024 * 1024;\r\n                if (selectedFile.size > maxAllowSize) {\r\n                    setError('Image is too big! Maximum size is 5MB.');\r\n                } else {\r\n                    const storageRef = storage.ref(`finishedWorkImages/${id}/${selectedFile.name}`);\r\n\r\n                    storageRef.put(selectedFile).on(\r\n                        'state_changed',\r\n                        () => {},\r\n                        (err) => {\r\n                            setError(err.message);\r\n                        },\r\n                        async () => {\r\n                            const downloadUrl = await storageRef.getDownloadURL();\r\n                            setNewFinishedWorkImages([\r\n                                ...newFinishedWorkImages,\r\n                                { name: selectedFile.name, url: downloadUrl },\r\n                            ]);\r\n                        },\r\n                    );\r\n                }\r\n            } else {\r\n                setError('Please use only select an image file (png or jpg)');\r\n            }\r\n        }\r\n    };\r\n\r\n    const removePaternPicture = (index: number) => {\r\n        if (index < patternImages.length) {\r\n            const newPictures: basicImage[] = [...patternImages.filter((_, i) => i !== index)];\r\n            const fileToRemove: basicImage = patternImages[index];\r\n            const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setPatternImages(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        } else {\r\n            const newPictures: basicImage[] = [...newPatternImages.filter((_, i) => i !== index)];\r\n            const fileToRemove: basicImage = newPatternImages[index];\r\n            const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setNewPatternImages(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    const removeWorkPicture = (index: number) => {\r\n        if (index < finishedWorkImages.length) {\r\n            const newPictures: basicImage[] = [...finishedWorkImages.filter((_, i) => i !== index)];\r\n            const fileToRemove: basicImage = finishedWorkImages[index];\r\n            const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setFinishedWorkImages(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        } else {\r\n            const newPictures: basicImage[] = [\r\n                ...newFinishedWorkImages.filter((_, i) => i !== index),\r\n            ];\r\n            const fileToRemove: basicImage = newFinishedWorkImages[index];\r\n            const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\r\n            storageRef\r\n                .delete()\r\n                .then(() => {\r\n                    setNewFinishedWorkImages(newPictures);\r\n                })\r\n                .catch((err) => {\r\n                    setError(err.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        const data: patternToAdd = {\r\n            title,\r\n            description,\r\n            difficulty,\r\n            patternImages: [...patternImages, ...newPatternImages],\r\n            finishedWorkImages: [...finishedWorkImages, ...newFinishedWorkImages],\r\n            tags: tags.map((t) => t.id),\r\n        };\r\n\r\n        PatternService.update(id, data)\r\n            .then(() => {\r\n                closeModal();\r\n            })\r\n            .catch((e) => {\r\n                setError(e?.message);\r\n            });\r\n    };\r\n\r\n    const handleTagAddition = () => {\r\n        if (newTag) {\r\n            const data: tagToAdd = {\r\n                label: newTag,\r\n            };\r\n\r\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\r\n\r\n            TagService.set(`${tagId}`, data)\r\n                .then(() => {\r\n                    setAllTags([...allTags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\r\n                    setNewTag('');\r\n                })\r\n                .catch((e) => {\r\n                    setError(e?.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        let newError = 'Errors:';\r\n        newError = '';\r\n        newPatternImages.forEach((picture) => {\r\n            storage\r\n                .ref(`patternImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        newFinishedWorkImages.forEach((picture) => {\r\n            storage\r\n                .ref(`finishedWorkImages/${id}/${picture.name}`)\r\n                .delete()\r\n                .catch((err: Error) => {\r\n                    newError.concat(err.message);\r\n                });\r\n        });\r\n        if (newError.length) {\r\n            setError(newError);\r\n        } else {\r\n            openEdit(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{}}>\r\n            <h1>Edit this pattern</h1>\r\n\r\n            <FormGroup>\r\n                <Label for=\"title\">Title</Label>\r\n                <Input\r\n                    name=\"patternTitle\"\r\n                    id=\"title\"\r\n                    placeholder=\"Enter title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"tags\">Tags</Label>\r\n                <Select\r\n                    options={allTags}\r\n                    value={tags}\r\n                    isMulti\r\n                    backspaceRemovesValue\r\n                    inputValue={newTag}\r\n                    onKeyDown={(e) => {\r\n                        const enterKeyCode = 13;\r\n                        if (e.keyCode === enterKeyCode) {\r\n                            handleTagAddition();\r\n                        }\r\n                    }}\r\n                    onInputChange={(e) => {\r\n                        setNewTag(e);\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setTags([...e]);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"difficulty\">Difficulty</Label>\r\n                <Input\r\n                    type=\"range\"\r\n                    id=\"difficulty\"\r\n                    name=\"patternDifficulty\"\r\n                    min={1}\r\n                    max={5}\r\n                    step={1}\r\n                    value={difficulty}\r\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"books\">Add to...</Label>\r\n                <Input type=\"select\" multiple name=\"patternBooks\" id=\"books\">\r\n                    <option>Book 1</option>\r\n                    <option>Book 2 </option>\r\n                    <option>Book 3</option>\r\n                </Input>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"description\">Description</Label>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={description}\r\n                    onChange={(event: any, editor: any) => {\r\n                        setDescription(editor.getData());\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"description\" style={{ display: 'block' }}>\r\n                    Pattern pictures\r\n                </Label>\r\n                <>\r\n                    {patternImages.map((picture: basicImage, index) => (\r\n                        <div key={picture.name}>\r\n                            <Label>{picture.name}</Label>\r\n                            <img src={picture.url} alt=\"pattern\" width=\"100px\" height=\"100px\" />\r\n                            <Button color=\"danger\" onClick={() => removePaternPicture(index)}>\r\n                                x\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                    {newPatternImages.map((picture: basicImage, index) => (\r\n                        <div key={picture.name}>\r\n                            <Label>{picture.name}</Label>\r\n                            <img src={picture.url} alt=\"pattern\" width=\"100px\" height=\"100px\" />\r\n                            <Button color=\"danger\" onClick={() => removePaternPicture(index)}>\r\n                                x\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                    <Input\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n                <Label for=\"description\" style={{ display: 'block' }}>\r\n                    Finished works\r\n                </Label>\r\n                <>\r\n                    {finishedWorkImages.map((picture, index) => (\r\n                        <div key={picture.name}>\r\n                            <Label>{picture.name}</Label>\r\n                            <img\r\n                                src={picture.url}\r\n                                alt=\"finishedWork\"\r\n                                width=\"100px\"\r\n                                height=\"100px\"\r\n                            />\r\n                            <Button color=\"danger\" onClick={() => removeWorkPicture(index)}>\r\n                                x\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                    {newFinishedWorkImages.map((picture, index) => (\r\n                        <div key={picture.name}>\r\n                            <Label>{picture.name}</Label>\r\n                            <img\r\n                                src={picture.url}\r\n                                alt=\"finishedWork\"\r\n                                width=\"100px\"\r\n                                height=\"100px\"\r\n                            />\r\n                            <Button color=\"danger\" onClick={() => removeWorkPicture(index)}>\r\n                                x\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                    <Input\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                </>\r\n            </FormGroup>\r\n\r\n            {error && <p>{error}</p>}\r\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                <Button color=\"info\" onClick={handleCancel}>\r\n                    Cancel\r\n                </Button>\r\n\r\n                <Button color=\"info\" style={{ marginLeft: 'auto' }} onClick={handleSubmit}>\r\n                    Save\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nEditPattern.displayName = 'EditPattern';\r\n\r\nexport default EditPattern;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx",["155","156","157","158","159"],"import { firestore } from '../firebase';\r\nimport { tagToAdd } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/tags');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst create = (data: tagToAdd) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: tagToAdd) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: tagToAdd) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst TagService = {\r\n    getAll,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default TagService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx",[],{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":21,"column":35,"nodeType":"172","messageId":"173","endLine":21,"endColumn":38,"suggestions":"174"},{"ruleId":"170","severity":1,"message":"171","line":20,"column":35,"nodeType":"172","messageId":"173","endLine":20,"endColumn":38,"suggestions":"175"},{"ruleId":"170","severity":1,"message":"171","line":19,"column":37,"nodeType":"172","messageId":"173","endLine":19,"endColumn":40,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":30,"column":9,"nodeType":"179","messageId":"180","endLine":30,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":35,"column":37,"nodeType":"183","messageId":"184","endLine":35,"endColumn":78},{"ruleId":"181","severity":1,"message":"185","line":35,"column":44,"nodeType":"186","messageId":"187","endLine":35,"endColumn":53},{"ruleId":"170","severity":1,"message":"171","line":35,"column":50,"nodeType":"172","messageId":"173","endLine":35,"endColumn":53,"suggestions":"188"},{"ruleId":"181","severity":1,"message":"189","line":35,"column":55,"nodeType":"186","messageId":"187","endLine":35,"endColumn":74},{"ruleId":"170","severity":1,"message":"171","line":35,"column":71,"nodeType":"172","messageId":"173","endLine":35,"endColumn":74,"suggestions":"190"},{"ruleId":"177","severity":1,"message":"178","line":48,"column":13,"nodeType":"179","messageId":"180","endLine":48,"endColumn":26},{"ruleId":"170","severity":1,"message":"171","line":13,"column":65,"nodeType":"172","messageId":"173","endLine":13,"endColumn":68,"suggestions":"191"},{"ruleId":"170","severity":1,"message":"171","line":12,"column":17,"nodeType":"172","messageId":"173","endLine":12,"endColumn":20,"suggestions":"192"},{"ruleId":"177","severity":1,"message":"178","line":16,"column":17,"nodeType":"179","messageId":"180","endLine":16,"endColumn":30},{"ruleId":"181","severity":1,"message":"182","line":5,"column":20,"nodeType":"183","messageId":"184","endLine":5,"endColumn":42},{"ruleId":"193","severity":1,"message":"194","line":41,"column":36,"nodeType":"195","messageId":"196","endLine":41,"endColumn":45},{"ruleId":"170","severity":1,"message":"171","line":49,"column":37,"nodeType":"172","messageId":"173","endLine":49,"endColumn":40,"suggestions":"197"},{"ruleId":"170","severity":1,"message":"171","line":53,"column":35,"nodeType":"172","messageId":"173","endLine":53,"endColumn":38,"suggestions":"198"},{"ruleId":"170","severity":1,"message":"171","line":301,"column":39,"nodeType":"172","messageId":"173","endLine":301,"endColumn":42,"suggestions":"199"},{"ruleId":"170","severity":1,"message":"171","line":301,"column":52,"nodeType":"172","messageId":"173","endLine":301,"endColumn":55,"suggestions":"200"},{"ruleId":"201","severity":2,"message":"202","line":1,"column":13,"nodeType":"186","messageId":"203","endLine":1,"endColumn":17},{"ruleId":"201","severity":2,"message":"204","line":3,"column":6,"nodeType":"186","messageId":"203","endLine":3,"endColumn":14},{"ruleId":"201","severity":2,"message":"205","line":11,"column":13,"nodeType":"186","messageId":"203","endLine":11,"endColumn":20},{"ruleId":"170","severity":1,"message":"171","line":13,"column":46,"nodeType":"172","messageId":"173","endLine":13,"endColumn":49,"suggestions":"206"},{"ruleId":"170","severity":1,"message":"171","line":17,"column":35,"nodeType":"172","messageId":"173","endLine":17,"endColumn":38,"suggestions":"207"},{"ruleId":"181","severity":1,"message":"182","line":6,"column":16,"nodeType":"183","messageId":"184","endLine":6,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":10,"column":20,"nodeType":"183","messageId":"184","endLine":10,"endColumn":25},{"ruleId":"181","severity":1,"message":"182","line":17,"column":16,"nodeType":"183","messageId":"184","endLine":17,"endColumn":39},{"ruleId":"181","severity":1,"message":"182","line":21,"column":16,"nodeType":"183","messageId":"184","endLine":21,"endColumn":52},{"ruleId":"181","severity":1,"message":"182","line":25,"column":13,"nodeType":"183","messageId":"184","endLine":25,"endColumn":49},{"ruleId":"181","severity":1,"message":"182","line":29,"column":16,"nodeType":"183","messageId":"184","endLine":29,"endColumn":31},{"ruleId":"208","severity":1,"message":"209","line":45,"column":17,"nodeType":"210","endLine":47,"endColumn":19},{"ruleId":"170","severity":1,"message":"171","line":47,"column":37,"nodeType":"172","messageId":"173","endLine":47,"endColumn":40,"suggestions":"211"},{"ruleId":"170","severity":1,"message":"171","line":51,"column":35,"nodeType":"172","messageId":"173","endLine":51,"endColumn":38,"suggestions":"212"},{"ruleId":"170","severity":1,"message":"171","line":320,"column":39,"nodeType":"172","messageId":"173","endLine":320,"endColumn":42,"suggestions":"213"},{"ruleId":"170","severity":1,"message":"171","line":320,"column":52,"nodeType":"172","messageId":"173","endLine":320,"endColumn":55,"suggestions":"214"},{"ruleId":"181","severity":1,"message":"182","line":6,"column":16,"nodeType":"183","messageId":"184","endLine":6,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":10,"column":16,"nodeType":"183","messageId":"184","endLine":10,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":14,"column":16,"nodeType":"183","messageId":"184","endLine":14,"endColumn":48},{"ruleId":"181","severity":1,"message":"182","line":18,"column":13,"nodeType":"183","messageId":"184","endLine":18,"endColumn":45},{"ruleId":"181","severity":1,"message":"182","line":22,"column":16,"nodeType":"183","messageId":"184","endLine":22,"endColumn":31},"lines-around-directive",["215"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["216","217"],["218","219"],["220","221"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'user' should be typed with a non-any type.","Identifier","anyTypedArg",["222","223"],"Argument 'additionalData' should be typed with a non-any type.",["224","225"],["226","227"],["228","229"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed",["230","231"],["232","233"],["234","235"],["236","237"],"@typescript-eslint/naming-convention","Type Alias name `user` must match one of the following formats: PascalCase","doesNotMatchFormat","Type Alias name `userInfo` must match one of the following formats: PascalCase","Type Alias name `picture` must match one of the following formats: PascalCase",["238","239"],["240","241"],"react/no-danger","Dangerous property 'dangerouslySetInnerHTML' found","JSXAttribute",["242","243"],["244","245"],["246","247"],["248","249"],"padding-line-between-statements",{"messageId":"250","fix":"251","desc":"252"},{"messageId":"253","fix":"254","desc":"255"},{"messageId":"250","fix":"256","desc":"252"},{"messageId":"253","fix":"257","desc":"255"},{"messageId":"250","fix":"258","desc":"252"},{"messageId":"253","fix":"259","desc":"255"},{"messageId":"250","fix":"260","desc":"252"},{"messageId":"253","fix":"261","desc":"255"},{"messageId":"250","fix":"262","desc":"252"},{"messageId":"253","fix":"263","desc":"255"},{"messageId":"250","fix":"264","desc":"252"},{"messageId":"253","fix":"265","desc":"255"},{"messageId":"250","fix":"266","desc":"252"},{"messageId":"253","fix":"267","desc":"255"},{"messageId":"250","fix":"268","desc":"252"},{"messageId":"253","fix":"269","desc":"255"},{"messageId":"250","fix":"270","desc":"252"},{"messageId":"253","fix":"271","desc":"255"},{"messageId":"250","fix":"272","desc":"252"},{"messageId":"253","fix":"273","desc":"255"},{"messageId":"250","fix":"274","desc":"252"},{"messageId":"253","fix":"275","desc":"255"},{"messageId":"250","fix":"276","desc":"252"},{"messageId":"253","fix":"277","desc":"255"},{"messageId":"250","fix":"278","desc":"252"},{"messageId":"253","fix":"279","desc":"255"},{"messageId":"250","fix":"280","desc":"252"},{"messageId":"253","fix":"281","desc":"255"},{"messageId":"250","fix":"282","desc":"252"},{"messageId":"253","fix":"283","desc":"255"},{"messageId":"250","fix":"284","desc":"252"},{"messageId":"253","fix":"285","desc":"255"},{"messageId":"250","fix":"286","desc":"252"},{"messageId":"253","fix":"287","desc":"255"},"suggestUnknown",{"range":"288","text":"289"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"288","text":"290"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"291","text":"289"},{"range":"291","text":"290"},{"range":"292","text":"289"},{"range":"292","text":"290"},{"range":"293","text":"289"},{"range":"293","text":"290"},{"range":"294","text":"289"},{"range":"294","text":"290"},{"range":"295","text":"289"},{"range":"295","text":"290"},{"range":"296","text":"289"},{"range":"296","text":"290"},{"range":"297","text":"289"},{"range":"297","text":"290"},{"range":"298","text":"289"},{"range":"298","text":"290"},{"range":"299","text":"289"},{"range":"299","text":"290"},{"range":"300","text":"289"},{"range":"300","text":"290"},{"range":"301","text":"289"},{"range":"301","text":"290"},{"range":"302","text":"289"},{"range":"302","text":"290"},{"range":"303","text":"289"},{"range":"303","text":"290"},{"range":"304","text":"289"},{"range":"304","text":"290"},{"range":"305","text":"289"},{"range":"305","text":"290"},{"range":"306","text":"289"},{"range":"306","text":"290"},[609,612],"unknown","never",[444,447],[522,525],[1007,1010],[1028,1031],[538,541],[427,430],[1964,1967],[2074,2077],[10844,10847],[10857,10860],[483,486],[609,612],[2035,2038],[2149,2152],[11943,11946],[11956,11959]]