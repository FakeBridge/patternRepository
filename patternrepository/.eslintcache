[{"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx":"1","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx":"2","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx":"3","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx":"4","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx":"5","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx":"6","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx":"7","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx":"8","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx":"9","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx":"10","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx":"11","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx":"12","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx":"13","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx":"14","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx":"15","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx":"16","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx":"17","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx":"18","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx":"19","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx":"20","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx":"21","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx":"22","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx":"23","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx":"24","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx":"25","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx":"26","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx":"27","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx":"28","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx":"29","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx":"30","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx":"31","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx":"32","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx":"33","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx":"34","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx":"35","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\usersProvider.tsx":"36","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\userServices.tsx":"37","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\likedPatternsServices.tsx":"38","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\bookContainer.tsx":"39","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\viewBook.tsx":"40","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\editBook.tsx":"41","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\followedUsersService.tsx":"42","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\search.tsx":"43","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\commentsService.tsx":"44"},{"size":826,"mtime":1620514564335,"results":"45","hashOfConfig":"46"},{"size":275,"mtime":1618591518992,"results":"47","hashOfConfig":"46"},{"size":1405,"mtime":1618832426865,"results":"48","hashOfConfig":"46"},{"size":1421,"mtime":1618524201234,"results":"49","hashOfConfig":"46"},{"size":1808,"mtime":1618764077833,"results":"50","hashOfConfig":"46"},{"size":1545,"mtime":1618610348765,"results":"51","hashOfConfig":"46"},{"size":1535,"mtime":1618524201222,"results":"52","hashOfConfig":"46"},{"size":135,"mtime":1618332767713,"results":"53","hashOfConfig":"46"},{"size":745,"mtime":1620431535263,"results":"54","hashOfConfig":"46"},{"size":3271,"mtime":1618610348755,"results":"55","hashOfConfig":"46"},{"size":415,"mtime":1617579618712,"results":"56","hashOfConfig":"46"},{"size":1768,"mtime":1618524201223,"results":"57","hashOfConfig":"46"},{"size":4984,"mtime":1618610348762,"results":"58","hashOfConfig":"46"},{"size":10544,"mtime":1620514389125,"results":"59","hashOfConfig":"46"},{"size":1362,"mtime":1617579618712,"results":"60","hashOfConfig":"46"},{"size":9716,"mtime":1620514344809,"results":"61","hashOfConfig":"46"},{"size":15472,"mtime":1620514169590,"results":"62","hashOfConfig":"46"},{"size":196,"mtime":1617283949558,"results":"63","hashOfConfig":"46"},{"size":12172,"mtime":1620514981344,"results":"64","hashOfConfig":"46"},{"size":1248,"mtime":1620514004016,"results":"65","hashOfConfig":"46"},{"size":1037,"mtime":1618336456802,"results":"66","hashOfConfig":"46"},{"size":9902,"mtime":1620515384979,"results":"67","hashOfConfig":"46"},{"size":16991,"mtime":1620514255167,"results":"68","hashOfConfig":"46"},{"size":650,"mtime":1618763627960,"results":"69","hashOfConfig":"46"},{"size":11188,"mtime":1620514920302,"results":"70","hashOfConfig":"46"},{"size":1146,"mtime":1618761398340,"results":"71","hashOfConfig":"46"},{"size":2668,"mtime":1618610348757,"results":"72","hashOfConfig":"46"},{"size":1005,"mtime":1618610348767,"results":"73","hashOfConfig":"46"},{"size":1319,"mtime":1618610348766,"results":"74","hashOfConfig":"46"},{"size":1446,"mtime":1620507610505,"results":"75","hashOfConfig":"46"},{"size":279,"mtime":1618610348766,"results":"76","hashOfConfig":"46"},{"size":1175,"mtime":1618688616561,"results":"77","hashOfConfig":"46"},{"size":2586,"mtime":1618688616563,"results":"78","hashOfConfig":"46"},{"size":2458,"mtime":1618685794822,"results":"79","hashOfConfig":"46"},{"size":1653,"mtime":1618688616563,"results":"80","hashOfConfig":"46"},{"size":1355,"mtime":1620431535266,"results":"81","hashOfConfig":"46"},{"size":229,"mtime":1620338532216,"results":"82","hashOfConfig":"46"},{"size":389,"mtime":1620338532214,"results":"83","hashOfConfig":"46"},{"size":1072,"mtime":1620431535260,"results":"84","hashOfConfig":"46"},{"size":3825,"mtime":1620431535261,"results":"85","hashOfConfig":"46"},{"size":2672,"mtime":1620431535261,"results":"86","hashOfConfig":"46"},{"size":392,"mtime":1620431535266,"results":"87","hashOfConfig":"46"},{"size":8294,"mtime":1620506700824,"results":"88","hashOfConfig":"46"},{"size":681,"mtime":1620511350419,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g8f8c4",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"172"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"172"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"94"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"94"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"94"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"94"},"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\App.tsx",[],["205","206","207","208","209"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\navigation.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\userProvider.tsx",["210"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { auth, generateUserDocument } from '../firebase';\r\nimport { user } from '../types';\r\n\r\nexport const UserContext = createContext<{ user: user }>({\r\n    user: null,\r\n});\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UserProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState<{ user: user }>({\r\n        user: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (userAuth) => {\r\n            if (userAuth) {\r\n                const signedUser: any = await generateUserDocument(userAuth, null);\r\n                setCurrentUser({\r\n                    user: {\r\n                        uid: signedUser?.uid,\r\n                        email: signedUser?.email,\r\n                        username: signedUser?.username,\r\n                        avatar: signedUser?.avatar,\r\n                        description: signedUser?.description,\r\n                        darkTheme: signedUser?.darkTheme,\r\n                    },\r\n                });\r\n            } else {\r\n                setCurrentUser({ user: null });\r\n            }\r\n        });\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    return <UserContext.Provider value={currentUser}>{children}</UserContext.Provider>;\r\n};\r\n\r\nexport default UserProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\pageHeader.tsx",["211"],"import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { auth } from '../logic/firebase';\r\n\r\nimport { UserContext } from '../logic/providers/userProvider';\r\n\r\nimport { PageHeader as PH, HeaderName, Navigation, NavItem } from '../design/styledComponents';\r\n\r\nconst PageHeader: React.FC = () => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const logOutHandler = (event: any) => {\r\n        event.preventDefault();\r\n        auth.signOut();\r\n    };\r\n\r\n    return (\r\n        <PH>\r\n            <HeaderName>\r\n                <Link to=\"/home\">patternRepository</Link>\r\n            </HeaderName>\r\n            <Navigation>\r\n                <NavItem>\r\n                    <Link to=\"/home\">Home</Link>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link to=\"/patterns\">Browse patterns</Link>\r\n                </NavItem>\r\n                <NavItem style={{ float: 'right' }}>\r\n                    <UncontrolledDropdown nav inNavbar>\r\n                        <DropdownToggle nav caret>\r\n                            {`Welcome ${user?.username}`}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                            <DropdownItem>\r\n                                <Link to={`/profile/${user?.uid}`}>Profile</Link>\r\n                            </DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem onClick={logOutHandler}>Log out</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                </NavItem>\r\n            </Navigation>\r\n        </PH>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebase.tsx",["212","213","214","215","216","217","218","219"],"import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nimport firebaseConfig from './firebaseConfig';\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n} else {\r\n    firebase.app(); // if already initialized, use that one\r\n}\r\n\r\n// firebase.initializeApp();\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const storage = firebase.storage();\r\n\r\nconst getUserDocument = async (uid: any) => {\r\n    if (!uid) return null;\r\n    try {\r\n        const userDocument = await firestore.doc(`users/${uid}`).get();\r\n        // const userAvatar = await storage.ref(`/avatars/${uid}`)?.getDownloadURL();\r\n        return {\r\n            uid,\r\n            ...userDocument.data(),\r\n            avatar: null, // userAvatar,\r\n        };\r\n    } catch (error) {\r\n        console.error(error.code);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const generateUserDocument = async (user: any, additionalData: any) => {\r\n    if (!user) return {};\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if (!snapshot.exists) {\r\n        const { email } = user;\r\n        try {\r\n            await userRef.set({\r\n                username: user.username,\r\n                email,\r\n                ...additionalData,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error creating user document', error);\r\n        }\r\n    }\r\n    return getUserDocument(user.uid);\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\generalComponents\\errorCard.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\index.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signUp.tsx",["220"],"import React, { useState } from 'react';\r\nimport { auth, generateUserDocument } from '../../logic/firebase';\r\n\r\nimport { isEmail } from '../../logic/helperFunctions';\r\n\r\nimport {\r\n    SuccessButton,\r\n    Input,\r\n    Label,\r\n    FormGroup,\r\n    DangerAlert,\r\n    HelperText,\r\n} from '../../design/styledComponents';\r\n\r\nconst SignUp: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordRepeat, setPasswordRepeat] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const createUserWithEmailAndPasswordHandler = async (event: any) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { user } = await auth.createUserWithEmailAndPassword(email, password);\r\n            generateUserDocument(user, { username });\r\n        } catch (errorData) {\r\n            setError('Error Signing up with email and password');\r\n        }\r\n\r\n        setUsername('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>Username</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter username\"\r\n                    value={username}\r\n                    onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n                <HelperText>You can change your username later ^^</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter mail\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => {\r\n                        if (!isEmail(e.target.value)) {\r\n                            setError('This is not a valid email!');\r\n                        } else {\r\n                            setError(null);\r\n                        }\r\n                        setEmail(e.target.value);\r\n                    }}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <HelperText>Password has to have at least six characters</HelperText>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Repeat password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Repeat password\"\r\n                    value={passwordRepeat}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPasswordRepeat(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={createUserWithEmailAndPasswordHandler}>\r\n                Sign up\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\firebaseConfig.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\login\\signIn.tsx",["221","222"],"import React, { useState, useCallback } from 'react';\r\nimport { auth } from '../../logic/firebase';\r\n\r\nimport { SuccessButton, Input, Label, FormGroup, DangerAlert } from '../../design/styledComponents';\r\n\r\nconst SignIn: React.FC = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const signInWithEmailAndPasswordHandler = useCallback(\r\n        (event: any) => {\r\n            event.preventDefault();\r\n            auth.signInWithEmailAndPassword(email, password).catch((errorData) => {\r\n                setError('Error signing in with password and email!');\r\n                console.error('Error signing in with password and email', errorData);\r\n            });\r\n        },\r\n        [email, password],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <FormGroup>\r\n                <Label>E-mail</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label>Password</Label>\r\n                <Input\r\n                    block\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    type=\"password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n            </FormGroup>\r\n            {error && <DangerAlert>{error}</DangerAlert>}\r\n            <SuccessButton block onClick={signInWithEmailAndPasswordHandler}>\r\n                Sign in\r\n            </SuccessButton>\r\n        </>\r\n    );\r\n};\r\nexport default SignIn;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileEdit.tsx",["223","224"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nimport { UserContext } from '../../logic/providers/userProvider';\r\n\r\nimport useStorage from '../../logic/hooks/useStorage';\r\n\r\nimport { firestore } from '../../logic/firebase';\r\n\r\nimport {\r\n    Main,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    MarginItemDetail,\r\n    ButtonRow,\r\n    SuccessButton,\r\n    CancelButton,\r\n    DangerAlert,\r\n    SuccessAlert,\r\n} from '../../design/styledComponents';\r\n\r\ninterface PropsType {\r\n    openEdit: (open: boolean) => void;\r\n}\r\n\r\nconst ProfileEdit: React.FC<PropsType> = ({ openEdit }) => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [file, setFile] = useState<File | null>(null);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [saved, setSaved] = useState<boolean>(false);\r\n\r\n    const types = ['image/png', 'image/jpeg', 'image/jpg'];\r\n\r\n    useEffect(() => {\r\n        let name = '';\r\n        let descriptionText = '';\r\n        if (user && user.username) {\r\n            name = user.username;\r\n        }\r\n        if (user && user.description) {\r\n            descriptionText = user.description;\r\n        }\r\n        setUsername(name);\r\n        setDescription(descriptionText);\r\n    }, [user]);\r\n\r\n    const { progress, url, uploadImage } = useStorage(file);\r\n\r\n    const handleImageChange = (selectedFile: File | null) => {\r\n        if (selectedFile) {\r\n            if (types.includes(selectedFile.type)) {\r\n                const maxAllowSize = 5 * 1024 * 1024;\r\n                if (selectedFile.size > maxAllowSize) {\r\n                    setError('Image is too big! Maximum size is 5MB.');\r\n                } else {\r\n                    setError(null);\r\n                    setFile(selectedFile);\r\n                }\r\n            } else {\r\n                setFile(null);\r\n                setError('Please use only select an image file (png or jpg)');\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateData = () => {\r\n        firestore\r\n            .collection(`users`)\r\n            .doc(`${user?.uid}`)\r\n            .update({\r\n                username,\r\n                description,\r\n            })\r\n            .then(() => {\r\n                setSaved(true);\r\n            })\r\n            .catch((errorData) => {\r\n                setError(errorData?.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Main>\r\n            <MarginItemDetail>\r\n                <ButtonRow>\r\n                    <CancelButton onClick={() => openEdit(false)} block={false}>\r\n                        Close\r\n                    </CancelButton>\r\n\r\n                    <SuccessButton onClick={() => updateData()} block={false}>\r\n                        Save\r\n                    </SuccessButton>\r\n                </ButtonRow>\r\n\r\n                {saved && <SuccessAlert>Your changes were saved!</SuccessAlert>}\r\n\r\n                {error && <DangerAlert>{error}</DangerAlert>}\r\n\r\n                <FormGroup>\r\n                    <Label>Profile picture</Label>\r\n                    {url && (\r\n                        <img\r\n                            style={{ width: '100px', height: '100px', objectFit: 'cover' }}\r\n                            src={url}\r\n                            alt=\"\"\r\n                        />\r\n                    )}\r\n                    <Input\r\n                        block\r\n                        type=\"file\"\r\n                        onChange={(e) =>\r\n                            handleImageChange(e?.target?.files ? e?.target?.files[0] : null)\r\n                        }\r\n                    />\r\n                    {file && (\r\n                        <SuccessButton\r\n                            block={false}\r\n                            onClick={() => uploadImage('avatars', user?.uid ? user.uid : '')}\r\n                        >\r\n                            Save image{' '}\r\n                        </SuccessButton>\r\n                    )}\r\n                    {file && progress > 0 && progress < 100 && <p>{`${progress}% uploaded`}</p>}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>Username</Label>\r\n                    <Input block value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>{`Something about you <3`}</Label>\r\n                    <CKEditor\r\n                        editor={ClassicEditor}\r\n                        data={description}\r\n                        onChange={(event: any, editor: any) => {\r\n                            setDescription(editor.getData());\r\n                        }}\r\n                    />\r\n                </FormGroup>\r\n            </MarginItemDetail>\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default ProfileEdit;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\userProfile\\profileView.tsx",["225","226","227","228"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\hooks\\useStorage.tsx",["229"],"import { useState } from 'react';\r\n\r\nimport { storage } from '../firebase';\r\n\r\nconst useStorage = (file: File | null) => {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [url, setUrl] = useState<string | null>(null);\r\n\r\n    // runs every time the file value changes\r\n    const uploadImage = (storageName: string, pictureName: string) => {\r\n        if (file) {\r\n            // storage ref\r\n            const storageRef = storage.ref(`${storageName}/${pictureName}`);\r\n\r\n            storageRef.put(file).on(\r\n                'state_changed',\r\n                (snap) => {\r\n                    // track the upload progress\r\n                    const percentage = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                    setProgress(percentage);\r\n                },\r\n                (err) => {\r\n                    setError(err.message);\r\n                },\r\n                async () => {\r\n                    // get the public download img url\r\n                    const downloadUrl = await storageRef.getDownloadURL();\r\n\r\n                    // save the url to local state\r\n                    setUrl(downloadUrl);\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    return { progress, url, error, uploadImage };\r\n};\r\nexport default useStorage;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\index.tsx",["230"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\addPattern.tsx",["231","232","233"],"import React, { useState, useMemo, useContext, useCallback, useEffect } from 'react';\nimport Select from 'react-select';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\n\nimport { UserContext } from '../../logic/providers/userProvider';\nimport { TagContext } from '../../logic/providers/tagProvider';\nimport { BookContext } from '../../logic/providers/bookProvider';\nimport { storage } from '../../logic/firebase';\nimport PatternService from '../../logic/services/patternServices';\nimport TagService from '../../logic/services/tagServices';\n\nimport {\n    patternToAdd,\n    fileWithUrl,\n    basicImage,\n    tag,\n    book,\n    tagToAdd,\n    pattern,\n} from '../../logic/types';\n\nimport multiSelectWithColour from '../../design/selectStyles';\n\nimport {\n    FormGroup,\n    Input,\n    Label,\n    ItemDetail,\n    ItemHeader,\n    ButtonRow,\n    SuccessButton,\n    CancelButton,\n    DifficultyInput,\n    FormImageContainer,\n    IconButton,\n    DangerAlert,\n} from '../../design/styledComponents';\n\ninterface PropsType {\n    closeModal: () => void;\n    copyPattern: pattern | null;\n}\n\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\n\nconst AddPattern: React.FC<PropsType> = React.memo(({ closeModal, copyPattern }) => {\n    const { user } = useContext(UserContext);\n    const { allTags } = useContext(TagContext);\n    const { allBooks } = useContext(BookContext);\n\n    const [title, setTitle] = useState<string>('');\n    const [tags, setTags] = useState<tag[]>([]);\n    const [books, setBooks] = useState<book[]>([]);\n    const [newTag, setNewTag] = useState<string>('');\n    const [description, setDescription] = useState<string>('');\n    const [difficulty, setDifficulty] = useState<number>(3);\n\n    const [newOpen, setNewOpen] = useState<boolean>(false);\n\n    const [copiedPatternPictures, setCopiedPatternPictures] = useState<basicImage[]>([]);\n    const [patternPictures, setPatternPictures] = useState<fileWithUrl[]>([]);\n    const [finishedWorkPictures, setFinishedWorkPictures] = useState<fileWithUrl[]>([]);\n\n    const [error, setError] = useState<string | null>(null);\n\n    const id = useMemo(\n        () =>\n            `${newOpen ? 'y' : ''}${(new Date().getTime() / 1000).toFixed(0)}${new Array(5)\n                .join()\n                .replace(/(.|$)/g, function () {\n                    return (Math.random() * 36)\n                        .toString(36)\n                        [Math.random() < 0.5 ? 'toString' : 'toUpperCase']();\n                })}`,\n        [newOpen],\n    );\n\n    const allPossibleBooks = useMemo(\n        () => allBooks.filter((possibleBook) => possibleBook.owner === user?.uid),\n        [allBooks, user?.uid],\n    );\n\n    useEffect(() => {\n        if (copyPattern) {\n            setTitle(copyPattern?.title ? copyPattern.title : 'Untitled pattern');\n            setTags(copyPattern.tags);\n            setDescription(copyPattern?.description ? copyPattern.description : '');\n            setCopiedPatternPictures(copyPattern.patternImages);\n        }\n    }, [copyPattern]);\n\n    const HandlePatternImageChange = useCallback(\n        (selectedFile: File | null) => {\n            if (selectedFile) {\n                if (imageTypes.includes(selectedFile.type)) {\n                    const maxAllowSize = 5 * 1024 * 1024;\n                    if (selectedFile.size > maxAllowSize) {\n                        setError('Image is too big! Maximum size is 5MB.');\n                    } else {\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\n\n                        storageRef.put(selectedFile).on(\n                            'state_changed',\n                            () => {},\n                            (err) => {\n                                setError(err.message);\n                            },\n                            async () => {\n                                const downloadUrl = await storageRef.getDownloadURL();\n                                setPatternPictures([\n                                    ...patternPictures,\n                                    { file: selectedFile, url: downloadUrl },\n                                ]);\n                            },\n                        );\n                    }\n                } else {\n                    setError('Please use only select an image file (png or jpg)');\n                }\n            }\n        },\n        [id, patternPictures],\n    );\n\n    const HandleWorkImageChange = useCallback(\n        (selectedFile: File | null) => {\n            if (selectedFile) {\n                if (imageTypes.includes(selectedFile.type)) {\n                    const maxAllowSize = 5 * 1024 * 1024;\n                    if (selectedFile.size > maxAllowSize) {\n                        setError('Image is too big! Maximum size is 5MB.');\n                    } else {\n                        const storageRef = storage.ref(\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\n                        );\n\n                        storageRef.put(selectedFile).on(\n                            'state_changed',\n                            () => {},\n                            (err) => {\n                                setError(err.message);\n                            },\n                            async () => {\n                                const downloadUrl = await storageRef.getDownloadURL();\n                                setFinishedWorkPictures([\n                                    ...finishedWorkPictures,\n                                    { file: selectedFile, url: downloadUrl },\n                                ]);\n                            },\n                        );\n                    }\n                } else {\n                    setError('Please use only select an image file (png or jpg)');\n                }\n            }\n        },\n        [id, finishedWorkPictures],\n    );\n\n    const removeCopiedPaternPicture = useCallback(\n        (index: number) => {\n            const newPictures: basicImage[] = [\n                ...copiedPatternPictures.filter((_, i) => i !== index),\n            ];\n            setCopiedPatternPictures(newPictures);\n        },\n        [copiedPatternPictures],\n    );\n\n    const removePaternPicture = useCallback(\n        (index: number) => {\n            const newPictures: fileWithUrl[] = [\n                ...patternPictures.filter((picture, i) => i !== index),\n            ];\n            const fileToRemove: fileWithUrl = patternPictures[index];\n            const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.file.name}`);\n            storageRef\n                .delete()\n                .then(() => {\n                    setPatternPictures(newPictures);\n                })\n                .catch((err) => {\n                    setError(err.message);\n                });\n        },\n        [id, patternPictures],\n    );\n\n    const removeWorkPicture = useCallback(\n        (index: number) => {\n            const newPictures: fileWithUrl[] = [\n                ...finishedWorkPictures.filter((_, i) => i !== index),\n            ];\n            const fileToRemove: fileWithUrl = finishedWorkPictures[index];\n            const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.file.name}`);\n            storageRef\n                .delete()\n                .then(() => {\n                    setFinishedWorkPictures(newPictures);\n                })\n                .catch((err) => {\n                    setError(err.message);\n                });\n        },\n        [id, finishedWorkPictures],\n    );\n\n    const handleSubmit = useCallback(() => {\n        const data: patternToAdd = {\n            title,\n            description,\n            difficulty,\n            patternImages: patternPictures.map((picture) => ({\n                name: picture.file.name,\n                url: picture.url,\n            })),\n            finishedWorkImages: finishedWorkPictures.map((picture) => ({\n                name: picture.file.name,\n                url: picture.url,\n            })),\n            owner: user?.uid ? user.uid : null,\n            tags: tags.map((t) => t.id),\n            books: books.map((b) => b.id),\n            likes: 0,\n            dateCreated: moment().unix(),\n            comments: 0,\n        };\n\n        PatternService.set(id, data)\n            .then(() => {\n                setNewOpen(true);\n                closeModal();\n            })\n            .catch((e) => {\n                setError(e?.message);\n            });\n    }, [\n        closeModal,\n        description,\n        difficulty,\n        finishedWorkPictures,\n        id,\n        patternPictures,\n        tags,\n        title,\n        books,\n        user?.uid,\n    ]);\n\n    const handleTagAddition = useCallback(() => {\n        if (newTag) {\n            const data: tagToAdd = {\n                label: newTag,\n            };\n\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\n\n            TagService.set(`${tagId}`, data)\n                .then(() => {\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\n                    setNewTag('');\n                })\n                .catch((e) => {\n                    setError(e?.message);\n                });\n        }\n    }, [newTag, tags]);\n\n    const handleCancel = useCallback(() => {\n        let newError = 'Errors:';\n        newError = '';\n        patternPictures.forEach((picture) => {\n            storage\n                .ref(`patternImages/${id}/${picture.file.name}`)\n                .delete()\n                .catch((err: Error) => {\n                    newError.concat(err.message);\n                });\n        });\n        finishedWorkPictures.forEach((picture) => {\n            storage\n                .ref(`finishedWorkImages/${id}/${picture.file.name}`)\n                .delete()\n                .catch((err: Error) => {\n                    newError.concat(err.message);\n                });\n        });\n        if (newError.length) {\n            setError(newError);\n        } else {\n            setNewOpen(true);\n            closeModal();\n        }\n    }, [closeModal, finishedWorkPictures, id, patternPictures]);\n\n    return (\n        <ItemDetail>\n            <ItemHeader>Add a new pattern</ItemHeader>\n\n            <FormGroup>\n                <Label>Title</Label>\n                <Input\n                    block\n                    name=\"patternTitle\"\n                    placeholder=\"Enter title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Tags</Label>\n                <Select\n                    options={allTags}\n                    value={tags}\n                    isMulti\n                    backspaceRemovesValue\n                    inputValue={newTag}\n                    onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                            handleTagAddition();\n                            e.preventDefault();\n                        }\n                    }}\n                    onInputChange={(e) => {\n                        setNewTag(e);\n                    }}\n                    onChange={(e) => {\n                        setTags([...e]);\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Difficulty</Label>\n                <DifficultyInput\n                    block\n                    type=\"range\"\n                    name=\"patternDifficulty\"\n                    min={1}\n                    max={5}\n                    step={1}\n                    value={difficulty}\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Books</Label>\n                <Select\n                    styles={multiSelectWithColour}\n                    options={allPossibleBooks}\n                    value={books}\n                    isMulti\n                    onChange={(e) => {\n                        setBooks([...e]);\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Description</Label>\n                <CKEditor\n                    editor={ClassicEditor}\n                    data={description}\n                    onChange={(event: any, editor: any) => {\n                        setDescription(editor.getData());\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Pattern pictures</Label>\n                <>\n                    {copiedPatternPictures.map((picture, index) => (\n                        <FormImageContainer key={picture.name}>\n                            <IconButton onClick={() => removeCopiedPaternPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"pattern\" />\n                        </FormImageContainer>\n                    ))}\n                    {patternPictures.map((picture, index) => (\n                        <FormImageContainer key={picture.file.name}>\n                            <IconButton onClick={() => removePaternPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"pattern\" />\n                        </FormImageContainer>\n                    ))}\n                    <Input\n                        block\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                </>\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Finished works</Label>\n                <>\n                    {finishedWorkPictures.map((picture, index) => (\n                        <FormImageContainer key={picture.file.name}>\n                            <IconButton onClick={() => removeWorkPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"finishedWork\" />\n                        </FormImageContainer>\n                    ))}\n                    <Input\n                        block\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                </>\n            </FormGroup>\n\n            {error && <DangerAlert>{error}</DangerAlert>}\n            <ButtonRow>\n                <CancelButton block={false} onClick={handleCancel}>\n                    Cancel\n                </CancelButton>\n\n                <SuccessButton block={false} onClick={handleSubmit}>\n                    Save\n                </SuccessButton>\n            </ButtonRow>\n        </ItemDetail>\n    );\n});\n\nAddPattern.displayName = 'AddPattern';\n\nexport default AddPattern;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\types.tsx",["234","235","236"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\list.tsx",["237","238","239","240","241"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\patternServices.tsx",["242","243","244","245","246","247","248","249","250"],"import { firestore, auth } from '../firebase';\nimport { patternToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/patterns');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst getAllMine = () => {\n    if (auth?.currentUser?.uid) {\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\n    }\n    return [];\n};\n\nconst getAllOfUser = (uid: string) => {\n    return collectionRef.where('owner', '==', uid);\n};\n\nconst create = (data: patternToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: patternToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: patternToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst updateLikes = (id: string, value: number) => {\n    return collectionRef.doc(id).update({ likes: value });\n};\n\nconst updateComments = (id: string, value: number) => {\n    return collectionRef.doc(id).update({ comments: value });\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst PatternService = {\n    getAll,\n    getAllMine,\n    getAllOfUser,\n    set,\n    updateLikes,\n    updateComments,\n    create,\n    update,\n    remove,\n};\n\nexport default PatternService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\viewPattern.tsx",["251","252"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\editPattern.tsx",["253","254","255"],"import React, { useState, useCallback, useContext, useMemo } from 'react';\nimport Select from 'react-select';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { storage } from '../../logic/firebase';\nimport PatternService from '../../logic/services/patternServices';\nimport { TagContext } from '../../logic/providers/tagProvider';\nimport { BookContext } from '../../logic/providers/bookProvider';\nimport TagService from '../../logic/services/tagServices';\n\nimport {\n    pattern,\n    patternToAdd,\n    basicImage,\n    tag as tagType,\n    tagToAdd,\n    book,\n} from '../../logic/types';\n\nimport multiSelectWithColour from '../../design/selectStyles';\n\nimport {\n    FormGroup,\n    Input,\n    Label,\n    ItemDetail,\n    ItemHeader,\n    ButtonRow,\n    SuccessButton,\n    CancelButton,\n    DifficultyInput,\n    FormImageContainer,\n    IconButton,\n    DangerAlert,\n    InvisibleIconButton,\n} from '../../design/styledComponents';\n\ninterface PropsType {\n    openEdit: (open: boolean) => void;\n    closeModal: () => void;\n    currentPattern: pattern;\n}\nconst imageTypes = ['image/png', 'image/jpeg', 'image/jpg'];\n\nconst EditPattern: React.FC<PropsType> = React.memo(({ openEdit, closeModal, currentPattern }) => {\n    const { allTags } = useContext(TagContext);\n    const { allBooks } = useContext(BookContext);\n\n    const [title, setTitle] = useState<string>(currentPattern.title ? currentPattern.title : '');\n    const [tags, setTags] = useState<tagType[]>(currentPattern.tags ? currentPattern.tags : []);\n    const [books, setBooks] = useState<book[]>(currentPattern.books ? currentPattern.books : []);\n    const [newTag, setNewTag] = useState<string>('');\n    const [description, setDescription] = useState<string>(\n        currentPattern.description ? currentPattern.description : '',\n    );\n    const [difficulty, setDifficulty] = useState<number>(\n        currentPattern.difficulty ? currentPattern.difficulty : 3,\n    );\n\n    const [patternImages, setPatternImages] = useState<basicImage[]>(\n        currentPattern.patternImages ? currentPattern.patternImages : [],\n    );\n    const [finishedWorkImages, setFinishedWorkImages] = useState<basicImage[]>(\n        currentPattern.finishedWorkImages ? currentPattern.finishedWorkImages : [],\n    );\n\n    const [newPatternImages, setNewPatternImages] = useState<basicImage[]>([]);\n    const [newFinishedWorkImages, setNewFinishedWorkImages] = useState<basicImage[]>([]);\n\n    const [error, setError] = useState<string | null>(null);\n\n    const { id } = currentPattern;\n\n    const allPossibleBooks = useMemo(\n        () =>\n            allBooks.filter(\n                (possibleBook) => possibleBook.owner === currentPattern.owner?.username,\n            ),\n        [allBooks, currentPattern.owner],\n    );\n\n    const HandlePatternImageChange = useCallback(\n        (selectedFile: File | null) => {\n            if (selectedFile) {\n                if (imageTypes.includes(selectedFile.type)) {\n                    const maxAllowSize = 5 * 1024 * 1024;\n                    if (selectedFile.size > maxAllowSize) {\n                        setError('Image is too big! Maximum size is 5MB.');\n                    } else {\n                        const storageRef = storage.ref(`patternImages/${id}/${selectedFile.name}`);\n\n                        storageRef.put(selectedFile).on(\n                            'state_changed',\n                            () => {},\n                            (err) => {\n                                setError(err.message);\n                            },\n                            async () => {\n                                const downloadUrl = await storageRef.getDownloadURL();\n                                setNewPatternImages([\n                                    ...newPatternImages,\n                                    { name: selectedFile.name, url: downloadUrl },\n                                ]);\n                            },\n                        );\n                    }\n                } else {\n                    setError('Please use only select an image file (png or jpg)');\n                }\n            }\n        },\n        [id, newPatternImages],\n    );\n\n    const HandleWorkImageChange = useCallback(\n        (selectedFile: File | null) => {\n            if (selectedFile) {\n                if (imageTypes.includes(selectedFile.type)) {\n                    const maxAllowSize = 5 * 1024 * 1024;\n                    if (selectedFile.size > maxAllowSize) {\n                        setError('Image is too big! Maximum size is 5MB.');\n                    } else {\n                        const storageRef = storage.ref(\n                            `finishedWorkImages/${id}/${selectedFile.name}`,\n                        );\n\n                        storageRef.put(selectedFile).on(\n                            'state_changed',\n                            () => {},\n                            (err) => {\n                                setError(err.message);\n                            },\n                            async () => {\n                                const downloadUrl = await storageRef.getDownloadURL();\n                                setNewFinishedWorkImages([\n                                    ...newFinishedWorkImages,\n                                    { name: selectedFile.name, url: downloadUrl },\n                                ]);\n                            },\n                        );\n                    }\n                } else {\n                    setError('Please use only select an image file (png or jpg)');\n                }\n            }\n        },\n        [id, newFinishedWorkImages],\n    );\n\n    const removePaternPicture = useCallback(\n        (index: number) => {\n            if (index < patternImages.length) {\n                const newPictures: basicImage[] = [...patternImages.filter((_, i) => i !== index)];\n                setPatternImages(newPictures);\n\n                // TODO: check if not other patterns are using this picture;\n                /*    const fileToRemove: basicImage = patternImages[index];\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\n                storageRef\n                    .delete()\n                    .then(() => {\n                         })\n                    .catch((err) => {\n                        setError(err.message);\n                    }); */\n            } else {\n                const newPictures: basicImage[] = [\n                    ...newPatternImages.filter((_, i) => i !== index),\n                ];\n                const fileToRemove: basicImage = newPatternImages[index];\n                const storageRef = storage.ref(`patternImages/${id}/${fileToRemove.name}`);\n                storageRef\n                    .delete()\n                    .then(() => {\n                        setNewPatternImages(newPictures);\n                    })\n                    .catch((err) => {\n                        setError(err.message);\n                    });\n            }\n        },\n        [id, newPatternImages, patternImages],\n    );\n\n    const removeWorkPicture = useCallback(\n        (index: number) => {\n            if (index < finishedWorkImages.length) {\n                const newPictures: basicImage[] = [\n                    ...finishedWorkImages.filter((_, i) => i !== index),\n                ];\n                const fileToRemove: basicImage = finishedWorkImages[index];\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\n                storageRef\n                    .delete()\n                    .then(() => {\n                        setFinishedWorkImages(newPictures);\n                    })\n                    .catch((err) => {\n                        setError(err.message);\n                    });\n            } else {\n                const newPictures: basicImage[] = [\n                    ...newFinishedWorkImages.filter((_, i) => i !== index),\n                ];\n                const fileToRemove: basicImage = newFinishedWorkImages[index];\n                const storageRef = storage.ref(`finishedWorkImages/${id}/${fileToRemove.name}`);\n                storageRef\n                    .delete()\n                    .then(() => {\n                        setNewFinishedWorkImages(newPictures);\n                    })\n                    .catch((err) => {\n                        setError(err.message);\n                    });\n            }\n        },\n        [finishedWorkImages, id, newFinishedWorkImages],\n    );\n\n    const handleSubmit = useCallback(() => {\n        const data: patternToAdd = {\n            title,\n            description,\n            difficulty,\n            patternImages: [...patternImages, ...newPatternImages],\n            finishedWorkImages: [...finishedWorkImages, ...newFinishedWorkImages],\n            tags: tags.map((t) => t.id),\n            books: books.map((b) => b.id),\n        };\n\n        PatternService.update(id, data)\n            .then(() => {\n                closeModal();\n            })\n            .catch((e) => {\n                setError(e?.message);\n            });\n    }, [\n        closeModal,\n        description,\n        difficulty,\n        finishedWorkImages,\n        id,\n        newFinishedWorkImages,\n        newPatternImages,\n        patternImages,\n        tags,\n        books,\n        title,\n    ]);\n\n    const handleTagAddition = useCallback(() => {\n        if (newTag) {\n            const data: tagToAdd = {\n                label: newTag,\n            };\n\n            const tagId = (new Date().getTime() / 1000).toFixed(0).toString();\n\n            TagService.set(`${tagId}`, data)\n                .then(() => {\n                    setTags([...tags, { id: tagId, value: tagId, label: newTag }]);\n                    setNewTag('');\n                })\n                .catch((e) => {\n                    setError(e?.message);\n                });\n        }\n    }, [newTag, tags]);\n\n    const handleCancel = useCallback(() => {\n        let newError = 'Errors:';\n        newError = '';\n        newPatternImages.forEach((picture) => {\n            storage\n                .ref(`patternImages/${id}/${picture.name}`)\n                .delete()\n                .catch((err: Error) => {\n                    newError.concat(err.message);\n                });\n        });\n        newFinishedWorkImages.forEach((picture) => {\n            storage\n                .ref(`finishedWorkImages/${id}/${picture.name}`)\n                .delete()\n                .catch((err: Error) => {\n                    newError.concat(err.message);\n                });\n        });\n        if (newError.length) {\n            setError(newError);\n        } else {\n            openEdit(false);\n        }\n    }, [id, newFinishedWorkImages, newPatternImages, openEdit]);\n\n    const remove = useCallback(() => {\n        if (window.confirm('Are you sure you want to delete this pattern?')) {\n            PatternService.remove(id);\n            closeModal();\n        }\n    }, [id, closeModal]);\n\n    return (\n        <ItemDetail>\n            <ItemHeader>\n                Edit this pattern{' '}\n                <InvisibleIconButton style={{ fontSize: '1em' }} red onClick={remove}>\n                    <FontAwesomeIcon icon={['fas', 'trash']} />\n                </InvisibleIconButton>\n            </ItemHeader>\n\n            <FormGroup>\n                <Label>Title</Label>\n                <Input\n                    block\n                    name=\"patternTitle\"\n                    placeholder=\"Enter title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value ? e.target.value.toString() : '')}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Tags</Label>\n                <Select\n                    options={allTags}\n                    value={tags}\n                    isMulti\n                    backspaceRemovesValue\n                    inputValue={newTag}\n                    onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                            handleTagAddition();\n                            e.preventDefault();\n                        }\n                    }}\n                    onInputChange={(e) => {\n                        setNewTag(e);\n                    }}\n                    onChange={(e) => {\n                        setTags([...e]);\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Difficulty</Label>\n                <DifficultyInput\n                    block\n                    type=\"range\"\n                    name=\"patternDifficulty\"\n                    min={1}\n                    max={5}\n                    step={1}\n                    value={difficulty}\n                    onChange={(e) => setDifficulty(parseInt(e.target.value, 10))}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Books</Label>\n                <Select\n                    styles={multiSelectWithColour}\n                    options={allPossibleBooks}\n                    value={books}\n                    isMulti\n                    onChange={(e) => {\n                        setBooks([...e]);\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Description</Label>\n                <CKEditor\n                    editor={ClassicEditor}\n                    data={description}\n                    onChange={(event: any, editor: any) => {\n                        setDescription(editor.getData());\n                    }}\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Pattern pictures</Label>\n                <>\n                    {patternImages.map((picture: basicImage, index) => (\n                        <FormImageContainer key={picture.name}>\n                            <IconButton onClick={() => removePaternPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"pattern\" />\n                        </FormImageContainer>\n                    ))}\n                    {newPatternImages.map((picture: basicImage, index) => (\n                        <FormImageContainer key={picture.name}>\n                            <IconButton onClick={() => removePaternPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"pattern\" />\n                        </FormImageContainer>\n                    ))}\n                    <Input\n                        block\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandlePatternImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                </>\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Finished works</Label>\n                <>\n                    {finishedWorkImages.map((picture, index) => (\n                        <FormImageContainer key={picture.name}>\n                            <IconButton onClick={() => removeWorkPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"finishedWork\" />\n                        </FormImageContainer>\n                    ))}\n                    {newFinishedWorkImages.map((picture, index) => (\n                        <FormImageContainer key={picture.name}>\n                            <IconButton onClick={() => removeWorkPicture(index)}>\n                                <FontAwesomeIcon icon={['fas', 'trash']} />\n                            </IconButton>\n                            <img src={picture.url} alt=\"finishedWork\" />\n                        </FormImageContainer>\n                    ))}\n                    <Input\n                        block\n                        type=\"file\"\n                        onChange={(e) =>\n                            HandleWorkImageChange(e?.target?.files ? e?.target?.files[0] : null)\n                        }\n                    />\n                </>\n            </FormGroup>\n\n            {error && <DangerAlert>{error}</DangerAlert>}\n            <ButtonRow>\n                <CancelButton block={false} onClick={handleCancel}>\n                    Cancel\n                </CancelButton>\n\n                <SuccessButton block={false} onClick={handleSubmit}>\n                    Save\n                </SuccessButton>\n            </ButtonRow>\n        </ItemDetail>\n    );\n});\n\nEditPattern.displayName = 'EditPattern';\n\nexport default EditPattern;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\tagServices.tsx",["256","257","258","259","260"],"import { firestore } from '../firebase';\nimport { tagToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/tags');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst create = (data: tagToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: tagToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst TagService = {\n    getAll,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default TagService;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\styledComponents.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\tagProvider.tsx",["261","262"],"import React, { createContext, useState, useEffect } from 'react';\nimport TagService from '../services/tagServices';\nimport { tag } from '../types';\n\nexport const TagContext = createContext<{ allTags: tag[] }>({ allTags: [] });\n\ninterface PropsType {\n    children: JSX.Element;\n}\n\nconst TagProvider: React.FC<PropsType> = ({ children }) => {\n    const [allTags, setAllTags] = useState<{ allTags: tag[] }>({ allTags: [] });\n\n    const onTagDataChange = (items: any) => {\n        let loadedTags: tag[] = [];\n        loadedTags = [];\n\n        items.docs.forEach((item: any) => {\n            const { id: tagId } = item;\n            const data = item.data();\n\n            loadedTags.push({\n                id: tagId,\n                label: data.label,\n                value: tagId,\n            });\n        });\n\n        setAllTags({ allTags: loadedTags });\n    };\n\n    useEffect(() => {\n        const unsubscribe = TagService.getAll().orderBy('label', 'asc').onSnapshot(onTagDataChange);\n\n        return () => unsubscribe();\n    }, []);\n\n    return <TagContext.Provider value={allTags}>{children}</TagContext.Provider>;\n};\n\nexport default TagProvider;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\addBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\bookServices.tsx",["263","264","265","266","267","268","269"],"import { firestore, auth } from '../firebase';\r\nimport { bookInfo } from '../types';\r\n\r\nconst collectionRef = firestore.collection('/book');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllMine = () => {\r\n    if (auth?.currentUser?.uid) {\r\n        return collectionRef.where('owner', '==', auth.currentUser.uid);\r\n    }\r\n    return collectionRef;\r\n};\r\n\r\nconst getAllOfUser = (uid: string) => {\r\n    return collectionRef.where('owner', '==', uid);\r\n};\r\n\r\nconst create = (data: bookInfo) => {\r\n    return collectionRef.add(data);\r\n};\r\n\r\nconst update = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).update(value);\r\n};\r\n\r\nconst set = (id: string, value: bookInfo) => {\r\n    return collectionRef.doc(id).set(value);\r\n};\r\n\r\nconst remove = (id: string) => {\r\n    return collectionRef.doc(id).delete();\r\n};\r\n\r\nconst BookService = {\r\n    getAll,\r\n    getAllMine,\r\n    getAllOfUser,\r\n    set,\r\n    create,\r\n    update,\r\n    remove,\r\n};\r\n\r\nexport default BookService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\bookProvider.tsx",["270","271"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport BookService from '../services/bookServices';\r\nimport { book } from '../types';\r\n\r\nexport const BookContext = createContext<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst BookProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [allBooks, setAllBooks] = useState<{ allBooks: book[] }>({ allBooks: [] });\r\n\r\n    const onBookDataChange = (items: any) => {\r\n        let loadedBooks: book[] = [];\r\n        loadedBooks = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: bookId } = item;\r\n            const data = item.data();\r\n\r\n            loadedBooks.push({\r\n                id: bookId,\r\n                label: data.label,\r\n                value: bookId,\r\n                colour: data.colour,\r\n                owner: data.owner,\r\n            });\r\n        });\r\n\r\n        setAllBooks({ allBooks: loadedBooks });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = BookService.getAll()\r\n            .orderBy('label', 'asc')\r\n            .onSnapshot(onBookDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return <BookContext.Provider value={allBooks}>{children}</BookContext.Provider>;\r\n};\r\n\r\nexport default BookProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\design\\selectStyles.tsx",["272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309"],"export default {\n    multiValue: (provided: any, state: any) => {\n        const backgroundColor = `${state.data.colour}88`;\n\n        return {\n            ...provided,\n            backgroundColor,\n        };\n    },\n};\n\nexport const searchStyle = {\n    control: (base: any) => ({\n        ...base,\n        minHeight: 30,\n        borderWidth: 0,\n        borderRadius: '5px',\n        backgroundColor: 'transparent !important',\n        borderColor: 'transparent !important',\n        boxShadow: 'none !important',\n    }),\n    dropdownIndicator: (base: any) => ({\n        ...base,\n        color: 'transparent',\n        padding: 4,\n    }),\n    clearIndicator: (base: any) => ({\n        ...base,\n        padding: 4,\n    }),\n    multiValueLabel: (base: any) => ({\n        ...base,\n    }),\n    multiValueRemove: (styles: any) => ({\n        ...styles,\n    }),\n    menuList: (styles: any) => ({\n        ...styles,\n        backgroundColor: 'inherit !important',\n    }),\n    valueContainer: (base: any) => ({\n        ...base,\n        padding: '0px 6px',\n        borderRadius: 0,\n    }),\n    input: (base: any) => ({\n        ...base,\n        margin: 0,\n        padding: 0,\n        backgroundColor: 'inherit',\n        borderRadius: 0,\n    }),\n    indicatorSeparator: (base: any) => ({\n        ...base,\n        width: 0,\n    }),\n    placeholder: (base: any) => ({\n        ...base,\n    }),\n    menu: (base: any) => ({\n        ...base,\n        zIndex: 50,\n    }),\n};\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\helperFunctions.tsx",["310","311"],"export const isEmail = (email: string) =>\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n        email,\r\n    );\r\n\r\nexport const hi = () => {\r\n    return 'Hi';\r\n};\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\patternPrint.jsx",["312","313"],"import React from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n  FontAwesomeIcon\r\n} from '@fortawesome/react-fontawesome';\r\nimport ComponentToPrint from './toPrint';\r\n\r\nimport {\r\n  InvisibleIconButton,\r\n} from '../../design/styledComponents';\r\n\r\nclass Example extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactToPrint\r\n          trigger={() => {\r\n            // NOTE: could just as easily return <SomeComponent />. Do NOT pass an `onClick` prop\r\n            // to the root node of the returned component as it will be overwritten.\r\n            return <InvisibleIconButton type=\"button\">\r\n                <FontAwesomeIcon icon={['fa', 'print']} /></InvisibleIconButton>;\r\n          }}\r\n          content={() => this.componentRef}\r\n        />\r\n        <div style={{display: \"none\"}}>\r\n          <ComponentToPrint ref={el => (this.componentRef = el)} {...this.props}/> { /* eslint-disable-line no-return-assign */ } { /* eslint-disable-line react/jsx-props-no-spreading */ }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;",["314","315","316","317","318"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toPrint.jsx",["319","320"],"import React from 'react';\r\n\r\nimport {\r\n  ItemHeader,\r\n  ItemLabel,\r\n  Difficulty,\r\n  Tag,\r\n  Description,\r\n  TagRow,\r\n} from '../../design/styledComponents';\r\n\r\nexport default class ComponentToPrint extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      pattern\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      tags,\r\n      difficulty,\r\n      books,\r\n      description,\r\n      patternImages,\r\n      finishedWorkImages\r\n    } = pattern;\r\n    return (\r\n      <div style={{padding: \"100px\"}}>\r\n        <ItemHeader>{title?.length > 0 ? title : 'Untitled'}</ItemHeader>\r\n\r\n          <TagRow>\r\n              {tags.map((tag) => (\r\n                  <Tag key={tag.id} colour=\"tag\">\r\n                      {' '}\r\n                      {tag.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <Difficulty difficulty={difficulty} />\r\n\r\n          <ItemLabel>Books</ItemLabel>\r\n          <TagRow>\r\n              {books?.map((book) => (\r\n                  <Tag key={book.id} colour={book.colour}>\r\n                      {' '}\r\n                      {book.label}{' '}\r\n                  </Tag>\r\n              ))}\r\n          </TagRow>\r\n\r\n          <ItemLabel>Description</ItemLabel>\r\n          <Description\r\n              dangerouslySetInnerHTML={{\r\n                  __html: description,\r\n              }}\r\n          />\r\n\r\n        <div style={{display: \"block\", pageBreakBefore: \"always\", paddingTop: \"100px\"}}>\r\n        <ItemLabel>Finished Works</ItemLabel>\r\n        <div>\r\n              {finishedWorkImages.map((picture) => (\r\n                <div key={picture.name} style={{display: \"inline\"}}>\r\n                  <img\r\n                      key={picture.name}\r\n                      src={picture.url}\r\n                      alt={picture.name}\r\n                      width=\"50%\"\r\n                      style={{display: \"inline\"}}\r\n                  />\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n              <div>\r\n                {patternImages.map((picture) => (\r\n                  <div key={picture.name} style={{height: \"100%\", paddingTop: \"100px\"}}>\r\n                  <img\r\n                    key={picture.name}\r\n                    src={picture.url}\r\n                    alt={picture.name}\r\n                    width=\"100%\"\r\n                    style={{display: \"block\", pageBreakBefore: \"auto\"}}\r\n                    />\r\n                </div>\r\n                ))}\r\n              </div>\r\n      </div>\r\n    );\r\n  }\r\n}","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport.jsx",["321","322"],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\toExport2.jsx",["323","324"],"import React from 'react';\r\nimport {\r\n  Text,\r\n  Page,\r\n  Document,\r\n  View,\r\n  StyleSheet\r\n} from '@react-pdf/renderer';\r\n\r\nconst styles = StyleSheet.create( {\r\n  page: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#FFF',\r\n  },\r\n  section: {\r\n    margin: 10,\r\n    padding: 10,\r\n    display: 'block',\r\n  }\r\n} );\r\n\r\nexport default class ComponentToExport extends React.PureComponent {\r\n  constructor( props ) {\r\n    super( props );\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      pattern\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      tags,\r\n      difficulty,\r\n      books,\r\n      description,\r\n    } = pattern;\r\n    return (\r\n      <Document>\r\n        <Page size=\"A4\" style={styles.page}>\r\n          <View  style={styles.section}>\r\n            <Text>{title?.length > 0 ? title : 'Untitled'}</Text>\r\n              {tags.map((tag) => (\r\n                  <Text key={tag.id}>\r\n                      {' '}\r\n                      {tag.label}{' '}\r\n                  </Text>\r\n              ))}\r\n          </View>\r\n\r\n                      <View style={styles.section}>\r\n          <Text>{`Difficulty: ${difficulty}`}</Text>\r\n            </View>\r\n\r\n            <View style={styles.section}>\r\n                {books?.map((book) => (\r\n                    <Text key={book.id} colour={book.colour}>\r\n                        {' '}\r\n                        {book.label}{' '}\r\n                    </Text>\r\n                ))}\r\n            </View>\r\n\r\n            <View style={styles.section}>\r\n            <Text>Description</Text>\r\n            <Text>{description}</Text>\r\n        </View>\r\n\r\n        </Page>\r\n      </Document>\r\n    );\r\n  }\r\n}","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\providers\\usersProvider.tsx",["325","326"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport UserService from '../services/userServices';\r\nimport { userInfo } from '../types';\r\n\r\nexport const UsersContext = createContext<{ allUsers: userInfo[] }>({ allUsers: [] });\r\n\r\ninterface PropsType {\r\n    children: JSX.Element;\r\n}\r\n\r\nconst UsersProvider: React.FC<PropsType> = ({ children }) => {\r\n    const [allUsers, setAllUsers] = useState<{ allUsers: userInfo[] }>({ allUsers: [] });\r\n\r\n    const onUserDataChange = (items: any) => {\r\n        let loadedUsers: userInfo[] = [];\r\n        loadedUsers = [];\r\n\r\n        items.docs.forEach((item: any) => {\r\n            const { id: userId } = item;\r\n            const data = item.data();\r\n\r\n            loadedUsers.push({\r\n                uid: userId,\r\n                username: data.username,\r\n                avatar: data.avatar,\r\n                email: data.email,\r\n                description: data.description,\r\n                darkTheme: data.darkTheme,\r\n            });\r\n        });\r\n\r\n        setAllUsers({ allUsers: loadedUsers });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = UserService.getAll().onSnapshot(onUserDataChange);\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return <UsersContext.Provider value={allUsers}>{children}</UsersContext.Provider>;\r\n};\r\n\r\nexport default UsersProvider;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\userServices.tsx",["327"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/users');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst UserService = {\r\n    getAll,\r\n};\r\n\r\nexport default UserService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\likedPatternsServices.tsx",["328","329"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/likedPatterns');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst setLiked = (id: string, value: string[]) => {\r\n    return collectionRef.doc(id).set({ patterns: value });\r\n};\r\n\r\nconst LikedPatternsService = {\r\n    getAll,\r\n    setLiked,\r\n};\r\n\r\nexport default LikedPatternsService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\bookContainer.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\viewBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\books\\editBook.tsx",[],"C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\followedUsersService.tsx",["330","331"],"import { firestore } from '../firebase';\r\n\r\nconst collectionRef = firestore.collection('/followedUsers');\r\n\r\nconst getAll = () => {\r\n    return collectionRef;\r\n};\r\n\r\nconst setFollowed = (id: string, value: string[]) => {\r\n    return collectionRef.doc(id).set({ users: value });\r\n};\r\n\r\nconst FollowedUsersService = {\r\n    getAll,\r\n    setFollowed,\r\n};\r\n\r\nexport default FollowedUsersService;\r\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\components\\patternList\\search.tsx",["332","333","334"],"import React, { useState, useContext, useMemo } from 'react';\nimport Select from 'react-select';\nimport { SearchGroup, AdvancedSearch, DifficultyInput, Label } from '../../design/styledComponents';\nimport { TagContext } from '../../logic/providers/tagProvider';\nimport { BookContext } from '../../logic/providers/bookProvider';\nimport { UsersContext } from '../../logic/providers/usersProvider';\nimport { UserContext } from '../../logic/providers/userProvider';\nimport multiSelectWithColour from '../../design/selectStyles';\n\nimport { tag, book, user as userType } from '../../logic/types';\n\ninterface PropsType {\n    show: boolean;\n    setSearchDifficulty: (searchDiff: number) => void;\n    setSearchWithDifficulty: (use: boolean) => void;\n    setSearchTags: (tagsUsef: tag[]) => void;\n    setSearchWithTags: (use: boolean) => void;\n    setSearchBooks: (booksUsef: book[]) => void;\n    setSearchWithBooks: (use: boolean) => void;\n    setSearchOwner: (userUsed: string) => void;\n    setSearchWithOwner: (use: boolean) => void;\n    setSearchLikedStatus: (statusUsed: number) => void;\n    setSearchWithLikedStatus: (use: boolean) => void;\n}\n\nconst Search: React.FC<PropsType> = React.memo(\n    ({\n        show: showAdvancedSearch,\n        setSearchDifficulty: setSearchDifficultyProps,\n        setSearchWithDifficulty: setSearchWithDifficultyProps,\n        setSearchTags: setSearchTagsProps,\n        setSearchWithTags: setSearchWithTagsProps,\n        setSearchBooks: setSearchBooksProps,\n        setSearchWithBooks: setSearchWithBooksProps,\n        setSearchOwner: setSearchOwnerProps,\n        setSearchWithOwner: setSearchWithOwnerProps,\n        setSearchLikedStatus: setSearchLikedStatusProps,\n        setSearchWithLikedStatus: setSearchWithLikedStatusProps,\n    }) => {\n        const { user } = useContext(UserContext);\n        const { allUsers } = useContext(UsersContext);\n        const { allTags } = useContext(TagContext);\n        const { allBooks } = useContext(BookContext);\n\n        const [difficulty, setDifficulty] = useState<number>(3);\n        const [withDifficulty, setWithDifficulty] = useState<boolean>(false);\n\n        const [tags, setTags] = useState<tag[]>([]);\n        const [withTags, setWithTags] = useState<boolean>(false);\n\n        const [books, setBooks] = useState<book[]>([]);\n        const [withBooks, setWithBooks] = useState<boolean>(false);\n\n        const [owner, setOwner] = useState<any>('');\n        const [withOwner, setWithOwner] = useState<boolean>(false);\n\n        const [likedStatus, setLikedStatus] = useState<any>({ label: 'All', value: 0 });\n        const [withLikedStatus, setWithLikedStatus] = useState<boolean>(false);\n\n        const MAPPED_USERS = useMemo(() => {\n            let mapped: any = [{ label: 'My patterns', value: user?.uid }];\n            mapped = mapped.concat(\n                allUsers\n                    .filter((u: userType) => u?.uid !== user?.uid)\n                    .map((u: userType) => ({ ...u, label: u?.username, value: u?.uid })),\n            );\n            return mapped;\n        }, [allUsers, user]);\n\n        if (!showAdvancedSearch) {\n            return <></>;\n        }\n\n        return (\n            <AdvancedSearch>\n                <SearchGroup>\n                    <input\n                        name=\"patternTitle\"\n                        placeholder=\"Enter title\"\n                        type=\"checkbox\"\n                        checked={withDifficulty}\n                        onChange={() => {\n                            setWithDifficulty(!withDifficulty);\n                            setSearchWithDifficultyProps(!withDifficulty);\n                        }}\n                    />\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Difficulty</Label>\n                    <DifficultyInput\n                        block\n                        type=\"range\"\n                        name=\"patternDifficulty\"\n                        min={1}\n                        max={5}\n                        step={1}\n                        value={difficulty}\n                        onChange={(e) => {\n                            setDifficulty(parseInt(e.target.value, 10));\n                            setSearchDifficultyProps(parseInt(e.target.value, 10));\n                        }}\n                    />\n                </SearchGroup>\n\n                <SearchGroup>\n                    <input\n                        name=\"patternTitle\"\n                        placeholder=\"Enter title\"\n                        type=\"checkbox\"\n                        checked={withTags}\n                        onChange={() => {\n                            setWithTags(!withTags);\n                            setSearchWithTagsProps(!withTags);\n                        }}\n                    />\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Has tags</Label>\n                    <Select\n                        options={allTags}\n                        value={tags}\n                        isMulti\n                        onChange={(e) => {\n                            setTags([...e]);\n                            setSearchTagsProps([...e]);\n                        }}\n                    />\n                </SearchGroup>\n\n                <SearchGroup>\n                    <input\n                        name=\"patternTitle\"\n                        placeholder=\"Enter title\"\n                        type=\"checkbox\"\n                        checked={withBooks}\n                        onChange={() => {\n                            setWithBooks(!withBooks);\n                            setSearchWithBooksProps(!withBooks);\n                        }}\n                    />\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Is in books</Label>\n                    <Select\n                        styles={multiSelectWithColour}\n                        options={allBooks}\n                        value={books}\n                        isMulti\n                        onChange={(e) => {\n                            setBooks([...e]);\n                            setSearchBooksProps([...e]);\n                        }}\n                    />\n                </SearchGroup>\n\n                <SearchGroup>\n                    <input\n                        name=\"patternTitle\"\n                        placeholder=\"Enter title\"\n                        type=\"checkbox\"\n                        checked={withOwner}\n                        onChange={() => {\n                            setWithOwner(!withOwner);\n                            setSearchWithOwnerProps(!withOwner);\n                        }}\n                    />\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Owner</Label>\n                    <Select\n                        options={MAPPED_USERS}\n                        value={owner}\n                        onChange={(e) => {\n                            setOwner(e);\n                            setSearchOwnerProps(e.value);\n                        }}\n                    />\n                </SearchGroup>\n\n                <SearchGroup>\n                    <input\n                        name=\"patternTitle\"\n                        placeholder=\"Enter title\"\n                        type=\"checkbox\"\n                        checked={withLikedStatus}\n                        onChange={() => {\n                            setWithLikedStatus(!withLikedStatus);\n                            setSearchWithLikedStatusProps(!withLikedStatus);\n                        }}\n                    />\n                    <Label style={{ display: 'inline', marginLeft: '' }}>Liked status</Label>\n                    <Select\n                        options={[\n                            { label: 'All', value: 0 },\n                            { label: 'Liked', value: 1 },\n                            { label: 'Not liked', value: 2 },\n                        ]}\n                        value={likedStatus}\n                        onChange={(e) => {\n                            setLikedStatus(e);\n                            setSearchLikedStatusProps(e.value);\n                        }}\n                    />\n                </SearchGroup>\n            </AdvancedSearch>\n        );\n    },\n);\n\nSearch.displayName = 'PatternLSearchist';\n\nexport default Search;\n","C:\\Dokumenty\\GitHub\\patternRepository\\patternrepository\\src\\logic\\services\\commentsService.tsx",["335","336","337","338","339"],"import { firestore } from '../firebase';\n\nimport { commentToAdd } from '../types';\n\nconst collectionRef = firestore.collection('/comments');\n\nconst getAll = () => {\n    return collectionRef;\n};\n\nconst create = (data: commentToAdd) => {\n    return collectionRef.add(data);\n};\n\nconst update = (id: string, value: commentToAdd) => {\n    return collectionRef.doc(id).update(value);\n};\n\nconst set = (id: string, value: commentToAdd) => {\n    return collectionRef.doc(id).set(value);\n};\n\nconst remove = (id: string) => {\n    return collectionRef.doc(id).delete();\n};\n\nconst CommentsService = {\n    getAll,\n    set,\n    create,\n    update,\n    remove,\n};\n\nexport default CommentsService;\n",{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","replacedBy":"345"},{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","severity":1,"message":"351","line":21,"column":35,"nodeType":"352","messageId":"353","endLine":21,"endColumn":38,"suggestions":"354"},{"ruleId":"350","severity":1,"message":"351","line":13,"column":35,"nodeType":"352","messageId":"353","endLine":13,"endColumn":38,"suggestions":"355"},{"ruleId":"350","severity":1,"message":"351","line":19,"column":37,"nodeType":"352","messageId":"353","endLine":19,"endColumn":40,"suggestions":"356"},{"ruleId":"357","severity":1,"message":"358","line":30,"column":9,"nodeType":"359","messageId":"360","endLine":30,"endColumn":22},{"ruleId":"361","severity":1,"message":"362","line":35,"column":37,"nodeType":"363","messageId":"364","endLine":35,"endColumn":78},{"ruleId":"361","severity":1,"message":"365","line":35,"column":44,"nodeType":"366","messageId":"367","endLine":35,"endColumn":53},{"ruleId":"350","severity":1,"message":"351","line":35,"column":50,"nodeType":"352","messageId":"353","endLine":35,"endColumn":53,"suggestions":"368"},{"ruleId":"361","severity":1,"message":"369","line":35,"column":55,"nodeType":"366","messageId":"367","endLine":35,"endColumn":74},{"ruleId":"350","severity":1,"message":"351","line":35,"column":71,"nodeType":"352","messageId":"353","endLine":35,"endColumn":74,"suggestions":"370"},{"ruleId":"357","severity":1,"message":"358","line":48,"column":13,"nodeType":"359","messageId":"360","endLine":48,"endColumn":26},{"ruleId":"350","severity":1,"message":"351","line":23,"column":65,"nodeType":"352","messageId":"353","endLine":23,"endColumn":68,"suggestions":"371"},{"ruleId":"350","severity":1,"message":"351","line":13,"column":17,"nodeType":"352","messageId":"353","endLine":13,"endColumn":20,"suggestions":"372"},{"ruleId":"357","severity":1,"message":"358","line":17,"column":17,"nodeType":"359","messageId":"360","endLine":17,"endColumn":30},{"ruleId":"350","severity":1,"message":"351","line":141,"column":43,"nodeType":"352","messageId":"353","endLine":141,"endColumn":46,"suggestions":"373"},{"ruleId":"350","severity":1,"message":"351","line":141,"column":56,"nodeType":"352","messageId":"353","endLine":141,"endColumn":59,"suggestions":"374"},{"ruleId":"350","severity":1,"message":"351","line":71,"column":17,"nodeType":"352","messageId":"353","endLine":71,"endColumn":20,"suggestions":"375"},{"ruleId":"350","severity":1,"message":"351","line":75,"column":39,"nodeType":"352","messageId":"353","endLine":75,"endColumn":42,"suggestions":"376"},{"ruleId":"350","severity":1,"message":"351","line":124,"column":17,"nodeType":"352","messageId":"353","endLine":124,"endColumn":20,"suggestions":"377"},{"ruleId":"350","severity":1,"message":"351","line":136,"column":56,"nodeType":"352","messageId":"353","endLine":136,"endColumn":59,"suggestions":"378"},{"ruleId":"361","severity":1,"message":"362","line":5,"column":20,"nodeType":"363","messageId":"364","endLine":5,"endColumn":42},{"ruleId":"350","severity":1,"message":"351","line":60,"column":42,"nodeType":"352","messageId":"353","endLine":60,"endColumn":45,"suggestions":"379"},{"ruleId":"380","severity":1,"message":"381","line":73,"column":36,"nodeType":"382","messageId":"383","endLine":73,"endColumn":45},{"ruleId":"350","severity":1,"message":"351","line":369,"column":39,"nodeType":"352","messageId":"353","endLine":369,"endColumn":42,"suggestions":"384"},{"ruleId":"350","severity":1,"message":"351","line":369,"column":52,"nodeType":"352","messageId":"353","endLine":369,"endColumn":55,"suggestions":"385"},{"ruleId":"386","severity":2,"message":"387","line":1,"column":13,"nodeType":"366","messageId":"388","endLine":1,"endColumn":17},{"ruleId":"386","severity":2,"message":"389","line":3,"column":6,"nodeType":"366","messageId":"388","endLine":3,"endColumn":14},{"ruleId":"386","severity":2,"message":"390","line":11,"column":13,"nodeType":"366","messageId":"388","endLine":11,"endColumn":20},{"ruleId":"350","severity":1,"message":"351","line":78,"column":21,"nodeType":"352","messageId":"353","endLine":78,"endColumn":24,"suggestions":"391"},{"ruleId":"350","severity":1,"message":"351","line":82,"column":43,"nodeType":"352","messageId":"353","endLine":82,"endColumn":46,"suggestions":"392"},{"ruleId":"350","severity":1,"message":"351","line":115,"column":55,"nodeType":"352","messageId":"353","endLine":115,"endColumn":58,"suggestions":"393"},{"ruleId":"350","severity":1,"message":"351","line":173,"column":33,"nodeType":"352","messageId":"353","endLine":173,"endColumn":36,"suggestions":"394"},{"ruleId":"350","severity":1,"message":"351","line":174,"column":33,"nodeType":"352","messageId":"353","endLine":174,"endColumn":36,"suggestions":"395"},{"ruleId":"361","severity":1,"message":"362","line":6,"column":16,"nodeType":"363","messageId":"364","endLine":6,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":10,"column":20,"nodeType":"363","messageId":"364","endLine":10,"endColumn":25},{"ruleId":"361","severity":1,"message":"362","line":17,"column":22,"nodeType":"363","messageId":"364","endLine":17,"endColumn":38},{"ruleId":"361","severity":1,"message":"362","line":21,"column":16,"nodeType":"363","messageId":"364","endLine":21,"endColumn":39},{"ruleId":"361","severity":1,"message":"362","line":25,"column":16,"nodeType":"363","messageId":"364","endLine":25,"endColumn":52},{"ruleId":"361","severity":1,"message":"362","line":29,"column":13,"nodeType":"363","messageId":"364","endLine":29,"endColumn":49},{"ruleId":"361","severity":1,"message":"362","line":33,"column":21,"nodeType":"363","messageId":"364","endLine":33,"endColumn":51},{"ruleId":"361","severity":1,"message":"362","line":37,"column":24,"nodeType":"363","messageId":"364","endLine":37,"endColumn":54},{"ruleId":"361","severity":1,"message":"362","line":41,"column":16,"nodeType":"363","messageId":"364","endLine":41,"endColumn":31},{"ruleId":"350","severity":1,"message":"351","line":52,"column":17,"nodeType":"352","messageId":"353","endLine":52,"endColumn":20,"suggestions":"396"},{"ruleId":"350","severity":1,"message":"351","line":56,"column":39,"nodeType":"352","messageId":"353","endLine":56,"endColumn":42,"suggestions":"397"},{"ruleId":"398","severity":1,"message":"399","line":300,"column":13,"nodeType":"400","messageId":"360","endLine":300,"endColumn":76},{"ruleId":"350","severity":1,"message":"351","line":381,"column":39,"nodeType":"352","messageId":"353","endLine":381,"endColumn":42,"suggestions":"401"},{"ruleId":"350","severity":1,"message":"351","line":381,"column":52,"nodeType":"352","messageId":"353","endLine":381,"endColumn":55,"suggestions":"402"},{"ruleId":"361","severity":1,"message":"362","line":6,"column":16,"nodeType":"363","messageId":"364","endLine":6,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":10,"column":16,"nodeType":"363","messageId":"364","endLine":10,"endColumn":35},{"ruleId":"361","severity":1,"message":"362","line":14,"column":16,"nodeType":"363","messageId":"364","endLine":14,"endColumn":48},{"ruleId":"361","severity":1,"message":"362","line":18,"column":13,"nodeType":"363","messageId":"364","endLine":18,"endColumn":45},{"ruleId":"361","severity":1,"message":"362","line":22,"column":16,"nodeType":"363","messageId":"364","endLine":22,"endColumn":31},{"ruleId":"350","severity":1,"message":"351","line":14,"column":37,"nodeType":"352","messageId":"353","endLine":14,"endColumn":40,"suggestions":"403"},{"ruleId":"350","severity":1,"message":"351","line":18,"column":35,"nodeType":"352","messageId":"353","endLine":18,"endColumn":38,"suggestions":"404"},{"ruleId":"361","severity":1,"message":"362","line":6,"column":16,"nodeType":"363","messageId":"364","endLine":6,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":10,"column":20,"nodeType":"363","messageId":"364","endLine":10,"endColumn":25},{"ruleId":"361","severity":1,"message":"362","line":17,"column":22,"nodeType":"363","messageId":"364","endLine":17,"endColumn":38},{"ruleId":"361","severity":1,"message":"362","line":21,"column":16,"nodeType":"363","messageId":"364","endLine":21,"endColumn":35},{"ruleId":"361","severity":1,"message":"362","line":25,"column":16,"nodeType":"363","messageId":"364","endLine":25,"endColumn":48},{"ruleId":"361","severity":1,"message":"362","line":29,"column":13,"nodeType":"363","messageId":"364","endLine":29,"endColumn":45},{"ruleId":"361","severity":1,"message":"362","line":33,"column":16,"nodeType":"363","messageId":"364","endLine":33,"endColumn":31},{"ruleId":"350","severity":1,"message":"351","line":14,"column":38,"nodeType":"352","messageId":"353","endLine":14,"endColumn":41,"suggestions":"405"},{"ruleId":"350","severity":1,"message":"351","line":18,"column":35,"nodeType":"352","messageId":"353","endLine":18,"endColumn":38,"suggestions":"406"},{"ruleId":"361","severity":1,"message":"362","line":2,"column":17,"nodeType":"363","messageId":"364","endLine":2,"endColumn":47},{"ruleId":"361","severity":1,"message":"407","line":2,"column":18,"nodeType":"366","messageId":"367","endLine":2,"endColumn":31},{"ruleId":"350","severity":1,"message":"351","line":2,"column":28,"nodeType":"352","messageId":"353","endLine":2,"endColumn":31,"suggestions":"408"},{"ruleId":"361","severity":1,"message":"409","line":2,"column":33,"nodeType":"366","messageId":"367","endLine":2,"endColumn":43},{"ruleId":"350","severity":1,"message":"351","line":2,"column":40,"nodeType":"352","messageId":"353","endLine":2,"endColumn":43,"suggestions":"410"},{"ruleId":"361","severity":1,"message":"362","line":13,"column":14,"nodeType":"363","messageId":"364","endLine":13,"endColumn":28},{"ruleId":"361","severity":1,"message":"411","line":13,"column":15,"nodeType":"366","messageId":"367","endLine":13,"endColumn":24},{"ruleId":"350","severity":1,"message":"351","line":13,"column":21,"nodeType":"352","messageId":"353","endLine":13,"endColumn":24,"suggestions":"412"},{"ruleId":"361","severity":1,"message":"362","line":22,"column":24,"nodeType":"363","messageId":"364","endLine":22,"endColumn":38},{"ruleId":"361","severity":1,"message":"411","line":22,"column":25,"nodeType":"366","messageId":"367","endLine":22,"endColumn":34},{"ruleId":"350","severity":1,"message":"351","line":22,"column":31,"nodeType":"352","messageId":"353","endLine":22,"endColumn":34,"suggestions":"413"},{"ruleId":"361","severity":1,"message":"362","line":27,"column":21,"nodeType":"363","messageId":"364","endLine":27,"endColumn":35},{"ruleId":"361","severity":1,"message":"411","line":27,"column":22,"nodeType":"366","messageId":"367","endLine":27,"endColumn":31},{"ruleId":"350","severity":1,"message":"351","line":27,"column":28,"nodeType":"352","messageId":"353","endLine":27,"endColumn":31,"suggestions":"414"},{"ruleId":"361","severity":1,"message":"362","line":31,"column":22,"nodeType":"363","messageId":"364","endLine":31,"endColumn":36},{"ruleId":"361","severity":1,"message":"411","line":31,"column":23,"nodeType":"366","messageId":"367","endLine":31,"endColumn":32},{"ruleId":"350","severity":1,"message":"351","line":31,"column":29,"nodeType":"352","messageId":"353","endLine":31,"endColumn":32,"suggestions":"415"},{"ruleId":"361","severity":1,"message":"362","line":34,"column":23,"nodeType":"363","messageId":"364","endLine":34,"endColumn":39},{"ruleId":"361","severity":1,"message":"416","line":34,"column":24,"nodeType":"366","messageId":"367","endLine":34,"endColumn":35},{"ruleId":"350","severity":1,"message":"351","line":34,"column":32,"nodeType":"352","messageId":"353","endLine":34,"endColumn":35,"suggestions":"417"},{"ruleId":"361","severity":1,"message":"362","line":37,"column":15,"nodeType":"363","messageId":"364","endLine":37,"endColumn":31},{"ruleId":"361","severity":1,"message":"416","line":37,"column":16,"nodeType":"366","messageId":"367","endLine":37,"endColumn":27},{"ruleId":"350","severity":1,"message":"351","line":37,"column":24,"nodeType":"352","messageId":"353","endLine":37,"endColumn":27,"suggestions":"418"},{"ruleId":"361","severity":1,"message":"362","line":41,"column":21,"nodeType":"363","messageId":"364","endLine":41,"endColumn":35},{"ruleId":"361","severity":1,"message":"411","line":41,"column":22,"nodeType":"366","messageId":"367","endLine":41,"endColumn":31},{"ruleId":"350","severity":1,"message":"351","line":41,"column":28,"nodeType":"352","messageId":"353","endLine":41,"endColumn":31,"suggestions":"419"},{"ruleId":"361","severity":1,"message":"362","line":46,"column":12,"nodeType":"363","messageId":"364","endLine":46,"endColumn":26},{"ruleId":"361","severity":1,"message":"411","line":46,"column":13,"nodeType":"366","messageId":"367","endLine":46,"endColumn":22},{"ruleId":"350","severity":1,"message":"351","line":46,"column":19,"nodeType":"352","messageId":"353","endLine":46,"endColumn":22,"suggestions":"420"},{"ruleId":"361","severity":1,"message":"362","line":53,"column":25,"nodeType":"363","messageId":"364","endLine":53,"endColumn":39},{"ruleId":"361","severity":1,"message":"411","line":53,"column":26,"nodeType":"366","messageId":"367","endLine":53,"endColumn":35},{"ruleId":"350","severity":1,"message":"351","line":53,"column":32,"nodeType":"352","messageId":"353","endLine":53,"endColumn":35,"suggestions":"421"},{"ruleId":"361","severity":1,"message":"362","line":57,"column":18,"nodeType":"363","messageId":"364","endLine":57,"endColumn":32},{"ruleId":"361","severity":1,"message":"411","line":57,"column":19,"nodeType":"366","messageId":"367","endLine":57,"endColumn":28},{"ruleId":"350","severity":1,"message":"351","line":57,"column":25,"nodeType":"352","messageId":"353","endLine":57,"endColumn":28,"suggestions":"422"},{"ruleId":"361","severity":1,"message":"362","line":60,"column":11,"nodeType":"363","messageId":"364","endLine":60,"endColumn":25},{"ruleId":"361","severity":1,"message":"411","line":60,"column":12,"nodeType":"366","messageId":"367","endLine":60,"endColumn":21},{"ruleId":"350","severity":1,"message":"351","line":60,"column":18,"nodeType":"352","messageId":"353","endLine":60,"endColumn":21,"suggestions":"423"},{"ruleId":"361","severity":1,"message":"362","line":1,"column":24,"nodeType":"363","messageId":"364","endLine":1,"endColumn":42},{"ruleId":"361","severity":1,"message":"362","line":6,"column":19,"nodeType":"363","messageId":"364","endLine":6,"endColumn":24},{"ruleId":"361","severity":1,"message":"424","line":13,"column":16,"nodeType":"366","messageId":"425","endLine":13,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":18,"column":3,"nodeType":"382","messageId":"364","endLine":18,"endColumn":11},{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","replacedBy":"345"},{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","replacedBy":"349"},{"ruleId":"361","severity":1,"message":"424","line":13,"column":16,"nodeType":"366","messageId":"425","endLine":13,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":19,"column":3,"nodeType":"382","messageId":"364","endLine":19,"endColumn":11},{"ruleId":"361","severity":1,"message":"424","line":24,"column":16,"nodeType":"366","messageId":"425","endLine":24,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":29,"column":3,"nodeType":"382","messageId":"364","endLine":29,"endColumn":11},{"ruleId":"361","severity":1,"message":"424","line":23,"column":16,"nodeType":"366","messageId":"425","endLine":23,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":28,"column":3,"nodeType":"382","messageId":"364","endLine":28,"endColumn":11},{"ruleId":"350","severity":1,"message":"351","line":14,"column":38,"nodeType":"352","messageId":"353","endLine":14,"endColumn":41,"suggestions":"426"},{"ruleId":"350","severity":1,"message":"351","line":18,"column":35,"nodeType":"352","messageId":"353","endLine":18,"endColumn":38,"suggestions":"427"},{"ruleId":"361","severity":1,"message":"362","line":5,"column":16,"nodeType":"363","messageId":"364","endLine":5,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":5,"column":16,"nodeType":"363","messageId":"364","endLine":5,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":9,"column":18,"nodeType":"363","messageId":"364","endLine":9,"endColumn":50},{"ruleId":"361","severity":1,"message":"362","line":5,"column":16,"nodeType":"363","messageId":"364","endLine":5,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":9,"column":21,"nodeType":"363","messageId":"364","endLine":9,"endColumn":53},{"ruleId":"350","severity":1,"message":"351","line":54,"column":44,"nodeType":"352","messageId":"353","endLine":54,"endColumn":47,"suggestions":"428"},{"ruleId":"350","severity":1,"message":"351","line":57,"column":56,"nodeType":"352","messageId":"353","endLine":57,"endColumn":59,"suggestions":"429"},{"ruleId":"350","severity":1,"message":"351","line":61,"column":25,"nodeType":"352","messageId":"353","endLine":61,"endColumn":28,"suggestions":"430"},{"ruleId":"361","severity":1,"message":"362","line":7,"column":16,"nodeType":"363","messageId":"364","endLine":7,"endColumn":21},{"ruleId":"361","severity":1,"message":"362","line":11,"column":16,"nodeType":"363","messageId":"364","endLine":11,"endColumn":39},{"ruleId":"361","severity":1,"message":"362","line":15,"column":16,"nodeType":"363","messageId":"364","endLine":15,"endColumn":52},{"ruleId":"361","severity":1,"message":"362","line":19,"column":13,"nodeType":"363","messageId":"364","endLine":19,"endColumn":49},{"ruleId":"361","severity":1,"message":"362","line":23,"column":16,"nodeType":"363","messageId":"364","endLine":23,"endColumn":31},"lines-around-directive",["431"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["432","433"],["434","435"],["436","437"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'user' should be typed with a non-any type.","Identifier","anyTypedArg",["438","439"],"Argument 'additionalData' should be typed with a non-any type.",["440","441"],["442","443"],["444","445"],["446","447"],["448","449"],["450","451"],["452","453"],["454","455"],["456","457"],["458","459"],"func-names","Unexpected unnamed function.","FunctionExpression","unnamed",["460","461"],["462","463"],"@typescript-eslint/naming-convention","Type Alias name `user` must match one of the following formats: PascalCase","doesNotMatchFormat","Type Alias name `userInfo` must match one of the following formats: PascalCase","Type Alias name `picture` must match one of the following formats: PascalCase",["464","465"],["466","467"],["468","469"],["470","471"],["472","473"],["474","475"],["476","477"],"no-alert","Unexpected confirm.","CallExpression",["478","479"],["480","481"],["482","483"],["484","485"],["486","487"],["488","489"],"Argument 'provided' should be typed with a non-any type.",["490","491"],"Argument 'state' should be typed with a non-any type.",["492","493"],"Argument 'base' should be typed with a non-any type.",["494","495"],["496","497"],["498","499"],["500","501"],"Argument 'styles' should be typed with a non-any type.",["502","503"],["504","505"],["506","507"],["508","509"],["510","511"],["512","513"],["514","515"],"Argument 'props' should be typed.","missingArgType",["516","517"],["518","519"],["520","521"],["522","523"],["524","525"],"padding-line-between-statements",{"messageId":"526","fix":"527","desc":"528"},{"messageId":"529","fix":"530","desc":"531"},{"messageId":"526","fix":"532","desc":"528"},{"messageId":"529","fix":"533","desc":"531"},{"messageId":"526","fix":"534","desc":"528"},{"messageId":"529","fix":"535","desc":"531"},{"messageId":"526","fix":"536","desc":"528"},{"messageId":"529","fix":"537","desc":"531"},{"messageId":"526","fix":"538","desc":"528"},{"messageId":"529","fix":"539","desc":"531"},{"messageId":"526","fix":"540","desc":"528"},{"messageId":"529","fix":"541","desc":"531"},{"messageId":"526","fix":"542","desc":"528"},{"messageId":"529","fix":"543","desc":"531"},{"messageId":"526","fix":"544","desc":"528"},{"messageId":"529","fix":"545","desc":"531"},{"messageId":"526","fix":"546","desc":"528"},{"messageId":"529","fix":"547","desc":"531"},{"messageId":"526","fix":"548","desc":"528"},{"messageId":"529","fix":"549","desc":"531"},{"messageId":"526","fix":"550","desc":"528"},{"messageId":"529","fix":"551","desc":"531"},{"messageId":"526","fix":"552","desc":"528"},{"messageId":"529","fix":"553","desc":"531"},{"messageId":"526","fix":"554","desc":"528"},{"messageId":"529","fix":"555","desc":"531"},{"messageId":"526","fix":"556","desc":"528"},{"messageId":"529","fix":"557","desc":"531"},{"messageId":"526","fix":"558","desc":"528"},{"messageId":"529","fix":"559","desc":"531"},{"messageId":"526","fix":"560","desc":"528"},{"messageId":"529","fix":"561","desc":"531"},{"messageId":"526","fix":"562","desc":"528"},{"messageId":"529","fix":"563","desc":"531"},{"messageId":"526","fix":"564","desc":"528"},{"messageId":"529","fix":"565","desc":"531"},{"messageId":"526","fix":"566","desc":"528"},{"messageId":"529","fix":"567","desc":"531"},{"messageId":"526","fix":"568","desc":"528"},{"messageId":"529","fix":"569","desc":"531"},{"messageId":"526","fix":"570","desc":"528"},{"messageId":"529","fix":"571","desc":"531"},{"messageId":"526","fix":"572","desc":"528"},{"messageId":"529","fix":"573","desc":"531"},{"messageId":"526","fix":"574","desc":"528"},{"messageId":"529","fix":"575","desc":"531"},{"messageId":"526","fix":"576","desc":"528"},{"messageId":"529","fix":"577","desc":"531"},{"messageId":"526","fix":"578","desc":"528"},{"messageId":"529","fix":"579","desc":"531"},{"messageId":"526","fix":"580","desc":"528"},{"messageId":"529","fix":"581","desc":"531"},{"messageId":"526","fix":"582","desc":"528"},{"messageId":"529","fix":"583","desc":"531"},{"messageId":"526","fix":"584","desc":"528"},{"messageId":"529","fix":"585","desc":"531"},{"messageId":"526","fix":"586","desc":"528"},{"messageId":"529","fix":"587","desc":"531"},{"messageId":"526","fix":"588","desc":"528"},{"messageId":"529","fix":"589","desc":"531"},{"messageId":"526","fix":"590","desc":"528"},{"messageId":"529","fix":"591","desc":"531"},{"messageId":"526","fix":"592","desc":"528"},{"messageId":"529","fix":"593","desc":"531"},{"messageId":"526","fix":"594","desc":"528"},{"messageId":"529","fix":"595","desc":"531"},{"messageId":"526","fix":"596","desc":"528"},{"messageId":"529","fix":"597","desc":"531"},{"messageId":"526","fix":"598","desc":"528"},{"messageId":"529","fix":"599","desc":"531"},{"messageId":"526","fix":"600","desc":"528"},{"messageId":"529","fix":"601","desc":"531"},{"messageId":"526","fix":"602","desc":"528"},{"messageId":"529","fix":"603","desc":"531"},{"messageId":"526","fix":"604","desc":"528"},{"messageId":"529","fix":"605","desc":"531"},{"messageId":"526","fix":"606","desc":"528"},{"messageId":"529","fix":"607","desc":"531"},{"messageId":"526","fix":"608","desc":"528"},{"messageId":"529","fix":"609","desc":"531"},{"messageId":"526","fix":"610","desc":"528"},{"messageId":"529","fix":"611","desc":"531"},{"messageId":"526","fix":"612","desc":"528"},{"messageId":"529","fix":"613","desc":"531"},{"messageId":"526","fix":"614","desc":"528"},{"messageId":"529","fix":"615","desc":"531"},{"messageId":"526","fix":"616","desc":"528"},{"messageId":"529","fix":"617","desc":"531"},{"messageId":"526","fix":"618","desc":"528"},{"messageId":"529","fix":"619","desc":"531"},{"messageId":"526","fix":"620","desc":"528"},{"messageId":"529","fix":"621","desc":"531"},{"messageId":"526","fix":"622","desc":"528"},{"messageId":"529","fix":"623","desc":"531"},"suggestUnknown",{"range":"624","text":"625"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"624","text":"626"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"627","text":"625"},{"range":"627","text":"626"},{"range":"628","text":"625"},{"range":"628","text":"626"},{"range":"629","text":"625"},{"range":"629","text":"626"},{"range":"630","text":"625"},{"range":"630","text":"626"},{"range":"631","text":"625"},{"range":"631","text":"626"},{"range":"632","text":"625"},{"range":"632","text":"626"},{"range":"633","text":"625"},{"range":"633","text":"626"},{"range":"634","text":"625"},{"range":"634","text":"626"},{"range":"635","text":"625"},{"range":"635","text":"626"},{"range":"636","text":"625"},{"range":"636","text":"626"},{"range":"637","text":"625"},{"range":"637","text":"626"},{"range":"638","text":"625"},{"range":"638","text":"626"},{"range":"639","text":"625"},{"range":"639","text":"626"},{"range":"640","text":"625"},{"range":"640","text":"626"},{"range":"641","text":"625"},{"range":"641","text":"626"},{"range":"642","text":"625"},{"range":"642","text":"626"},{"range":"643","text":"625"},{"range":"643","text":"626"},{"range":"644","text":"625"},{"range":"644","text":"626"},{"range":"645","text":"625"},{"range":"645","text":"626"},{"range":"646","text":"625"},{"range":"646","text":"626"},{"range":"647","text":"625"},{"range":"647","text":"626"},{"range":"648","text":"625"},{"range":"648","text":"626"},{"range":"649","text":"625"},{"range":"649","text":"626"},{"range":"650","text":"625"},{"range":"650","text":"626"},{"range":"651","text":"625"},{"range":"651","text":"626"},{"range":"652","text":"625"},{"range":"652","text":"626"},{"range":"653","text":"625"},{"range":"653","text":"626"},{"range":"654","text":"625"},{"range":"654","text":"626"},{"range":"655","text":"625"},{"range":"655","text":"626"},{"range":"656","text":"625"},{"range":"656","text":"626"},{"range":"657","text":"625"},{"range":"657","text":"626"},{"range":"658","text":"625"},{"range":"658","text":"626"},{"range":"659","text":"625"},{"range":"659","text":"626"},{"range":"660","text":"625"},{"range":"660","text":"626"},{"range":"661","text":"625"},{"range":"661","text":"626"},{"range":"662","text":"625"},{"range":"662","text":"626"},{"range":"663","text":"625"},{"range":"663","text":"626"},{"range":"664","text":"625"},{"range":"664","text":"626"},{"range":"665","text":"625"},{"range":"665","text":"626"},{"range":"666","text":"625"},{"range":"666","text":"626"},{"range":"667","text":"625"},{"range":"667","text":"626"},{"range":"668","text":"625"},{"range":"668","text":"626"},{"range":"669","text":"625"},{"range":"669","text":"626"},{"range":"670","text":"625"},{"range":"670","text":"626"},{"range":"671","text":"625"},{"range":"671","text":"626"},{"range":"672","text":"625"},{"range":"672","text":"626"},[629,632],"unknown","never",[513,516],[522,525],[1002,1005],[1023,1026],[692,695],[479,482],[4722,4725],[4735,4738],[3009,3012],[3143,3146],[4901,4904],[5378,5381],[2406,2409],[12594,12597],[12607,12610],[2259,2262],[2405,2408],[3855,3858],[6479,6482],[6556,6559],[1653,1656],[1787,1790],[13635,13638],[13648,13651],[460,463],[566,569],[487,490],[600,603],[44,47],[56,59],[267,270],[545,548],[658,661],[742,745],[809,812],[870,873],[982,985],[1089,1092],[1256,1259],[1334,1337],[1387,1390],[501,504],[618,621],[2415,2418],[2549,2552],[2733,2736]]